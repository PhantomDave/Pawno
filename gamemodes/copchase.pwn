#include <a_samp>
#include <a_mysql>
#include <foreach>
#include <easyDialog>
#include <smartcmd>
#include <sscanf2>
#include <colors>
#include <streamer>
#include <garageblock>

#undef MAX_PLAYERS
#define MAX_PLAYERS 30 
#if defined _elc_ac_included
	#endinput
#endif
#define _elc_ac_included

#define MAX_LOGIN_ATTEMPTS 3

#if defined _elc_ac_compill
#error You must add ELC_CONNECTOR or ELC_BASE but not add both
#endif
#define _elc_ac_compill
//Anti-Cheat Statut defaut :
#define ANTI_WEAPON_&_AMMO_HACK     1
#define ANTI_AMMO_BLOCK_HACK        1
#define ANTI_MONEY_HACK             0
#define ANTI_SPEED_HACK             1
#define ANTI_TELEPORT/AIBREAK_HACK  1
#define ANTI_HEALTH_HACK            1//Not fix
#define ANTI_ARMOUR_HACK            0//Not fix
#define ANTI_VEHICLE-TELEPORT_HACK  2//1->Normal Protection,2->Hight Proection
//Configuration :
#define MAX_SPEED_VEHICLE                   380.0 // SPEED VEHICLE MAX(380=default)
#define MAX_VEHICLE_DISTANCE_PER_SECOND     180   // DISTANCE PARCOUR MAX VEHICLE PER SECOND(180=default)
#define MAX_PED_DISTANCE_PER_SECOND         100   // DISTANCE PARCOUR MAX AT PED PER SECOND(100=default)
#define SPRINT_SPEED                        30.0  // (30=DEFAULT)
#define TIMER_CHEAT_RATE                    3500  // (3500=DEFAULT)
#define TIME_GRANULITY                      50    // Granulity GetTickCount
#define DELAY_LOAD_AFTER_SPAWN              5000
#define MAX_DELAY_SEND_STATS                2000
#define MAX_DELAY_WAIT_AFTER_SPAWN          3000
#define MAX_VEHICLE_DISTANCE_UCM            10
#define MAX_WEAPON_SHOT_FOR_CHECK           5
//STATUS MODE :
//#define NO_TICK_COUNT  //uncomment If GetTickCount() bug(linux?)
#define INCLUDE_BASE_MODE //uncomment to pass in mod include
#define MODE_DELAY_SEND_STATS //uncomment if the sending of stats is a bit slow(RECOMMANDED)
#define DISABLE_MONEY_DEATHLOSE //uncomment if you disable the lose of 100$ after death
//Calcul(DON'T TOUCH)----------------------------------------------------------
#define XMAX_VEHICLE_DISTANCE_PER_SECOND MAX_VEHICLE_DISTANCE_PER_SECOND*(TIMER_CHEAT_RATE/1000)
#define XMAX_PED_DISTANCE_PER_SECOND MAX_PED_DISTANCE_PER_SECOND*(TIMER_CHEAT_RATE/1000)
#define SaveTime(%0,%1) %0=%1+MAX_DELAY_SEND_STATS
#define IsPassTime(%0,%1,%2) (%1<%2&&CheatPlayerInfo[%0][elc_LastUpdate]!=0&&CheatPlayerInfo[%0][elc_LastUpdate]<%2)//Time Action ,Time Now
#define IsPlayerCheatPos(%0) (((GetPlayerSurfingVehicleID(%0)!=INVALID_VEHICLE_ID || IsPlayerInAnyVehicle(%0)) && !IsPlayerInRangeOfPoint(%0,XMAX_VEHICLE_DISTANCE_PER_SECOND,CheatPlayerInfo[%0][elc_posx],CheatPlayerInfo[%0][elc_posy],CheatPlayerInfo[%0][elc_posz]))||!IsPlayerInRangeOfPoint(%0,XMAX_PED_DISTANCE_PER_SECOND,CheatPlayerInfo[%0][elc_posx],CheatPlayerInfo[%0][elc_posy],CheatPlayerInfo[%0][elc_posz]))
#define LastPlayerUpdate(%0) (CheatPlayerInfo[%0][elc_LastUpdate]-GetTickCount())
#define IsPlayerCheatAllowTelPos(%0) (((GetPlayerSurfingVehicleID(%0)!=INVALID_VEHICLE_ID || IsPlayerInAnyVehicle(%0)) && !IsPlayerInRangeOfPoint(%0,XMAX_VEHICLE_DISTANCE_PER_SECOND,CheatPlayerInfo[%0][elc_AllowTelX],CheatPlayerInfo[%0][elc_AllowTelY],CheatPlayerInfo[%0][elc_AllowTelZ]))|| \
!IsPlayerInRangeOfPoint(%0,XMAX_PED_DISTANCE_PER_SECOND,CheatPlayerInfo[%0][elc_AllowTelX],CheatPlayerInfo[%0][elc_AllowTelY],CheatPlayerInfo[%0][elc_AllowTelZ]))
#define IsPlayerUpdatePos(%0) !IsPlayerInRangeOfPoint(%0,0.5,CheatPlayerInfo[%0][elc_posx],CheatPlayerInfo[%0][elc_posy],CheatPlayerInfo[%0][elc_posz])
#define ELC_AC_IsCreatedVehicle(%0) (GetVehicleModel(%0)!=0)
#define MAX_PAYNSPRY 10
#define MAX_SLOTS 48
#define Grey 0xC0C0C0FF // Defining the color 'Grey'
new Float:SpecX[MAX_PLAYERS], Float:SpecY[MAX_PLAYERS], Float:SpecZ[MAX_PLAYERS], vWorld[MAX_PLAYERS], Inter[MAX_PLAYERS]; 
new IsSpecing[MAX_PLAYERS], IsBeingSpeced[MAX_PLAYERS],spectatorid[MAX_PLAYERS];
#define PRESSING(%0,%1) \
	(%0 & (%1))
#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))
#define HOLDING(%0) \
	((newkeys & (%0)) == (%0))
#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define Loop(%0,%1) \
	for(new %0 = 0; %0 != %1; %0++)
#define strcpy(%0,%1,%2) \
	strcat((%0[0] = '\0', %0), %1, %2)
#define MAX_RACES 50
#define MAX_RACE_CHECK 200
#define RACE_WAIT 30
#define MAX_RACING_PLAYERS 20
#define EMB_ORANGE "{f2a53a}"
#define EMB_GREEN "{32ff36}"
#define EMB_YELLOW "{fbff31}"
#define EMB_WHITE "{FFFFFF}"
#define EMB_RED "{ff0000}"
#define EMB_DGREEN "{8C9566}"
#define EMB_BLUE "{0D76FF}"
#define MAX_ZONE_NAME 28

#define SERVER_NAME "Pandora Gaming - Freemode"

#define DBHOST "87.98.243.201"
#define DBUSER "samp6244"
#define DBNAME "samp6244_copchase"
#define DBPASS "3433"

new MySQL:serverdb;

native gpci(playerid, serial[], len);
#define YELLOW 0xFFFF00FF
#define RED "{FF0000}"
#define ResetMoneyBar ResetPlayerMoney
#define UpdateMoneyBar GivePlayerMoney
#define ENGINE_OFF 0
#define ENGINE_STARTED 1
#define MAX_MODS      15
#define MAX_CONC 5
#define MAX_CONCVEH 20
#define COLOR_INVISIBLE 0xFFFFFF00

enum SAZONE_MAIN {
		SAZONE_NAME[28],
		Float:SAZONE_AREA[6]};

static const gSAZones[][SAZONE_MAIN] = {  // Majority of names and area coordinates adopted from Mabako's 'Zones Script' v0.2
	//	NAME                            AREA (Xmin,Ymin,Zmin,Xmax,Ymax,Zmax)
	{"The Big Ear",	                {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
	{"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
	{"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
	{"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
	{"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
	{"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
	{"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
	{"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
	{"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
	{"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
	{"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
	{"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
	{"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
	{"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
	{"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
	{"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
	{"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
	{"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
	{"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
	{"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
	{"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
	{"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
	{"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
	{"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
	{"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
	{"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
	{"Caligula's Palace",           {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
	{"Caligula's Palace",           {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
	{"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
	{"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
	{"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
	{"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
	{"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
	{"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
	{"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
	{"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
	{"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
	{"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
	{"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
	{"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
	{"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
	{"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
	{"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
	{"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
	{"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
	{"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
	{"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
	{"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
	{"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
	{"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
	{"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
	{"Downtown Los Santos",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
	{"Downtown Los Santos",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
	{"Downtown Los Santos",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
	{"Downtown Los Santos",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
	{"Downtown Los Santos",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
	{"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
	{"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
	{"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
	{"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
	{"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
	{"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
	{"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
	{"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
	{"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
	{"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
	{"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
	{"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
	{"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
	{"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
	{"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
	{"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
	{"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
	{"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
	{"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
	{"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
	{"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
	{"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
	{"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
	{"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
	{"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
	{"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
	{"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
	{"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
	{"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
	{"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
	{"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
	{"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
	{"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
	{"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
	{"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
	{"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
	{"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
	{"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
	{"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
	{"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
	{"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
	{"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
	{"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
	{"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
	{"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
	{"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
	{"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
	{"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
	{"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
	{"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
	{"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
	{"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
	{"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
	{"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
	{"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
	{"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
	{"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
	{"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
	{"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
	{"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
	{"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
	{"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
	{"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
	{"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
	{"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
	{"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
	{"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
	{"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
	{"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
	{"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
	{"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
	{"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
	{"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
	{"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
	{"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
	{"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
	{"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
	{"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
	{"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
	{"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
	{"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
	{"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
	{"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
	{"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
	{"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
	{"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
	{"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
	{"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
	{"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
	{"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
	{"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
	{"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
	{"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
	{"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
	{"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
	{"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
	{"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
	{"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
	{"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
	{"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
	{"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
	{"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
	{"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
	{"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
	{"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
	{"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
	{"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
	{"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
	{"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
	{"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
	{"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
	{"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
	{"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
	{"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
	{"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
	{"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
	{"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
	{"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
	{"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
	{"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
	{"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
	{"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
	{"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
	{"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
	{"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
	{"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
	{"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
	{"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
	{"Los Santos International",    {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
	{"Los Santos International",    {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
	{"Los Santos International",    {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
	{"Los Santos International",    {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
	{"Los Santos International",    {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
	{"Los Santos International",    {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
	{"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
	{"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
	{"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
	{"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
	{"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
	{"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
	{"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
	{"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
	{"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
	{"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
	{"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
	{"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
	{"Montgomery Intersection",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
	{"Montgomery Intersection",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
	{"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
	{"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
	{"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
	{"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
	{"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
	{"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
	{"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
	{"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
	{"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
	{"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
	{"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
	{"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
	{"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
	{"Mulholland Intersection",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
	{"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
	{"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
	{"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
	{"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
	{"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
	{"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
	{"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
	{"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
	{"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
	{"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
	{"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
	{"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
	{"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
	{"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
	{"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
	{"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
	{"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
	{"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
	{"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
	{"Playa del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
	{"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
	{"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
	{"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
	{"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
	{"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
	{"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
	{"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
	{"Randolph Industrial Estate",  {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
	{"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
	{"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
	{"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
	{"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
	{"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
	{"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
	{"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
	{"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
	{"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
	{"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
	{"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
	{"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
	{"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
	{"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
	{"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
	{"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
	{"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
	{"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
	{"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
	{"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
	{"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
	{"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
	{"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
	{"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
	{"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
	{"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
	{"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
	{"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
	{"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
	{"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
	{"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
	{"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
	{"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
	{"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
	{"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
	{"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
	{"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
	{"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
	{"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
	{"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
	{"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
	{"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
	{"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
	{"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
	{"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
	{"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
	{"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
	{"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
	{"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
	{"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
	{"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
	{"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
	{"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
	{"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
	{"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
	{"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
	{"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
	{"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
	{"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
	{"The Four Dragons Casino",     {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
	{"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
	{"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
	{"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
	{"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
	{"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
	{"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
	{"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
	{"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
	{"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
	{"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
	{"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
	{"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
	{"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
	{"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
	{"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
	{"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
	{"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
	{"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
	{"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
	{"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
	{"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
	{"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
	{"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
	{"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
	{"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
	{"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
	{"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
	{"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
	{"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
	{"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
	{"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
	{"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
	{"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
	{"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
	{"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
	{"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
	// Main Zones
	{"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
	{"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
	{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
	{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
	{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
	{"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
	{"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
	{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
	{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};
new legalmods[48][22] = {
	{400, 1024,1021,1020,1019,1018,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{401, 1145,1144,1143,1142,1020,1019,1017,1013,1007,1006,1005,1004,1003,1001,0000,0000,0000,0000},
	{404, 1021,1020,1019,1017,1016,1013,1007,1002,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{405, 1023,1021,1020,1019,1018,1014,1001,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{410, 1024,1023,1021,1020,1019,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
	{415, 1023,1019,1018,1017,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{418, 1021,1020,1016,1006,1002,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{420, 1021,1019,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{421, 1023,1021,1020,1019,1018,1016,1014,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{422, 1021,1020,1019,1017,1013,1007,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{426, 1021,1019,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{436, 1022,1021,1020,1019,1017,1013,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
	{439, 1145,1144,1143,1142,1023,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
	{477, 1021,1020,1019,1018,1017,1007,1006,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{478, 1024,1022,1021,1020,1013,1012,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{489, 1024,1020,1019,1018,1016,1013,1006,1005,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
	{491, 1145,1144,1143,1142,1023,1021,1020,1019,1018,1017,1014,1007,1003,0000,0000,0000,0000,0000},
	{492, 1016,1006,1005,1004,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{496, 1143,1142,1023,1020,1019,1017,1011,1007,1006,1003,1002,1001,0000,0000,0000,0000,0000,0000},
	{500, 1024,1021,1020,1019,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{516, 1021,1020,1019,1018,1017,1016,1015,1007,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
	{517, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1016,1007,1003,1002,0000,0000,0000,0000,0000},
	{518, 1145,1144,1143,1142,1023,1020,1018,1017,1013,1007,1006,1005,1003,1001,0000,0000,0000,0000},
	{527, 1021,1020,1018,1017,1015,1014,1007,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{529, 1023,1020,1019,1018,1017,1012,1011,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000},
	{534, 1185,1180,1179,1178,1127,1126,1125,1124,1123,1122,1106,1101,1100,0000,0000,0000,0000,0000},
	{535, 1121,1120,1119,1118,1117,1116,1115,1114,1113,1110,1109,0000,0000,0000,0000,0000,0000,0000},
	{536, 1184,1183,1182,1181,1128,1108,1107,1105,1104,1103,0000,0000,0000,0000,0000,0000,0000,0000},
	{540, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1004,1001,0000,0000,0000,0000},
	{542, 1145,1144,1021,1020,1019,1018,1015,1014,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{546, 1145,1144,1143,1142,1024,1023,1019,1018,1017,1007,1006,1004,1002,1001,0000,0000,0000,0000},
	{547, 1143,1142,1021,1020,1019,1018,1016,1003,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{549, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1012,1011,1007,1003,1001,0000,0000,0000,0000},
	{550, 1145,1144,1143,1142,1023,1020,1019,1018,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000},
	{551, 1023,1021,1020,1019,1018,1016,1006,1005,1003,1002,0000,0000,0000,0000,0000,0000,0000,0000},
	{558, 1168,1167,1166,1165,1164,1163,1095,1094,1093,1092,1091,1090,1089,1088,0000,0000,0000,0000},
	{559, 1173,1162,1161,1160,1159,1158,1072,1071,1070,1069,1068,1067,1066,1065,0000,0000,0000,0000},
	{560, 1170,1169,1141,1140,1139,1138,1033,1032,1031,1030,1029,1028,1027,1026,0000,0000,0000,0000},
	{561, 1157,1156,1155,1154,1064,1063,1062,1061,1060,1059,1058,1057,1056,1055,1031,1030,1027,1026},
	{562, 1172,1171,1149,1148,1147,1146,1041,1040,1039,1038,1037,1036,1035,1034,0000,0000,0000,0000},
	{565, 1153,1152,1151,1150,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,0000,0000,0000,0000},
	{567, 1189,1188,1187,1186,1133,1132,1131,1130,1129,1102,0000,0000,0000,0000,0000,0000,0000,0000},
	{575, 1177,1176,1175,1174,1099,1044,1043,1042,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{576, 1193,1192,1191,1190,1137,1136,1135,1134,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{580, 1023,1020,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{589, 1145,1144,1024,1020,1018,1017,1016,1013,1007,1006,1005,1004,1000,0000,0000,0000,0000,0000},
	{600, 1022,1020,1018,1017,1013,1007,1006,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000},
	{603, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000}};

enum Pray
{
	dbID,
	Float:PosP[3],
	pPrice,
	virtualw,
	Text3D:pLabel,
	pPickup,
	pInt
};

new PrayInfo[MAX_PAYNSPRY][Pray];

enum pInfo
{
	pID,
	pPsw[65],
	pSalt[11],
	pAttempts,
	pL,
	pA,
	pP,
	pS,
	pC,
	pSex,
	fL,
	sS,
	Float:pSpawn[4],
	pInt,
	pVWorld,
	KickAnti,
	pLoaned,
	pSP,
	pTDTimer,
	pWarn,
	pPremium
};

new PlayerInfo[MAX_PLAYERS][pInfo];

enum vMenus
{
	itemvid[MAX_VEHICLES],
	choosenvid
};

new VMenuInfo[MAX_PLAYERS][vMenus];

#define STATIC_SPAWN_ON 0
#define STATIC_SPAWN_OFF 1

enum V_INFO
{
	vID,
	vSpawnID,
	Float:vSpawnX,
	Float:vSpawnY,
	Float:vSpawnZ,
	Float:vSpawnA,
	Float:vCurrentX,
	Float:vCurrentY,
	Float:vCurrentZ,
	Float:vCurrentA,
	vSpawnType,
	vColor1,
	vColor2,
	vDestroyed,
	Float:vHealth,
	vTune[MAX_MODS],
	vPlate[32],
	vLocked,
	vRespawn,
	vFaction,
	vSiren,
	vPanelsDMG,
	vDoorsDMG,
	vLightsDMS,
	vTiresDMS
};

new ServerVehicles[MAX_VEHICLES][V_INFO];

#define MAX_PLAYER_VEHICLES 10

enum PV_INFO
{
	pvOwnerID,
	pvOwner[MAX_PLAYER_NAME],
	pvID
};

new PlayerVehicles[MAX_PLAYERS][MAX_PLAYER_VEHICLES][PV_INFO];
new createdVehicles,
	createdPVehs;

#define MAX_DEALERSHIPS 10

enum D_INFO
{
	dID,
	dName[20],
	dTag[6],
	Float:dPosX,
	Float:dPosY,
	Float:dPosZ,
	Text3D:dLabel,
	dPickup
};

new DealershipInfo[MAX_DEALERSHIPS][D_INFO];

#define MAX_DEALERSHIP_VEHICLES 20
new dVehicles[MAX_DEALERSHIPS],
	createdDealer = 1;

enum DV_INFO
{
	dID,
	dModelID,
	dPrice
};

new DealerVehicles[MAX_DEALERSHIPS][MAX_DEALERSHIP_VEHICLES][DV_INFO];

enum VehicleInfo
{
	dbid,
	vid,
	vOwner[24],
	Float:vSpawn[4],
	Float:vCSpawn[4],
	vColor1,
	vColor2,
	vKm,
	vDistrutto,
	Float:vHealth,
	vStatusMotore,
	vMod[MAX_MODS],
	vVSpawnID,
	vTarga[30],
	vComprato,
	vPaintJob,
	vvalido,
	vSpawned,
	vStatusPortiere,
	vSpawnType,
	vPanelsDmg,
	vDoorsDmg,
	vPrivato,
	vcS,
	vLightsDmg,
	vTiresDmg
};
new vInfo[MAX_VEHICLES][VehicleInfo];

enum C_INFO
{
	bool:Started,
	bool:Lobby,
	Players,
	Timer,
	Timer2,
	ChaseCar[8]
};

new CopChase[C_INFO];

enum aELCp
{
	elc_money,
	elc_ammo[13],
	elc_weapon[13],
	elc_tickfire,
	elc_ammoFire,
	elc_weaponFire,
	Float:elc_health,
	Float:elc_armour,
	elc_timer,
	Float:elc_posx,
	Float:elc_posy,
	Float:elc_posz,
	elc_interior,
	elc_virtualworld,
	Float:elc_AllowTelX,
	Float:elc_AllowTelY,
	Float:elc_AllowTelZ,
	elc_AntiTeleportHack,
	elc_AntiWeaponHack,
	elc_AntiAmmoBlockHack,
	elc_AntiMoneyHack,
	elc_AntiSpeedHack,
	elc_AntiHealthHack,
	elc_AntiArmourHack,
	elc_AntiVehicleTelportHack,
#if defined MODE_DELAY_SEND_STATS
	elc_GiveWeaponTime,
	elc_GiveMoneyTime,
	elc_GiveHealthTime,
	elc_GiveArmourTime,
#endif
	elc_SetPositionTime,
	elc_PlayerEnterTime,
	elc_PlayerEnterVeh,
	elc_PossibleVehicleHack,
	elc_LastUpdate,
	elc_TimeSpawn
};

new CheatPlayerInfo[MAX_PLAYERS][aELCp];

enum aELCv
{
	Float:elc_vHealth,
	Float:elc_vX,
	Float:elc_vY,
	Float:elc_vZ,
	Float:elc_vAngle,
	elc_vSetPositionTime,
	elc_vPossiblePlayerHack,
	elc_vPossibleHackTime,
	elc_vStatut
};

new CheatVehicleInfo[MAX_VEHICLES][aELCv];

enum aELCs
{
	elc_TickCount,
	elc_TimerTick
};

enum R_INFO
{
	rName[32],
	rTimer,
	rCreator[MAX_PLAYER_NAME],
	rTimeout,
	rTime,
	rVeh,
	Float:rCheckX[MAX_RACE_CHECK],
	Float:rCheckY[MAX_RACE_CHECK],
	Float:rCheckZ[MAX_RACE_CHECK],
	rActualCheck,
	Float:rStartingX[MAX_RACING_PLAYERS],
	Float:rStartingY[MAX_RACING_PLAYERS],
	Float:rStartingZ[MAX_RACING_PLAYERS],
	Float:rStartingA[MAX_RACING_PLAYERS],
	bool:rStarted,
	bool:rJoinable,
	rRacers,
	rTotalRacers,
	rCompleted,
	rVehLoans[MAX_RACING_PLAYERS]
};

#define COP 0
#define SUSPECT 1

new RaceInfo[MAX_RACES][R_INFO],
	createdRace,
	InRace[MAX_PLAYERS],
	CurrentCheck[MAX_PLAYERS],
	startingPos[MAX_RACES],
	FreeStart[MAX_RACES],
	PlayerText:pRaceTD[MAX_PLAYERS][3],
	CD[MAX_RACES],
	CDTimer[MAX_RACES],
	creatingRace = -1,
	CheatServerInfo[aELCs],
	bool:InCopChase[MAX_PLAYERS],
	PlayerRole[MAX_PLAYERS] = COP,
	SpawnedChaseCars,
	Text:G_CopChaseTD[3],
	PlayerText:P_CopChaseTD[MAX_PLAYERS][2],
	Blip[MAX_PLAYERS];

forward PutPlayers();
forward PlayerUpdates();
forward PlayerDrift();
forward PlayerDriftEnd(Player);
forward EngineOn(playerid);
forward PlayerActionMessage(playerid,Float:radius,message[]); 
forward ContaChilometri(playerid);
forward GetDistanzaPercorsa(playerid);
forward PlayerUpdates();
forward PlayerDrift();
forward PlayerDriftEnd(Player);
forward Freeze(playerid);
/*----------------------------------------------------------------------------*/
stock Float:elc_GetPlayerSpeedXY(playerid)
{
new Float:elc_SpeedX, Float:elc_SpeedY, Float:elc_SpeedZ;
new Float:elc_Speed;
if(IsPlayerInAnyVehicle(playerid)) GetVehicleVelocity(GetPlayerVehicleID(playerid), elc_SpeedX, elc_SpeedY, elc_SpeedZ);
else GetPlayerVelocity(playerid, elc_SpeedX, elc_SpeedY, elc_SpeedZ);
elc_Speed = floatsqroot(floatadd(floatpower(elc_SpeedX, 2.0), floatpower(elc_SpeedY, 2.0)));
return floatmul(elc_Speed, 200.0);
}
/*----------------------------------------------------------------------------*/
stock Float:elc_GetVehicleSpeedXY(vehicleid)
{
new Float:elc_SpeedX, Float:elc_SpeedY, Float:elc_SpeedZ;
new Float:elc_Speed;
GetVehicleVelocity(vehicleid, elc_SpeedX, elc_SpeedY, elc_SpeedZ);
elc_Speed = floatsqroot(floatadd(floatpower(elc_SpeedX, 2.0), floatpower(elc_SpeedY, 2.0)));
return floatmul(elc_Speed, 200.0);
}
/*----------------------------------------------------------------------------*/
#if defined NO_TICK_COUNT
	#define GetTickCount()                          (CheatServerInfo[TickCount])
	forward TimeUpdate();
	public TimeUpdate()
	{
		CheatServerInfo[elc_TickCount] +=TIME_GRANULITY;
		return 1;
	}
#endif
forward OnPlayerCheckCheat(playerid);
forward OnPlayerCheat(playerid, cheatid, source[]);
forward ELC_AC_EnablePlayerCheatID(playerid,cheatid,enable);
forward RemovePlayerWeapon(playerid, weaponid);
new createdPay;
new bool:contakm[MAX_PLAYERS];
new NotMoving[MAX_PLAYERS];
new WeaponIDD[MAX_PLAYERS];
new CheckCrouch[MAX_PLAYERS];
new Ammo[MAX_PLAYERS][MAX_SLOTS];
new bool:regchat[MAX_PLAYERS];
new trova[MAX_PLAYERS];
new ServerTimerOne;
new ServerTimerTwo;
new Text:ServerTextDrawOne;
new Text:ServerTextDrawTwo;
new Text:ServerTextDrawThree[MAX_PLAYERS];
new Text:ServerTextDrawFive[MAX_PLAYERS];
//new timercontakm[MAX_PLAYERS];
new FreezeTimers;
new FTimer = 10;
new Float:PlayerPositionX[MAX_PLAYERS];
new Float:PlayerPositionY[MAX_PLAYERS];
new Float:PlayerPositionZ[MAX_PLAYERS];
new PlayerTimerOne[MAX_PLAYERS];
new Text:InfoBox[MAX_PLAYERS];
new PlayerMoney[MAX_PLAYERS];
new PlayerScore[MAX_PLAYERS];
new PlayerCombo[MAX_PLAYERS];
new anticheatv[MAX_PLAYERS];
new TryEngine[MAX_PLAYERS];
new bool:usejet[MAX_PLAYERS];
new copcount = 30;
new CopCTimer = 600;

new stock VehicleNames[212][50] = {
   "Landstalker","Bravura","Buffalo","Linerunner","Pereniel","Sentinel","Dumper","Firetruck","Trashmaster","Stretch","Manana","Infernus","Voodoo","Pony","Mule","Cheetah","Ambulance","Leviathan",
   "Moonbeam","Esperanto","Taxi","Washington","Bobcat","Mr Whoopee","BF Injection","Hunter","Premier","Enforcer","Securicar","Banshee","Predator","Bus","Rhino","Barracks","Hotknife","Trailer",
   "Previon","Coach","Cabbie","Stallion","Rumpo","RC Bandit","Romero","Packer","Monster","Admiral","Squalo","Seasparrow","Pizzaboy","Tram","Trailer","Turismo","Speeder","Reefer","Tropic","Flatbed",
   "Yankee","Caddy","Solair","Berkley's RC Van","Skimmer","PCJ-600","Faggio","Freeway","RC Baron","RC Raider","Glendale","Oceanic","Sanchez","Sparrow","Patriot","Quad","Coastguard",
   "Dinghy","Hermes","Sabre","Rustler","ZR3 50","Walton","Regina","Comet","BMX","Burrito","Camper","Marquis","Baggage","Dozer","Maverick","News Chopper","Rancher","FBI Rancher","Virgo","Greenwood",
   "Jetmax","Hotring","Sandking","Blista Compact","Police Maverick","Boxville","Benson","Mesa","RC Goblin","Hotring Racer","Hotring Racer","Bloodring Banger","Rancher","Super GT","Elegant",
   "Journey","Bike","Mountain Bike","Beagle","Cropdust","Stunt","Tanker","RoadTrain","Nebula","Majestic","Buccaneer","Shamal","Hydra","FCR-900","NRG-500","HPV1000","Cement Truck","Tow Truck",
   "Fortune","Cadrona","FBI Truck","Willard","Forklift","Tractor","Combine","Feltzer","Remington","Slamvan","Blade","Freight","Streak","Vortex","Vincent","Bullet","Clover","Sadler","Firetruck",
   "Hustler","Intruder","Primo","Cargobob","Tampa","Sunrise","Merit","Utility","Nevada","Yosemite","Windsor","Monster","Monster","Uranus","Jester","Sultan","Stratum","Elegy",
   "Raindance","RC Tiger","Flash","Tahoma","Savanna","Bandito","Freight","Trailer","Kart","Mower","Duneride","Sweeper","Broadway","Tornado","AT-400","DFT-30","Huntley","Stafford",
   "BF-400","Newsvan","Tug","Trailer","Emperor","Wayfarer","Euros","Hotdog","Club","Trailer","Trailer","Andromada","Dodo","RC Cam","Launch","Police Car (LSPD)","Police Car (SFPD)","Police Car (LVPD)",
   "Police Ranger","Picador","S.W.A.T. Van","Alpha","Phoenix","Glendale","Sadler","Luggage Trailer","Luggage Trailer","Stair Trailer","Boxville","Farm Plow","Utility Trailer"};
   
new aWeaponNames[][32] = {
	{"Fist"}, // 0
	{"Brass Knuckles"}, // 1
	{"Golf Club"}, // 2
	{"Night Stick"}, // 3
	{"Knife"}, // 4
	{"Baseball Bat"}, // 5
	{"Shovel"}, // 6
	{"Pool Cue"}, // 7
	{"Katana"}, // 8
	{"Chainsaw"}, // 9
	{"Purple Dildo"}, // 10
	{"Vibrator"}, // 11
	{"Vibrator"}, // 12
	{"Vibrator"}, // 13
	{"Flowers"}, // 14
	{"Cane"}, // 15
	{"Grenade"}, // 16
	{"Teargas"}, // 17
	{"Molotov"}, // 18
	{" "}, // 19
	{" "}, // 20
	{" "}, // 21
	{"Colt 45"}, // 22
	{"Silenced Pistol"}, // 23
	{"Deagle"}, // 24
	{"Shotgun"}, // 25
	{"Sawns"}, // 26
	{"Spas"}, // 27
	{"Uzi"}, // 28
	{"MP5"}, // 29
	{"AK47"}, // 30
	{"M4"}, // 31
	{"Tec9"}, // 32
	{"Country Rifle"}, // 33
	{"Sniper Rifle"}, // 34
	{"Rocket Launcher"}, // 35
	{"Heat-Seeking Rocket Launcher"}, // 36
	{"Flamethrower"}, // 37
	{"Minigun"}, // 38
	{"Satchel Charge"}, // 39
	{"Detonator"}, // 40
	{"Spray Can"}, // 41
	{"Fire Extinguisher"}, // 42
	{"Camera"}, // 43
	{"Night Vision Goggles"}, // 44
	{"Infrared Vision Goggles"}, // 45
	{"Parachute"}, // 46
	{"Fake Pistol"} // 47
};

new Float:CopChaseCars[][] = {
	{2448.6428, -1658.8660, 13.0147, 90.0},
	{2483.3916, -1664.8774, 13.0922, 90.0000},
	{2483.5300, -1656.3944, 13.0922, 90.0000},
	{2483.5903, -1660.5969, 13.0922, 90.0000},
	{2475.2834, -1665.3483, 13.0147, 90.0000},
	{2475.2119, -1661.0454, 13.0147, 90.0000},
	{2475.2644, -1656.1647, 13.0922, 90.0000},
	{2476.8972, -1672.7228, 13.0922, 57.6600}
};

main()
{
	print("\n----------------------------------");
	print("  CopChase Gamemode by #F96\n");
	print("----------------------------------\n");
}

forward SaveWep(playerid);
public SaveWep(playerid)
{
	if(InCopChase[playerid] == true) return 1; 
	new weapons[13][2],query[500];
	for(new i=0;i<13;i++)
	{
		GetPlayerWeaponData(playerid,i,weapons[i][0],weapons[i][1]);
	}
	mysql_format(serverdb, query, sizeof(query), "UPDATE wep SET s0 = '%d', \
												 a0 = '%d', \
												 s1 = '%d', \
												 a1 = '%d', \
												 s2 = '%d', \
												 a2 = '%d', \
												 s3 = '%d', \
												 a3 = '%d', \
												 s4 = '%d', \
												 a4 = '%d', \
												 s5 = '%d', \
												 a5 = '%d', \
												 s6 = '%d', \
												 a6 = '%d', \
												 s7 = '%d', \
												 a7 = '%d', \
												 s8 = '%d', \
												 a8 = '%d', \
												 s9 = '%d', \
												 a9 = '%d', \
												 s10 = '%d', \
												 a10 = '%d', \
												 s11 = '%d', \
												 a11 = '%d', \
												 s12 = '%d', \
												 a12 = '%d' WHERE pID = '%d",
												 weapons[0][0],
												 weapons[0][1],
												 weapons[1][0],
												 weapons[1][1],	
												 weapons[2][0],
												 weapons[2][1],	
												 weapons[3][0],
												 weapons[3][1],	
												 weapons[4][0],
												 weapons[4][1],	
												 weapons[5][0],
												 weapons[5][1],	
												 weapons[6][0],
												 weapons[6][1],	
												 weapons[7][0],
												 weapons[7][1],	
												 weapons[8][0],
												 weapons[8][1],	
												 weapons[9][0],
												 weapons[9][1],		
												 weapons[10][0],
												 weapons[10][1],	
												 weapons[11][0],
												 weapons[11][1],	
												 weapons[12][0],
												 weapons[12][1], PlayerInfo[playerid][pID]);
	mysql_tquery(serverdb, query);
	return 1;
}

forward ELC_AC_GivePlayerMoney(playerid, money);
public ELC_AC_GivePlayerMoney(playerid, money)
{
    if(CheatPlayerInfo[playerid][elc_AntiMoneyHack]==1)CheatPlayerInfo[playerid][elc_AntiMoneyHack]=2;
	CheatPlayerInfo[playerid][elc_money] += money;
	GivePlayerMoney(playerid, money);
	#if defined MODE_DELAY_SEND_STATS
	SaveTime(CheatPlayerInfo[playerid][elc_GiveMoneyTime],GetTickCount());
	#endif
	if(CheatPlayerInfo[playerid][elc_AntiMoneyHack]==2)CheatPlayerInfo[playerid][elc_AntiMoneyHack]=1;
	return 1;
}
stock initial_GivePlayerMoney(playerid, money)
{
	return GivePlayerMoney(playerid, money);
}
#if defined INCLUDE_BASE_MODE
//ALS_SYSTEME --------------------
#if defined _ALS_GivePlayerMoney
    #undef GivePlayerMoney
#else
    #define _ALS_GivePlayerMoney
#endif
#define GivePlayerMoney ELC_AC_GivePlayerMoney
#endif
/*----------------------------------------------------------------------------*/
forward ELC_AC_ResetPlayerMoney(playerid);
public ELC_AC_ResetPlayerMoney(playerid)
{
	if(CheatPlayerInfo[playerid][elc_AntiMoneyHack]==1)CheatPlayerInfo[playerid][elc_AntiMoneyHack]=2;
	ResetPlayerMoney(playerid);
	CheatPlayerInfo[playerid][elc_money] = 0;
	#if defined MODE_DELAY_SEND_STATS
	SaveTime(CheatPlayerInfo[playerid][elc_GiveMoneyTime],GetTickCount());
	#endif
	if(CheatPlayerInfo[playerid][elc_AntiMoneyHack]==2)CheatPlayerInfo[playerid][elc_AntiMoneyHack]=1;
	return 1;
}
stock initial_ResetPlayerMoney(playerid)
{
	return ResetPlayerMoney(playerid);
}
#if defined INCLUDE_BASE_MODE
//ALS_SYSTEME --------------------
#if defined _ALS_ResetPlayerMoney
    #undef ResetPlayerMoney
#else
    #define _ALS_ResetPlayerMoney
#endif
#define ResetPlayerMoney ELC_AC_ResetPlayerMoney
#endif
//ALS_OFF_SYSTEME ----------------
/*----------------------------------------------------------------------------*/
forward ELC_AC_GetPlayerMoney(playerid);
public ELC_AC_GetPlayerMoney(playerid)
{
	new elc_gpm=GetPlayerMoney(playerid);
	if(GetPlayerMoney(playerid)<CheatPlayerInfo[playerid][elc_money]) return elc_gpm;
	return CheatPlayerInfo[playerid][elc_money];
}
stock initial_GetPlayerMoney(playerid)
{
	return GetPlayerMoney(playerid);
}
#if defined INCLUDE_BASE_MODE
//ALS_SYSTEME --------------------
#if defined _ALS_GetPlayerMoney
    #undef GetPlayerMoney
#else
    #define _ALS_GetPlayerMoney
#endif
#define GetPlayerMoney ELC_AC_GetPlayerMoney
#endif
//ALS_OFF_SYSTEME ----------------
forward ELC_AC_SetPlayerPos(playerid, Float:ix, Float:iy, Float:iz);
public ELC_AC_SetPlayerPos(playerid, Float:ix, Float:iy, Float:iz)
{
    if(CheatPlayerInfo[playerid][elc_AntiTeleportHack]==1)CheatPlayerInfo[playerid][elc_AntiTeleportHack]=2;
    CheatPlayerInfo[playerid][elc_PlayerEnterTime]=0;
	CheatPlayerInfo[playerid][elc_AllowTelX]=ix; CheatPlayerInfo[playerid][elc_AllowTelY]=iy; CheatPlayerInfo[playerid][elc_AllowTelZ]=iz;
	SetPlayerPos(playerid, ix, iy, iz);
    if(CheatPlayerInfo[playerid][elc_AntiTeleportHack]==2)CheatPlayerInfo[playerid][elc_AntiTeleportHack]=1;
	return 1;
}
stock initial_SetPlayerPos(playerid, Float:ix, Float:iy, Float:iz)
{
	return SetPlayerPos(playerid, ix, iy, iz);
}
#if defined INCLUDE_BASE_MODE
//ALS_SYSTEME --------------------
#if defined _ALS_SetPlayerPos
    #undef SetPlayerPos
#else
    #define _ALS_SetPlayerPos
#endif
#define SetPlayerPos ELC_AC_SetPlayerPos
//ALS_OFF_SYSTEME ----------------
#endif
/*----------------------------------------------------------------------------*/
forward ELC_AC_PutPlayerInVehicle(playerid,vehicleid, seatid);
public ELC_AC_PutPlayerInVehicle(playerid,vehicleid, seatid)
{
    if(CheatPlayerInfo[playerid][elc_AntiTeleportHack]==1)CheatPlayerInfo[playerid][elc_AntiTeleportHack]=2;
    CheatPlayerInfo[playerid][elc_PlayerEnterTime]=0;
    CheatPlayerInfo[playerid][elc_PlayerEnterVeh]=vehicleid;
    GetVehiclePos(vehicleid,CheatPlayerInfo[playerid][elc_AllowTelX],CheatPlayerInfo[playerid][elc_AllowTelY],CheatPlayerInfo[playerid][elc_AllowTelZ]);
    GetPlayerPos(playerid,CheatPlayerInfo[playerid][elc_posx],CheatPlayerInfo[playerid][elc_posy],CheatPlayerInfo[playerid][elc_posz]);
	SaveTime(CheatPlayerInfo[playerid][elc_SetPositionTime],GetTickCount());
	PutPlayerInVehicle(playerid,vehicleid, seatid);
	if(CheatPlayerInfo[playerid][elc_AntiTeleportHack]==2)CheatPlayerInfo[playerid][elc_AntiTeleportHack]=1;
	return 1;
}
stock initial_PutPlayerInVehicle(playerid,vehicleid, seatid)
{
	return PutPlayerInVehicle(playerid,vehicleid, seatid);
}
#if defined INCLUDE_BASE_MODE
//ALS_SYSTEME --------------------
#if defined _ALS_PutPlayerInVehicle
    #undef PutPlayerInVehicle
#else
    #define _ALS_PutPlayerInVehicle
#endif
#define PutPlayerInVehicle ELC_AC_PutPlayerInVehicle
//ALS_OFF_SYSTEME ----------------
#endif
/*----------------------------------------------------------------------------*/
forward ELC_AC_RemovePlayerFromVehicle(playerid);
public ELC_AC_RemovePlayerFromVehicle(playerid)
{
    CheatPlayerInfo[playerid][elc_PlayerEnterTime]=0;
	RemovePlayerFromVehicle(playerid);
	return 1;
}
stock initial_RemovePlayerFromVehicle(playerid)
{
	return RemovePlayerFromVehicle(playerid);
}
#if defined INCLUDE_BASE_MODE
//ALS_SYSTEME --------------------
#if defined _ALS_RemovePlayerFromVehicle
    #undef RemovePlayerFromVehicle
#else
    #define _ALS_RemovePlayerFromVehicle
#endif
#define RemovePlayerFromVehicle ELC_AC_RemovePlayerFromVehicle
//ALS_OFF_SYSTEME ----------------
#endif
/*----------------------------------------------------------------------------*/
forward ELC_AC_TogglePlayerSpectating(playerid, toggle);
public ELC_AC_TogglePlayerSpectating(playerid, toggle)
{
	if(toggle==1)
	{
		if(CheatPlayerInfo[playerid][elc_AntiSpeedHack]==1) CheatPlayerInfo[playerid][elc_AntiSpeedHack]=3;
		if(CheatPlayerInfo[playerid][elc_AntiTeleportHack]==1) CheatPlayerInfo[playerid][elc_AntiTeleportHack]=3;
	}
	else
	{
		if(CheatPlayerInfo[playerid][elc_AntiSpeedHack]==3) CheatPlayerInfo[playerid][elc_AntiSpeedHack]=1;
		if(CheatPlayerInfo[playerid][elc_AntiTeleportHack]==3)CheatPlayerInfo[playerid][elc_AntiTeleportHack]=1;
		GetPlayerPos(playerid,CheatPlayerInfo[playerid][elc_posx],CheatPlayerInfo[playerid][elc_posy],CheatPlayerInfo[playerid][elc_posz]);
		SaveTime(CheatPlayerInfo[playerid][elc_SetPositionTime],GetTickCount());
	}
	return TogglePlayerSpectating(playerid, toggle);
}
stock initial_TogglePlayerSpectating(playerid, toggle)
{
	return TogglePlayerSpectating(playerid, toggle);
}
#if defined INCLUDE_BASE_MODE
//ALS_SYSTEME --------------------
#if defined _ALS_TogglePlayerSpectating
    #undef TogglePlayerSpectating
#else
    #define _ALS_TogglePlayerSpectating
#endif
#define TogglePlayerSpectating ELC_AC_TogglePlayerSpectating
//ALS_OFF_SYSTEME ----------------
#endif
//Weapon------------------------------------------------------------------------
/*#define elc_IsNotWeaponNoAmmo(%0) (%0!=0 && %0!=1 && %0!=10)
#define elc_IsNotWeaponVise(%0,%1) (%0>1 && %0!=10 && %0!=6 && %0!=9 && %0!=11 && %0!=12 && %1!=35 && %1!=36 %1!=43)*/
stock elc_IsNotWeaponNoAmmo(WeaponID)
{
	new elc_slot=elc_GetWeaponSlot(WeaponID);
	if(elc_slot!=0 && elc_slot!=1 && elc_slot!=10)return 1;
	return 0;
}
stock elc_IsNotWeaponVise(WeaponID)
{
	new elc_slot=elc_GetWeaponSlot(WeaponID);
	if(elc_slot>1 && elc_slot!=10 && elc_slot!=6 && elc_slot!=9 && elc_slot!=11 && elc_slot!=12 && elc_slot!=35 && elc_slot!=36 && elc_slot!=43) return 1;
	return 0;
}
stock elc_IsGiveVehicleWeapon(WeaponID)
{
	if(WeaponID==25 || WeaponID==46 || WeaponID==2) return 1;
	return 0;
}
#define IsValidWeapon(%0) (%0>=1 && %0<=18 || %0>=21 && %0<=46)

stock elc_GetWeaponSlot(weaponid)
{
	new elc_slot=-1;
	switch(weaponid)
	{
		case 0,1: elc_slot = 0;
		case 2 .. 9: elc_slot = 1;
		case 10 .. 15: elc_slot = 10;
		case 16 .. 18, 39: elc_slot = 8;
		case 22 .. 24: elc_slot =2;
		case 25 .. 27: elc_slot = 3;
		case 28, 29, 32: elc_slot = 4;
		case 30, 31: elc_slot = 5;
		case 33, 34: elc_slot = 6;
		case 35 .. 38: elc_slot = 7;
		case 40: elc_slot = 12;
		case 41 .. 43: elc_slot = 9;
		case 44 .. 46: elc_slot = 11;
	}
	return elc_slot;
}

forward GivePWep(playerid);
public GivePWep(playerid)
{
	new query[64];
	mysql_format(serverdb, query,sizeof(query),"SELECT * FROM wep WHERE pID = '%d'",PlayerInfo[playerid][pID]);
	mysql_tquery(serverdb, query, "RestorePlayerWeapons", "d", playerid);
	return 1;
}

forward RestorePlayerWeapons(playerid);
public RestorePlayerWeapons(playerid)
{
	new weap, ammo;
	Loop(i, 12)
	{
		cache_get_value_int(0, i, weap);
		cache_get_value_int(0, i, ammo);
		ELC_AC_GivePlayerWeapon(playerid, weap, ammo);
	}
	return 1;
}

stock ResetPWep(playerid)
{
	new query[64];
	mysql_format(serverdb, query,sizeof(query),"SELECT * FROM wep WHERE pID = '%d'",PlayerInfo[playerid][pID]);
	mysql_tquery(serverdb, query, "DeletePlayerWeapons", "d", playerid);
	return 1;
}

stock DeletePlayerWeapons(playerid)
{
	new query[64];
	if(cache_get_row_count())
	{
		mysql_format(serverdb, query, sizeof(query), "DELETE FROM wep WHERE pID = '%d'", PlayerInfo[playerid][pID]);
		mysql_tquery(serverdb, query);
		mysql_format(serverdb, query, sizeof(query), "INSERT INTO wep (pID) VALUES('%d')", PlayerInfo[playerid][pID]);
		mysql_tquery(serverdb, query);
		ELC_AC_ResetPlayerWeapons(playerid);
		return 1;
	}
	else return ELC_AC_ResetPlayerWeapons(playerid);
}

/*----------------------------------------------------------------------------*/
forward ELC_AC_GivePlayerWeapon(playerid,Weapon,ammo);
public ELC_AC_GivePlayerWeapon(playerid,Weapon,ammo)
{
	if(CheatPlayerInfo[playerid][elc_AntiWeaponHack]==1)CheatPlayerInfo[playerid][elc_AntiWeaponHack]=2;
	new slot=elc_GetWeaponSlot(Weapon);
	if(IsValidWeapon(Weapon) && slot!=-1)
	{
	    CheatPlayerInfo[playerid][elc_tickfire]=0;
		CheatPlayerInfo[playerid][elc_weapon][slot] = Weapon;
		CheatPlayerInfo[playerid][elc_ammo][slot] += ammo;
		GivePlayerWeapon(playerid,Weapon,ammo);
		#if defined MODE_DELAY_SEND_STATS
		SaveTime(CheatPlayerInfo[playerid][elc_GiveWeaponTime],GetTickCount());
		#endif
	}
	if(CheatPlayerInfo[playerid][elc_AntiWeaponHack]==2)CheatPlayerInfo[playerid][elc_AntiWeaponHack]=1;
    return 1;
}
stock initial_GivePlayerWeapon(playerid,Weapon,ammo)
{
	return GivePlayerWeapon(playerid,Weapon,ammo);
}
#if defined INCLUDE_BASE_MODE
//ALS_SYSTEME --------------------
#if defined _ALS_GivePlayerWeapon
    #undef GivePlayerWeapon
#else
    #define _ALS_GivePlayerWeapon
#endif
#define GivePlayerWeapon ELC_AC_GivePlayerWeapon
//ALS_OFF_SYSTEME ----------------
#endif
/*----------------------------------------------------------------------------*/
forward ELC_AC_SetPlayerAmmo(playerid,weapon,ammo);
public ELC_AC_SetPlayerAmmo(playerid,weapon,ammo)
{
	if(CheatPlayerInfo[playerid][elc_AntiWeaponHack]==1)CheatPlayerInfo[playerid][elc_AntiWeaponHack]=2;
	new slot=elc_GetWeaponSlot(weapon);
 	if(weapon>0 && 47>weapon && slot!=-1)
 	{
		CheatPlayerInfo[playerid][elc_ammo][slot]=ammo;
		SetPlayerAmmo(playerid,weapon,ammo);
		#if defined MODE_DELAY_SEND_STATS
		SaveTime(CheatPlayerInfo[playerid][elc_GiveWeaponTime],GetTickCount());
		#endif
	}
	if(CheatPlayerInfo[playerid][elc_AntiWeaponHack]==2)CheatPlayerInfo[playerid][elc_AntiWeaponHack]=1;
    return 1;
}
stock initial_SetPlayerAmmo(playerid,weapon,ammo)
{
	return SetPlayerAmmo(playerid,weapon,ammo);
}
#if defined INCLUDE_BASE_MODE
//ALS_SYSTEME --------------------
#if defined _ALS_SetPlayerAmmo
    #undef SetPlayerAmmo
#else
    #define _ALS_SetPlayerAmmo
#endif
#define SetPlayerAmmo ELC_AC_SetPlayerAmmo
//ALS_OFF_SYSTEME ----------------
#endif
/*----------------------------------------------------------------------------*/
forward ELC_AC_ResetPlayerWeapons(playerid);
public ELC_AC_ResetPlayerWeapons(playerid)
{
	if(CheatPlayerInfo[playerid][elc_AntiWeaponHack]==1)CheatPlayerInfo[playerid][elc_AntiWeaponHack]=2;
	for(new i = 0; i <13; i++)
	{
        CheatPlayerInfo[playerid][elc_weapon][i]=0;
        CheatPlayerInfo[playerid][elc_ammo][i]=0;
	}
	ResetPlayerWeapons(playerid);
	#if defined MODE_DELAY_SEND_STATS
	SaveTime(CheatPlayerInfo[playerid][elc_GiveWeaponTime],GetTickCount());
	#endif
	if(CheatPlayerInfo[playerid][elc_AntiWeaponHack]==2)CheatPlayerInfo[playerid][elc_AntiWeaponHack]=1;
    return 1;
}
stock initial_ResetPlayerWeapons(playerid)
{
	return ResetPlayerWeapons(playerid);
}
#if defined INCLUDE_BASE_MODE
//ALS_SYSTEME --------------------
#if defined _ALS_ResetPlayerWeapons
    #undef ResetPlayerWeapons
#else
    #define _ALS_ResetPlayerWeapons
#endif
#define ResetPlayerWeapons ELC_AC_ResetPlayerWeapons
//ALS_OFF_SYSTEME ----------------
#endif
/*----------------------------------------------------------------------------*/
forward ELC_AC_SetPlayerHealth(playerid,Float:health);
public ELC_AC_SetPlayerHealth(playerid,Float:health)
{
	if(CheatPlayerInfo[playerid][elc_AntiHealthHack]==1)CheatPlayerInfo[playerid][elc_AntiHealthHack]=2;
	CheatPlayerInfo[playerid][elc_health]=health;
	SetPlayerHealth(playerid,health);
	#if defined MODE_DELAY_SEND_STATS
	SaveTime(CheatPlayerInfo[playerid][elc_GiveHealthTime],GetTickCount());
	#endif
	if(CheatPlayerInfo[playerid][elc_AntiHealthHack]==2)CheatPlayerInfo[playerid][elc_AntiHealthHack]=1;
    return 1;
}
stock initial_SetPlayerHealth(playerid,Float:health)
{
	return SetPlayerHealth(playerid,health);
}
#if defined INCLUDE_BASE_MODE
//ALS_SYSTEME --------------------
#if defined _ALS_SetPlayerHealth
    #undef SetPlayerHealth
#else
    #define _ALS_SetPlayerHealth
#endif
#define SetPlayerHealth ELC_AC_SetPlayerHealth
//ALS_OFF_SYSTEME ----------------
#endif
/*----------------------------------------------------------------------------*/
forward ELC_AC_SetPlayerArmour(playerid,Float:armour);
public ELC_AC_SetPlayerArmour(playerid,Float:armour)
{
	if(CheatPlayerInfo[playerid][elc_AntiArmourHack]==1)CheatPlayerInfo[playerid][elc_AntiArmourHack]=2;
	CheatPlayerInfo[playerid][elc_armour]=armour;
	SetPlayerArmour(playerid,armour);
	#if defined MODE_DELAY_SEND_STATS
	SaveTime(CheatPlayerInfo[playerid][elc_GiveArmourTime],GetTickCount());
	#endif
	if(CheatPlayerInfo[playerid][elc_AntiArmourHack]==2)CheatPlayerInfo[playerid][elc_AntiArmourHack]=1;
    return 1;
}
stock initial_SetPlayerArmour(playerid,Float:armour)
{
	return SetPlayerArmour(playerid,armour);
}
#if defined INCLUDE_BASE_MODE
//ALS_SYSTEME --------------------
#if defined _ALS_SetPlayerArmour
    #undef SetPlayerArmour
#else
    #define _ALS_SetPlayerArmour
#endif
#define SetPlayerArmour ELC_AC_SetPlayerArmour
//ALS_OFF_SYSTEME ----------------
#endif
/*----------------------------------------------------------------------------*/
forward ELC_AC_SetVehiclePos(vehicleid,Float:x,Float:y,Float:z);
public ELC_AC_SetVehiclePos(vehicleid,Float:x,Float:y,Float:z)
{
	CheatVehicleInfo[vehicleid][elc_vX]=x;
	CheatVehicleInfo[vehicleid][elc_vY]=y;
	CheatVehicleInfo[vehicleid][elc_vZ]=z;
    SetVehiclePos(vehicleid,x,y,z);
    CheatVehicleInfo[vehicleid][elc_vStatut]=0;
    return 1;
}
stock initial_SetVehiclePos(vehicleid,Float:x,Float:y,Float:z)
{
	return SetVehiclePos(vehicleid,x,y,z);
}
#if defined INCLUDE_BASE_MODE
//ALS_SYSTEME --------------------
#if defined _ALS_SetVehiclePos
    #undef SetVehiclePos
#else
    #define _ALS_SetVehiclePos
#endif
#define SetVehiclePos ELC_AC_SetVehiclePos
//ALS_OFF_SYSTEME ----------------
#endif
//Core--------------------------------------------------------------------------
public OnPlayerCheckCheat(playerid)
{
	if(IsPlayerConnected(playerid)){
	new elc_IsTime=GetTickCount();
	#if defined MODE_DELAY_SEND_STATS
	if(CheatPlayerInfo[playerid][elc_AntiMoneyHack]==1 && IsPassTime(playerid,CheatPlayerInfo[playerid][elc_GiveMoneyTime],elc_IsTime))
	#else
	if(CheatPlayerInfo[playerid][elc_AntiMoneyHack]==1)
	#endif
	{
		new elc_getmoney=initial_GetPlayerMoney(playerid);
		if(elc_getmoney>CheatPlayerInfo[playerid][elc_money])
		{
			new elc_str[60];
			format(elc_str,sizeof(elc_str),"%d", elc_getmoney-CheatPlayerInfo[playerid][elc_money]);
			initial_ResetPlayerMoney(playerid);
			initial_GivePlayerMoney(playerid, CheatPlayerInfo[playerid][elc_money]);
			ELC_SendCheatWarning(playerid,1,elc_str);
		}
		#if defined DISABLE_MONEY_DEATHLOSE
		else if(((elc_getmoney+100)<=CheatPlayerInfo[playerid][elc_money])&&((GetTickCount()-CheatPlayerInfo[playerid][elc_TimeSpawn])<(TIMER_CHEAT_RATE+MAX_DELAY_SEND_STATS+5000)))
		{
			initial_ResetPlayerMoney(playerid);
			initial_GivePlayerMoney(playerid, elc_getmoney+100);
		}
		#endif
	}
	if(CheatPlayerInfo[playerid][elc_AntiTeleportHack]==1 && IsPlayerUpdatePos(playerid))
	{
	    #if defined MODE_DELAY_SEND_STATS
		if(CheatPlayerInfo[playerid][elc_SetPositionTime]!=0)
		{
		    if(IsPassTime(playerid,CheatPlayerInfo[playerid][elc_SetPositionTime],elc_IsTime))
		    {
            	CheatPlayerInfo[playerid][elc_SetPositionTime]=0;
				GetPlayerPos(playerid,CheatPlayerInfo[playerid][elc_posx],CheatPlayerInfo[playerid][elc_posy],CheatPlayerInfo[playerid][elc_posz]);
				CheatPlayerInfo[playerid][elc_interior]=GetPlayerInterior(playerid);
				CheatPlayerInfo[playerid][elc_virtualworld]=GetPlayerVirtualWorld(playerid);
			}
		}
		else if(IsPlayerCheatPos(playerid))
		#else
		if(IsPlayerCheatPos(playerid))
		#endif
		{
			if(!IsPlayerCheatAllowTelPos(playerid))
			{
			    GetPlayerPos(playerid,CheatPlayerInfo[playerid][elc_posx],CheatPlayerInfo[playerid][elc_posy],CheatPlayerInfo[playerid][elc_posz]);
				CheatPlayerInfo[playerid][elc_interior]=GetPlayerInterior(playerid);
				CheatPlayerInfo[playerid][elc_virtualworld]=GetPlayerVirtualWorld(playerid);
			    CheatPlayerInfo[playerid][elc_AllowTelX]=0;
			    CheatPlayerInfo[playerid][elc_AllowTelY]=0;
			    CheatPlayerInfo[playerid][elc_AllowTelZ]=0;
			}
		    else
			{
				if(ELC_SendCheatWarning(playerid,6))
				{
					SetPlayerPos(playerid,CheatPlayerInfo[playerid][elc_posx],CheatPlayerInfo[playerid][elc_posy],CheatPlayerInfo[playerid][elc_posz]);
					SetPlayerInterior(playerid,CheatPlayerInfo[playerid][elc_interior]);
					SetPlayerVirtualWorld(playerid,CheatPlayerInfo[playerid][elc_virtualworld]);
				}
				else
				{
					GetPlayerPos(playerid,CheatPlayerInfo[playerid][elc_posx],CheatPlayerInfo[playerid][elc_posy],CheatPlayerInfo[playerid][elc_posz]);
					CheatPlayerInfo[playerid][elc_interior]=GetPlayerInterior(playerid);
					CheatPlayerInfo[playerid][elc_virtualworld]=GetPlayerVirtualWorld(playerid);
				}
			}
		}
		else
		{
			GetPlayerPos(playerid,CheatPlayerInfo[playerid][elc_posx],CheatPlayerInfo[playerid][elc_posy],CheatPlayerInfo[playerid][elc_posz]);
			CheatPlayerInfo[playerid][elc_interior]=GetPlayerInterior(playerid);
			CheatPlayerInfo[playerid][elc_virtualworld]=GetPlayerVirtualWorld(playerid);
		}
	}
	#if defined MODE_DELAY_SEND_STATS
	if(CheatPlayerInfo[playerid][elc_AntiWeaponHack]==1 && IsPassTime(playerid,CheatPlayerInfo[playerid][elc_GiveWeaponTime],elc_IsTime))
	#else
	if(CheatPlayerInfo[playerid][elc_AntiWeaponHack]==1&&GetPlayerSpecialAction(playerid)!=SPECIAL_ACTION_ENTER_VEHICLE&&GetPlayerSpecialAction(playerid)!=SPECIAL_ACTION_EXIT_VEHICLE)
	#endif
	{
		new elc_WA_VAR[2];
		new elc_NeedRemove;
		/*new actweap=GetPlayerWeapon(playerid);
		if(actweap!=0&&actweap!=CheatPlayerInfo[playerid][elc_weapon][elc_GetWeaponSlot(actweap)])
		{
			if(!elc_IsGiveVehicleWeapon(actweap))
			{
				new elc_str[32];
				GetWeaponName(elc_WA_VAR[0][i],str,32);
				ELC_SendCheatWarning(playerid,2,elc_str);
			}
			elc_NeedRemove=1;
		}*/
		for(new i = 0; i <13; i++)
		{
			elc_WA_VAR[0]=0; elc_WA_VAR[1]=0;
			GetPlayerWeaponData(playerid,i,elc_WA_VAR[0],elc_WA_VAR[1]);
			if(CheatPlayerInfo[playerid][elc_weapon][i]!=elc_WA_VAR[0] && elc_WA_VAR[0]!=0 && elc_WA_VAR[1]!=0)// && elc_WA_VAR[0][i]!=actweap
			{
				//CHEAT WEAPON
				if(!elc_IsGiveVehicleWeapon(elc_WA_VAR[0])&&elc_NeedRemove==0)
				{
					new elc_str[32];
					GetWeaponName(elc_WA_VAR[0],elc_str,sizeof(elc_str));
					ELC_SendCheatWarning(playerid,2,elc_str);
				}
				elc_NeedRemove=1;
				//SetPlayerAmmo(playerid, elc_WA_VAR[0], 0);
			}
			else if(((CheatPlayerInfo[playerid][elc_ammo][i]-elc_WA_VAR[1]) < 0) && elc_IsNotWeaponNoAmmo(elc_WA_VAR[0]) && elc_WA_VAR[0]!=0)
			{
				//CHEAT AMMO
				if(elc_NeedRemove<=1)
				{
					new elc_str[60];
					format(elc_str,sizeof(elc_str),"%d",elc_WA_VAR[1]-CheatPlayerInfo[playerid][elc_ammo][i]);
					ELC_SendCheatWarning(playerid,3,elc_str);
				}
				elc_NeedRemove=2;
				//SetPlayerAmmo(playerid, elc_WA_VAR[0], 0);
			}
			else if(CheatPlayerInfo[playerid][elc_weapon][i]!=0 && elc_WA_VAR[0]==0 && elc_WA_VAR[1]==0)
			{
			    CheatPlayerInfo[playerid][elc_weapon][i]=0;
			    CheatPlayerInfo[playerid][elc_ammo][i]=0;
			}
			else if(elc_WA_VAR[1]!=0) CheatPlayerInfo[playerid][elc_ammo][i]=elc_WA_VAR[1];

		}
		if(elc_NeedRemove>=1)
		{
			new WepUse=GetPlayerWeapon(playerid);
			initial_ResetPlayerWeapons(playerid);
		    for(new i = 0; i <13; i++)if(CheatPlayerInfo[playerid][elc_weapon][i] != 0)initial_GivePlayerWeapon(playerid, CheatPlayerInfo[playerid][elc_weapon][i], CheatPlayerInfo[playerid][elc_ammo][i]);
		    SetPlayerArmedWeapon(playerid,WepUse);
		}
	}
	#if defined MODE_DELAY_SEND_STATS
	if(CheatPlayerInfo[playerid][elc_AntiHealthHack]==1 && IsPassTime(playerid,CheatPlayerInfo[playerid][elc_GiveHealthTime],elc_IsTime) && IsPassTime(playerid,CheatPlayerInfo[playerid][elc_GiveMoneyTime],elc_IsTime))
	#else
	if(CheatPlayerInfo[playerid][elc_AntiHealthHack]==1)
	#endif
	{
		new Float:velc_health;
		GetPlayerHealth(playerid,velc_health);
		if(velc_health!=CheatPlayerInfo[playerid][elc_health])
		{
			if(velc_health<=100 && velc_health>0 && CheatPlayerInfo[playerid][elc_health]==0) CheatPlayerInfo[playerid][elc_health]=velc_health;
			else if(velc_health>CheatPlayerInfo[playerid][elc_health])
			{
			    //Cheat Health
			    initial_SetPlayerHealth(playerid,CheatPlayerInfo[playerid][elc_health]);
			    ELC_SendCheatWarning(playerid,7);
			}
			else if(velc_health<CheatPlayerInfo[playerid][elc_health] && velc_health!=0)CheatPlayerInfo[playerid][elc_health]=velc_health;
		}
	}
	#if defined MODE_DELAY_SEND_STATS
	if(CheatPlayerInfo[playerid][elc_AntiArmourHack]==1 && IsPassTime(playerid,CheatPlayerInfo[playerid][elc_GiveArmourTime],elc_IsTime) && IsPassTime(playerid,CheatPlayerInfo[playerid][elc_GiveMoneyTime],elc_IsTime))
	#else
	if(CheatPlayerInfo[playerid][elc_AntiArmourHack]==1)
	#endif
	{
		new Float:velc_armour;
		GetPlayerArmour(playerid,velc_armour);
		if(velc_armour!=CheatPlayerInfo[playerid][elc_armour])
		{
			if(velc_armour>CheatPlayerInfo[playerid][elc_armour])
			{
			    //Cheat Armour
			    initial_SetPlayerArmour(playerid,CheatPlayerInfo[playerid][elc_armour]);
			    ELC_SendCheatWarning(playerid,8);
			}
			else if(velc_armour<CheatPlayerInfo[playerid][elc_armour])CheatPlayerInfo[playerid][elc_armour]=velc_armour;
		}
	}
	if(CheatPlayerInfo[playerid][elc_AntiVehicleTelportHack]==2 && CheatPlayerInfo[playerid][elc_PossibleVehicleHack]!=0 && IsPassTime(playerid,CheatVehicleInfo[CheatPlayerInfo[playerid][elc_PossibleVehicleHack]][elc_vPossibleHackTime],elc_IsTime))
	{
	    if(ELC_AC_IsCreatedVehicle(CheatPlayerInfo[playerid][elc_PossibleVehicleHack]))
	    {
	        ELC_SendCheatWarning(playerid,9);
		    SetVehiclePos(CheatPlayerInfo[playerid][elc_PossibleVehicleHack], CheatVehicleInfo[CheatPlayerInfo[playerid][elc_PossibleVehicleHack]][elc_vX], CheatVehicleInfo[CheatPlayerInfo[playerid][elc_PossibleVehicleHack]][elc_vY], CheatVehicleInfo[CheatPlayerInfo[playerid][elc_PossibleVehicleHack]][elc_vZ]);
		    SetVehicleZAngle(CheatPlayerInfo[playerid][elc_PossibleVehicleHack],CheatVehicleInfo[CheatPlayerInfo[playerid][elc_PossibleVehicleHack]][elc_vAngle]);
			CheatVehicleInfo[CheatPlayerInfo[playerid][elc_PossibleVehicleHack]][elc_vPossiblePlayerHack]=0;
			CheatVehicleInfo[CheatPlayerInfo[playerid][elc_PossibleVehicleHack]][elc_vPossibleHackTime]=0;
		}
        CheatPlayerInfo[playerid][elc_PossibleVehicleHack]=0;
    }
	else if(GetPlayerVehicleSeat(playerid)==0)
	{
		new vehicleid=GetPlayerVehicleID(playerid);
		if(vehicleid!=0)
		{
			GetVehiclePos(vehicleid, CheatVehicleInfo[vehicleid][elc_vX], CheatVehicleInfo[vehicleid][elc_vY], CheatVehicleInfo[vehicleid][elc_vZ]);
            GetVehicleZAngle(vehicleid,CheatVehicleInfo[vehicleid][elc_vAngle]);
		}
	}}
	else{KillTimer(CheatPlayerInfo[playerid][elc_timer]);}
	return 1;
}

public OnPlayerUpdate(playerid)
{
	new elc_tick=GetTickCount();
	if(CheatPlayerInfo[playerid][elc_LastUpdate]+1000<elc_tick)
	{
		GetPlayerPos(playerid,CheatPlayerInfo[playerid][elc_posx],CheatPlayerInfo[playerid][elc_posy],CheatPlayerInfo[playerid][elc_posz]);
	}
	CheatPlayerInfo[playerid][elc_LastUpdate]=elc_tick;
	if(CheatPlayerInfo[playerid][elc_AntiSpeedHack]==1)
	{
		//if((GetPlayerSurfingVehicleID(playerid)!=INVALID_VEHICLE_ID || GetPlayerState(playerid) == PLAYER_STATE_DRIVER) && (elc_GetPlayerSpeedXY(playerid) > MAX_SPEED_VEHICLE))
		if(elc_GetPlayerSpeedXY(playerid) > MAX_SPEED_VEHICLE)ELC_SendCheatWarning(playerid,5);
	}
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK && usejet[playerid] == false && PlayerInfo[playerid][pA] == 0)
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		//KickEx(playerid,"You can't use the Jetpack.");
		new string[150];
		format(string,sizeof(string),"[A-CHEAT] %s has spawned a Jetpack and has been kicked from the server.",PlayerName(playerid));
		AdministratorMessage(COLOR_RED,string);
		return 1; 
	}
	new Keys, ud, lr;
	GetPlayerKeys(playerid, Keys, ud, lr);
	if(CheckCrouch[playerid] == 1) 
	{
		switch(WeaponIDD[playerid])
		{
			case 23..25, 27, 29..34, 41:
			{
				if((Keys & KEY_CROUCH) && !((Keys & KEY_FIRE) || (Keys & KEY_HANDBRAKE)) && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK ) 
				{
					if(Ammo[playerid][GetPlayerWeapon(playerid)] > GetPlayerAmmo(playerid))
					{
						OnPlayerCBug(playerid);
					}
				}
			}
		}
	}
	if(!ud && !lr) 
	{ 
		NotMoving[playerid] = 1; /*OnPlayerKeyStateChange(playerid, Keys, 0);*/ 
	}
	else
	{ 
		NotMoving[playerid] = 0; /*OnPlayerKeyStateChange(playerid, Keys, 0);*/
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new Float:vH, string[150], vehicleid = GetPlayerVehicleID(playerid);
		GetVehicleHealth(vehicleid,vH);
		if(vH == 1000.0)
		{
			if(PlayerInfo[playerid][pWarn]>=5)
			{
				GameTextForPlayer(playerid, "????!$$%&'()*+,-./01~!@#   $^&*()_-+={[}]:;'<,>.?/", 10000, 6);
			}
			else
			{
				format(string,sizeof(string),"[INFO:] ( ! ) %s probably used: Health Vehicle Cheat. Before: %0.1f - After: %0.1f",PlayerName(playerid),vInfo[vInfo[vehicleid][vVSpawnID]][vHealth],vH);
				AdministratorMessage(COLOR_RED,string);
				SetVehicleHealth(vehicleid, 999.0);
				UpdateVehicleDamageStatus(vehicleid,vInfo[vehicleid][vPanelsDmg],vInfo[vehicleid][vDoorsDmg],vInfo[vehicleid][vLightsDmg], vInfo[vehicleid][vTiresDmg]);
				PlayerInfo[playerid][pWarn]++;
			}
		}
	}
	CallLocalFunction("ELC_AC_OnPlayerUpdate", "i",playerid);
	return 1;
}
/*----------------------------------------------------------------------------*/
#if defined INCLUDE_BASE_MODE
//ALS_SYSTEME --------------------
#if defined _ALS_OnPlayerUpdate
	#undef OnPlayerUpdate
#else
	#define _ALS_OnPlayerUpdate
#endif
#define OnPlayerUpdate ELC_AC_OnPlayerUpdate
forward ELC_AC_OnPlayerUpdate(playerid);
#endif
//ALS_OFF_SYSTEME ----------------

Float:PlayerTheoreticAngle(Player){
	new Float:X;
	new Float:Y;
	new Float:Z;
	GetVehiclePos(GetPlayerVehicleID(Player),X,Y,Z);
	new Float:NewX;
	if(X > PlayerPositionX[Player]) NewX = X - PlayerPositionX[Player];
	if(X < PlayerPositionX[Player]) NewX = PlayerPositionX[Player] - X;
	new Float:NewY;
	if(Y > PlayerPositionY[Player]) NewY = Y - PlayerPositionY[Player];
	if(Y < PlayerPositionY[Player]) NewY = PlayerPositionY[Player] - Y;
	new Float:Sinus;
	new Float:Cosinus;
	Cosinus = floatsqroot(floatpower(floatabs(floatsub(X,PlayerPositionX[Player])),2) + floatpower(floatabs(floatsub(Y,PlayerPositionY[Player])),2));
	new Float:TheoreticAngle;
	if(PlayerPositionX[Player] > X && PlayerPositionY[Player] > Y){
	    Sinus = asin(NewX / Cosinus);
	    TheoreticAngle = floatsub(floatsub(floatadd(Sinus,90),floatmul(Sinus,2)),-90.0);}
	if(PlayerPositionX[Player] > X && PlayerPositionY[Player] < Y){
	    Sinus = asin(NewX / Cosinus);
	    TheoreticAngle = floatsub(floatadd(Sinus,180),180.0);}
	if(PlayerPositionX[Player] < X && PlayerPositionY[Player] < Y){
	    Sinus = acos(NewY / Cosinus);
	    TheoreticAngle = floatsub(floatadd(Sinus,360),floatmul(Sinus,2));}
	if(PlayerPositionX[Player] < X && PlayerPositionY[Player] > Y){
	    Sinus = asin(NewX / Cosinus);
	    TheoreticAngle = floatadd(Sinus,180);}
	if(TheoreticAngle == 0.0) GetVehicleZAngle(GetPlayerVehicleID(Player),TheoreticAngle);
	return TheoreticAngle;}

stock GetPlayer2DZone(playerid, zone[], len){
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
 	for(new i = 0; i != sizeof(gSAZones); i++ ){
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4]){
		    return format(zone, len, gSAZones[i][SAZONE_NAME], 0);}}
	return 0;}

public PlayerUpdates(){
	for(new Player; Player < GetMaxPlayers(); Player++){
	    if(IsPlayerConnected(Player) && GetPlayerState(Player) == PLAYER_STATE_DRIVER && VehicleIsCar(GetPlayerVehicleID(Player))) GetVehiclePos(GetPlayerVehicleID(Player),PlayerPositionX[Player],PlayerPositionY[Player],PlayerPositionZ[Player]);}
	return 1;}

forward OnPlayerCBug(playerid);
public OnPlayerCBug(playerid) {
	new str2[150],Float:x,Float:y,Float:z;
	format(str2, sizeof(str2), "( ! ) %s probably used: Crouch bugging with weapon (%s).",PlayerName(playerid), aWeaponNames[WeaponIDD[playerid]]);
	SendClientMessageToAll(COLOR_RED, str2);
	SendClientMessage(playerid,-1,""EMB_GREEN"[INFO:]"EMB_WHITE" Don't C-BUG mate, you are going to fly!");
	CheckCrouch[playerid] = 0;
	GetPlayerPos(playerid,x,y,z);
	ELC_AC_SetPlayerPos(playerid,x,y,z+150.0);
	return 1;}

forward CrouchCheck(playerid);
public CrouchCheck(playerid) {
	CheckCrouch[playerid] = 0;
	return 1;
}
public PlayerDrift()
{
	for(new Player; Player < GetMaxPlayers(); Player++){
	    if(IsPlayerConnected(Player) && GetPlayerState(Player) == PLAYER_STATE_DRIVER && VehicleIsCar(GetPlayerVehicleID(Player))){
	        new Float:Angle;
	        GetVehicleZAngle(GetPlayerVehicleID(Player),Angle);
			if(floatabs(floatsub(Angle,PlayerTheoreticAngle(Player))) < 90.0 && floatabs(floatsub(Angle,PlayerTheoreticAngle(Player))) > 10.0 && VehicleSpeed(GetPlayerVehicleID(Player)) < 300 && VehicleSpeed(GetPlayerVehicleID(Player)) > 30){
			    if(PlayerMoney[Player] == 0 && PlayerScore[Player] == 0 && PlayerCombo[Player] == 1){
			        TextDrawShowForPlayer(Player,ServerTextDrawOne);
			        TextDrawShowForPlayer(Player,ServerTextDrawTwo);
			        TextDrawShowForPlayer(Player,ServerTextDrawThree[Player]);
		          	//TextDrawShowForPlayer(Player,ServerTextDrawFour[Player]);
		          	TextDrawShowForPlayer(Player,ServerTextDrawFive[Player]);
				   	TextDrawSetString(ServerTextDrawThree[Player]," ");
				   	//TextDrawSetString(ServerTextDrawFour[Player]," ");
				   	TextDrawSetString(ServerTextDrawFive[Player]," ");}
			    PlayerMoney[Player] += floatround(floatabs(floatsub(Angle,PlayerTheoreticAngle(Player))) * (VehicleSpeed(GetPlayerVehicleID(Player)) * 0.1)) / 10;
			    PlayerScore[Player] += floatround(floatabs(floatsub(Angle,PlayerTheoreticAngle(Player))) * 3 * (VehicleSpeed(GetPlayerVehicleID(Player)) * 0.1)) / 10;
				PlayerCombo[Player] = PlayerScore[Player] / 1000;
				if(PlayerCombo[Player] < 1) PlayerCombo[Player] = 1;
				new String[100];
				format(String,sizeof(String),"~R~~H~Cash For Drift: ~W~~H~%d$",PlayerMoney[Player]);
				TextDrawSetString(ServerTextDrawThree[Player],String);
				//format(String,sizeof(String),"~R~~H~Score For Drift: ~W~~H~%d",PlayerScore[Player]);
				//TextDrawSetString(ServerTextDrawFour[Player],String);
				format(String,sizeof(String),"~R~~H~Combo: ~W~~H~X%d",PlayerCombo[Player]);
				TextDrawSetString(ServerTextDrawFive[Player],String);
				KillTimer(PlayerTimerOne[Player]);
			    PlayerTimerOne[Player] = SetTimerEx("PlayerDriftEnd",3000,0,"d",Player);}}}
	return 1;
}

public PlayerDriftEnd(Player){
	TextDrawHideForPlayer(Player,ServerTextDrawOne);
	TextDrawHideForPlayer(Player,ServerTextDrawTwo);
    TextDrawHideForPlayer(Player,ServerTextDrawThree[Player]);
  //	TextDrawHideForPlayer(Player,ServerTextDrawFour[Player]);
  	TextDrawHideForPlayer(Player,ServerTextDrawFive[Player]);
   	TextDrawSetString(ServerTextDrawThree[Player]," ");
   //	TextDrawSetString(ServerTextDrawFour[Player]," ");
   	TextDrawSetString(ServerTextDrawFive[Player]," ");
	GivePlayerCash(Player,PlayerMoney[Player]);
	//SetPlayerScore(Player,GetPlayerScore(Player) + PlayerScore[Player] * PlayerCombo[Player]);
	PlayerMoney[Player] = 0;
	PlayerScore[Player] = 0;
	PlayerCombo[Player] = 1;
	return 1;}


stock VehicleIsCar(Vehicle){
	switch(GetVehicleModel(Vehicle)){
	    case 562: return 1;}
	return 0;}

public PlayerActionMessage(playerid,Float:radius,message[]){
    new actiontext[MAX_CHATBUBBLE_LENGTH+1];
	format(actiontext,MAX_CHATBUBBLE_LENGTH,"* %s *",message);
	SetPlayerChatBubble(playerid,actiontext,0xFFFFFF,53.0,4500);
	SendClientMessage(playerid, 0xFFFFFF, actiontext);
	return 1;} 

iswheelmodel(modelid) {
	new wheelmodels[17] = {1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};
    for(new I = 0, b = sizeof(wheelmodels); I != b; ++I) {
        if (modelid == wheelmodels[I])
            return true;}
    return false;}

IllegalCarNitroIde(carmodel) {
	new illegalvehs[29] = { 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449 };
	for(new I = 0, b = sizeof(illegalvehs); I != b; ++I) {
     	if (carmodel == illegalvehs[I])
            return true;}
    return false;}

// assumes player is in a car - make sure it is.
illegal_nos_vehicle(PlayerID) {
	new carid = GetPlayerVehicleID(PlayerID);
	new playercarmodel = GetVehicleModel(carid);
	return IllegalCarNitroIde(playercarmodel);}

stock islegalcarmod(vehicleide, componentid) 
{
	new modok = false;
	// stereo, hydraulics & nos (1x 2x 3x) are special.
	if ( (iswheelmodel(componentid)) || (componentid == 1086) || (componentid == 1087) || ((componentid >= 1008) && (componentid <= 1010))) 
	{
		new nosblocker = IllegalCarNitroIde(vehicleide);
		if (!nosblocker)
			modok = true;
	}
	else 
	{
		// check if the specified model CAN use this particular mod.
		for(new I = 0, b = sizeof(legalmods); I != b; ++I) 
		{
            if (legalmods[I][0] == vehicleide)
             { // first is car IDE
                for(new J = 1; J < 22; J++) 
                { // start with 1
                    if (legalmods[I][J] == componentid)
                        modok = true;
                }
            }
        }
    }
	return modok;
}

public Freeze(){
    FTimer--;
    new strings[128];
    format(strings, sizeof(strings), "%d", FTimer);
    if(FTimer == 0){
        for(new i=0;i<MAX_PLAYERS;i++){
            if(InCopChase[i] == true){
                TogglePlayerControllable(i, 1);}}
        KillTimer(FreezeTimers);
        FTimer = 10;
    } else {
        for(new i=0;i<MAX_PLAYERS;i++){
            if(InCopChase[i] == true){
                GameTextForPlayer(i, strings, 1000, 3);}}}
    return 1;}



public OnQueryError(errorid, const error[], const callback[], const query[], MySQL:handle)
{
	printf("EID: %d | Error: %s | Query: %s | Callback: %s", errorid, error, query, callback);
	return 1;
}

public OnPlayerConnect(playerid)
{
		for(new i = 0; i <_:aELCp; i++)CheatPlayerInfo[playerid][aELCp:i]=0;
		if (!IsPlayerNPC(playerid))
		{
			CheatPlayerInfo[playerid][elc_armour]=100;
			CheatPlayerInfo[playerid][elc_health]=100;
			CheatPlayerInfo[playerid][elc_timer]=SetTimerEx("OnPlayerCheckCheat", TIMER_CHEAT_RATE, 1, "i", playerid);
			CheatPlayerInfo[playerid][elc_AntiWeaponHack]=ANTI_WEAPON_&_AMMO_HACK;
			CheatPlayerInfo[playerid][elc_AntiAmmoBlockHack]=ANTI_AMMO_BLOCK_HACK;
			CheatPlayerInfo[playerid][elc_AntiMoneyHack]=ANTI_MONEY_HACK;
			CheatPlayerInfo[playerid][elc_AntiSpeedHack]=0;
			CheatPlayerInfo[playerid][elc_AntiArmourHack]=ANTI_ARMOUR_HACK;
			CheatPlayerInfo[playerid][elc_AntiHealthHack]=ANTI_HEALTH_HACK;
			CheatPlayerInfo[playerid][elc_AntiVehicleTelportHack]=ANTI_VEHICLE-TELEPORT_HACK;
			#if defined MODE_DELAY_SEND_STATS
			CheatPlayerInfo[playerid][elc_GiveWeaponTime]=1;
			CheatPlayerInfo[playerid][elc_GiveMoneyTime]=1;
			CheatPlayerInfo[playerid][elc_GiveHealthTime]=1;
			CheatPlayerInfo[playerid][elc_GiveArmourTime]=1;
			#endif
			CheatPlayerInfo[playerid][elc_PlayerEnterTime]=0;
		}
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		SetPlayerMarkerForPlayer(playerid,playerid,COLOR_INVISIBLE);
		SetPlayerColor(playerid,COLOR_INVISIBLE);
		new tmp[pInfo] = 0;
		PlayerInfo[playerid] = tmp;
		SetPVarInt(playerid,"inreg",0);
		usejet[playerid]=false; 
		TextDrawHideForPlayer(playerid,ServerTextDrawOne);
		TextDrawHideForPlayer(playerid,ServerTextDrawTwo);
	    TextDrawHideForPlayer(playerid,ServerTextDrawThree[playerid]);
	  	TextDrawHideForPlayer(playerid,ServerTextDrawFive[playerid]);
	   	TextDrawSetString(ServerTextDrawThree[playerid]," ");
	   	TextDrawSetString(ServerTextDrawFive[playerid]," ");
		PlayerMoney[playerid] = 0;
		PlayerScore[playerid] = 0;
		PlayerCombo[playerid] = 1;
		usejet[playerid] = false;
		InCopChase[playerid]=false;
		PlayerPositionX[playerid] = 0.0;
		PlayerPositionY[playerid] = 0.0;
		PlayerPositionZ[playerid] = 0.0;
		contakm[playerid]=false;
		InRace[playerid] = -1;
		CurrentCheck[playerid] = -1;
		InfoBox[playerid] = TextDrawCreate(37.000000,127.000000,"_");
		TextDrawUseBox(InfoBox[playerid],1);
		TextDrawBoxColor(InfoBox[playerid],175);
		TextDrawTextSize(InfoBox[playerid],217.000000,59.000000);
		TextDrawAlignment(InfoBox[playerid],0);
		TextDrawBackgroundColor(InfoBox[playerid],255);
		TextDrawFont(InfoBox[playerid],1);
		TextDrawLetterSize(InfoBox[playerid],0.270000, 2.000000);
		TextDrawColor(InfoBox[playerid],-1);
		TextDrawSetOutline(InfoBox[playerid],1);
		TextDrawSetProportional(InfoBox[playerid],1);
		TextDrawSetShadow(InfoBox[playerid],1);
		KillTimer(PlayerTimerOne[playerid]);
		CreateRaceTD(playerid), CreatePlayerCopTD(playerid);
		CallLocalFunction("ELC_AC_OnPlayerConnect", "d", playerid);
		return 1;
}

/*----------------------------------------------------------------------------*/
#if defined INCLUDE_BASE_MODE
//ALS_SYSTEME --------------------
#if defined _ALS_OnPlayerConnect
	#undef OnPlayerConnect
#else
	#define _ALS_OnPlayerConnect
#endif
#define OnPlayerConnect ELC_AC_OnPlayerConnect
forward ELC_AC_OnPlayerConnect(playerid);
#endif
//ALS_OFF_SYSTEME ----------------
/*----------------------------------------------------------------------------*/

/*forward AntiCheat(playerid);
public AntiCheat(playerid)
{

	if(PlayerInfo[playerid][pA] != 0) return 1;
	{
		if(GetPlayerWeapon(playerid) == 38 || GetPlayerWeapon(playerid) == 39 || GetPlayerWeapon(playerid) == 9 || GetPlayerWeapon(playerid) == 35 || GetPlayerWeapon(playerid) == 40 || GetPlayerWeapon(playerid) == 36 || GetPlayerWeapon(playerid) == 37 || GetPlayerWeapon(playerid) == 16 || GetPlayerWeapon(playerid) == 44)
		{
			new string[900];
			PlayerInfo[playerid][KickAnti]++;
			if(PlayerInfo[playerid][KickAnti]>3)
			{
				new query[150];
				format(string,sizeof(string),"[WARNING:]  %s as suspected weapons and it was banned from this server!",PlayerName(playerid));
				AdministratorMessage(COLOR_RED, string);
				//printf(string);
				format(string,sizeof(string),"[WARNING:] You have been banned from this server: CHEAT WEAPON.");
				SendClientMessage(playerid,COLOR_RED, string);
				format(query,sizeof(query),"UPDATE users SET ban=1,bareason='CHEAT WEAPON',banfrom='ServerAC' WHERE username='%s'",PlayerName(playerid));
				mysql_query(query);
    			printf(string);
				ResetPlayerWeapons(playerid);
				SetTimerEx("KickPlayer", 1000, false, "i", playerid);
			}
			else
			{
				format(string,sizeof(string),"[WARNING:] %s has suspected weapons. It will have 3 attempts. If %s will do this action 4 times will be banned.",PlayerName(playerid),PlayerName(playerid));
				AdministratorMessage(COLOR_RED, string);
				printf(string);
				ResetPlayerWeapons(playerid);
			}
		}
	}
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK && PlayerInfo[playerid][pA]==0)
	{
		new string[150]; 
		format(string,sizeof(string),"[WARNING:] %s possessed an unauthorized Jetpack and was kicked.",PlayerName(playerid));
		AdministratorMessage(COLOR_RED, string);
		SetTimerEx("KickPlayer", 1000, false, "i", playerid);
		return 1;
	}
	return 1;
}*/

forward KickPlayer(playerid);
public KickPlayer(playerid){
	KillTimer(CheatPlayerInfo[playerid][elc_timer]);
	Kick(playerid);
	return 1;}

public OnVehicleSpawn(vehicleid)
{
	GetVehiclePos(vehicleid, CheatVehicleInfo[vehicleid][elc_vX], CheatVehicleInfo[vehicleid][elc_vY], CheatVehicleInfo[vehicleid][elc_vZ]);
	new Float:vvv;
	GetVehicleHealth(vehicleid, vvv);
	if(vvv == 1000.0)
	{
		SetVehicleHealth(vehicleid, 999.0);
	}
	if(vInfo[vehicleid][vPrivato]==1 && vInfo[vehicleid][vSpawnType]==0)
	{
		SetVehiclePos(vehicleid,vInfo[vehicleid][vSpawn][0],vInfo[vehicleid][vSpawn][1],vInfo[vehicleid][vSpawn][2]);
		SetVehicleZAngle(vehicleid,vInfo[vehicleid][vSpawn][3]);
		SetVehicleHealth(vehicleid, 999.0);
	}
	else
	{
		SetVehicleHealth(vehicleid, 999.0);
	}
	if(vInfo[vehicleid][vPrivato]==1 && vInfo[vehicleid][vSpawnType]==1)
	{
		SetVehiclePos(vehicleid,vInfo[vehicleid][vCSpawn][0],vInfo[vehicleid][vCSpawn][1],vInfo[vehicleid][vCSpawn][2]);
		SetVehicleZAngle(vehicleid,vInfo[vehicleid][vCSpawn][3]);
		SetVehicleHealth(vehicleid, 999.0);
	}
	CallLocalFunction("ELC_AC_OnVehicleSpawn", "d",vehicleid);
	return 1;
}
/*----------------------------------------------------------------------------*/
#if defined INCLUDE_BASE_MODE
//ALS_SYSTEME --------------------
#if defined _ALS_OnVehicleSpawn
	#undef OnVehicleSpawn
#else
	#define _ALS_OnVehicleSpawn
#endif
#define OnVehicleSpawn ELC_AC_OnVehicleSpawn
forward ELC_AC_OnVehicleSpawn(vehicleid);
#endif
//ALS_OFF_SYSTEME ----------------
/*----------------------------------------------------------------------------*/
public OnVehicleDeath(vehicleid)
{
    CheatVehicleInfo[vehicleid][elc_vX]=0;
	CallLocalFunction("ELC_AC_OnVehicleDeath", "d",vehicleid);
	return 1;
}
/*----------------------------------------------------------------------------*/
#if defined INCLUDE_BASE_MODE
//ALS_SYSTEME --------------------
#if defined _ALS_OnVehicleDeath
	#undef OnVehicleDeath
#else
	#define _ALS_OnVehicleDeath
#endif
#define OnVehicleDeath ELC_AC_OnVehicleDeath
forward ELC_AC_OnVehicleDeath(vehicleid);
#endif
//ALS_OFF_SYSTEME ----------------
public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{

	new slot=elc_GetWeaponSlot(weaponid);
	new elc_WA_VAR[2];
	GetPlayerWeaponData(playerid,slot,elc_WA_VAR[0],elc_WA_VAR[1]);
	if(CheatPlayerInfo[playerid][elc_AntiWeaponHack]==1 && CheatPlayerInfo[playerid][elc_weapon][slot]!=weaponid && weaponid!=0 && elc_WA_VAR[1]!=0)// && elc_WA_VAR[0][i]!=actweap
	{
		//CHEAT WEAPON
		RemovePlayerWeapon(playerid, weaponid);
		if(!elc_IsGiveVehicleWeapon(weaponid))
		{
			new elc_str[32];
			GetWeaponName(weaponid,elc_str,sizeof(elc_str));
			ELC_SendCheatWarning(playerid,2,elc_str);
		}
	}
	else if(elc_IsNotWeaponNoAmmo(weaponid) && elc_WA_VAR[1]<=CheatPlayerInfo[playerid][elc_ammo][slot])
	{
		if(elc_WA_VAR[1]<CheatPlayerInfo[playerid][elc_ammo][slot])
		{
		    CheatPlayerInfo[playerid][elc_tickfire]=0;
			CheatPlayerInfo[playerid][elc_ammo][slot]=elc_WA_VAR[1];
		}
		else if(CheatPlayerInfo[playerid][elc_AntiAmmoBlockHack]==1)
		{
			if(CheatPlayerInfo[playerid][elc_tickfire]==0||CheatPlayerInfo[playerid][elc_weaponFire]!=weaponid)
			{
			    CheatPlayerInfo[playerid][elc_tickfire]=1;
				CheatPlayerInfo[playerid][elc_ammo][slot]=elc_WA_VAR[1];
				CheatPlayerInfo[playerid][elc_weaponFire]=weaponid;
			}
			else if(CheatPlayerInfo[playerid][elc_tickfire]<MAX_WEAPON_SHOT_FOR_CHECK) CheatPlayerInfo[playerid][elc_tickfire]++;
			else if(CheatPlayerInfo[playerid][elc_tickfire]>=MAX_WEAPON_SHOT_FOR_CHECK)
			{
			    CheatPlayerInfo[playerid][elc_tickfire]=0;
				if(CheatPlayerInfo[playerid][elc_ammo][slot]==elc_WA_VAR[1])
				{
					ELC_SendCheatWarning(playerid,4);
					initial_ResetPlayerWeapons(playerid);
					return 0;
				}
			}
		}
	}
	else if(CheatPlayerInfo[playerid][elc_AntiWeaponHack]==1 && elc_IsNotWeaponNoAmmo(weaponid) && elc_WA_VAR[0]!=0)
	{
		new elc_str[60];
		format(elc_str,sizeof(elc_str),"%d",elc_WA_VAR[1]-CheatPlayerInfo[playerid][elc_ammo][slot]);
		ELC_SendCheatWarning(playerid,3,elc_str);
		RemovePlayerWeapon(playerid, elc_WA_VAR[0]);
	    return 0;
	}
	CallLocalFunction("ELC_AC_OnPlayerWeaponShot", "ddddfff",playerid, weaponid, hittype, hitid, fX, fY, fZ);
	return 1;
}
/*----------------------------------------------------------------------------*/
#if defined INCLUDE_BASE_MODE
//ALS_SYSTEME --------------------
#if defined _ALS_OnPlayerWeaponShot
	#undef OnPlayerWeaponShot
#else
	#define _ALS_OnPlayerWeaponShot
#endif
#define OnPlayerWeaponShot ELC_AC_OnPlayerWeaponShot
forward ELC_AC_OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ);
#endif
//ALS_OFF_SYSTEME ----------------
/*----------------------------------------------------------------------------*/

public ELC_AC_EnablePlayerCheatID(playerid,cheatid,enable)
{
	if(cheatid==1)//Money
	{
		if(enable==1)
		{
			CheatPlayerInfo[playerid][elc_AntiMoneyHack]=1;
		}
		else CheatPlayerInfo[playerid][elc_AntiMoneyHack]=0;
	}
	else if(cheatid==2)//Weapon
	{
		if(enable==1)
		{
			for(new i = 0; i <13; i++)
			{
				GetPlayerWeaponData(playerid,i,CheatPlayerInfo[playerid][elc_weapon][i],CheatPlayerInfo[playerid][elc_ammo][i]);
			}
			CheatPlayerInfo[playerid][elc_AntiWeaponHack]=1;
		}
		else CheatPlayerInfo[playerid][elc_AntiWeaponHack]=0;
	}
	else if(cheatid==3)//AirBreak/SpeedHack
	{
		if(enable==1) CheatPlayerInfo[playerid][elc_AntiSpeedHack]=1;
		else CheatPlayerInfo[playerid][elc_AntiSpeedHack]=0;
	}
	else if(cheatid==4)//Anti-Teleport
	{
		if(enable==1)
		{
			GetPlayerPos(playerid,CheatPlayerInfo[playerid][elc_posx],CheatPlayerInfo[playerid][elc_posy],CheatPlayerInfo[playerid][elc_posz]);
			CheatPlayerInfo[playerid][elc_AntiTeleportHack]=1;
		}
		else CheatPlayerInfo[playerid][elc_AntiTeleportHack]=0;
	}
	else if(cheatid==5)//Anti-Ammo_Block
	{
		if(enable==1)
		{
			CheatPlayerInfo[playerid][elc_tickfire]=0;
			CheatPlayerInfo[playerid][elc_ammoFire]=0;
			CheatPlayerInfo[playerid][elc_weaponFire]=0;
			CheatPlayerInfo[playerid][elc_AntiAmmoBlockHack]=1;
		}
		else CheatPlayerInfo[playerid][elc_AntiAmmoBlockHack]=0;
	}
	else if(cheatid==6)//Anti_HEALTH_HACK
	{
		if(enable==1)
		{
			CheatPlayerInfo[playerid][elc_AntiHealthHack]=1;
		}
		else CheatPlayerInfo[playerid][elc_AntiHealthHack]=0;
	}
	else if(cheatid==7)//Anti_ARMOUR_HACK
	{
		if(enable==1)
		{
			CheatPlayerInfo[playerid][elc_AntiArmourHack]=1;
		}
		else CheatPlayerInfo[playerid][elc_AntiArmourHack]=0;
	}
	return 1;
}
/*----------------------------------------------------------------------------*/
#define EnablePlayerCheatID ELC_AC_EnablePlayerCheatID
/*----------------------------------------------------------------------------*/
public RemovePlayerWeapon(playerid, weaponid)
{
    if(CheatPlayerInfo[playerid][elc_AntiWeaponHack]==1)CheatPlayerInfo[playerid][elc_AntiWeaponHack]=2;
    new WeaponsID[13];
    new AmmoID[13];
    new WepUse=GetPlayerWeapon(playerid);
    new slotremove=elc_GetWeaponSlot(weaponid);
    for(new slot = 0; slot <13; slot++)
    {
        if(slotremove!=slot)GetPlayerWeaponData(playerid, slot, WeaponsID[slot], AmmoID[slot]);
    }
    initial_ResetPlayerWeapons(playerid);
    for(new slot = 0; slot <13; slot++)if(WeaponsID[slot]!=0 && AmmoID[slot] != 0)initial_GivePlayerWeapon(playerid, WeaponsID[slot], AmmoID[slot]);
    SetPlayerArmedWeapon(playerid,WepUse);
	if(CheatPlayerInfo[playerid][elc_AntiWeaponHack]==2)CheatPlayerInfo[playerid][elc_AntiWeaponHack]=1;
    return 1;
}
/*----------------------------------------------------------------------------*/
public OnEnterExitModShop(playerid, enterexit, interiorid)
{
    GetPlayerPos(playerid,CheatPlayerInfo[playerid][elc_posx],CheatPlayerInfo[playerid][elc_posy],CheatPlayerInfo[playerid][elc_posz]);
	SaveTime(CheatPlayerInfo[playerid][elc_SetPositionTime],GetTickCount()+MAX_DELAY_WAIT_AFTER_SPAWN);
	CallLocalFunction("ELC_AC_OnEnterExitModShop", "ddd",playerid, enterexit, interiorid);
	return 1;
}

public OnPlayerSpawn(playerid)
{
	ELC_AC_SetPlayerPos(playerid,PlayerInfo[playerid][pSpawn][0],PlayerInfo[playerid][pSpawn][1],PlayerInfo[playerid][pSpawn][2]);
	ELC_AC_SetPlayerHealth(playerid,100);
	if (!IsPlayerNPC(playerid)){
	    GetPlayerPos(playerid,CheatPlayerInfo[playerid][elc_posx],CheatPlayerInfo[playerid][elc_posy],CheatPlayerInfo[playerid][elc_posz]);
		SaveTime(CheatPlayerInfo[playerid][elc_SetPositionTime],GetTickCount()+MAX_DELAY_WAIT_AFTER_SPAWN);
		CheatPlayerInfo[playerid][elc_TimeSpawn]=GetTickCount();
		if(CheatPlayerInfo[playerid][elc_AntiSpeedHack]!=2){
			CheatPlayerInfo[playerid][elc_AntiTeleportHack]=ANTI_TELEPORT/AIBREAK_HACK;
			CheatPlayerInfo[playerid][elc_AntiSpeedHack]=ANTI_SPEED_HACK;}
		CheatPlayerInfo[playerid][elc_health]=100;
		CheatPlayerInfo[playerid][elc_armour]=100;}
	if(IsSpecing[playerid] == 1){
		SetPlayerPos(playerid,SpecX[playerid],SpecY[playerid],SpecZ[playerid]);
		SetPlayerInterior(playerid,Inter[playerid]);
		SetPlayerVirtualWorld(playerid,vWorld[playerid]);
		IsSpecing[playerid] = 0;
		IsBeingSpeced[spectatorid[playerid]] = 0;}
	InRace[playerid] = -1;
	CurrentCheck[playerid] = -1;
	SetTimerEx("GivePWep",1500,false,"i",playerid);
	CallLocalFunction("ELC_AC_OnPlayerSpawn", "d", playerid);
	return 1;
}
/*----------------------------------------------------------------------------*/
#if defined INCLUDE_BASE_MODE
//ALS_SYSTEME --------------------
#if defined _ALS_OnEnterExitModShop
	#undef OnEnterExitModShop
#else
	#define _ALS_OnEnterExitModShop
#endif
#define OnEnterExitModShop ELC_AC_OnEnterExitModShop
forward ELC_AC_OnEnterExitModShop(playerid, enterexit, interiorid);
#endif
//ALS_OFF_SYSTEME ----------------
/*----------------------------------------------------------------------------*/
public OnVehicleMod(playerid, vehicleid, componentid)
{
	new vehicleide = GetVehicleModel(vehicleid),string[150];
	new modok = islegalcarmod(vehicleide, componentid);
	if (!modok) {
		if(PlayerInfo[playerid][pWarn]>=2){
		GameTextForPlayer(playerid, "????!$$%&'()*+,-./01~!@#   $^&*()_-+={[}]:;'<,>.?/", 10000, 6);
		format(string,sizeof(string),"( ! ) %s probably used: Illegal Mods %s %d %d %d %d %d", PlayerName(playerid), playerid, vehicleid, vehicleide, componentid);
		AdministratorMessage(COLOR_RED,string);
		RemoveVehicleComponent(vehicleid, componentid);}
		else{
		format(string,sizeof(string),"( ! ) %s probably used: Illegal Mods %s %d %d %d %d %d", PlayerName(playerid), playerid, vehicleid, vehicleide, componentid);
		AdministratorMessage(COLOR_RED,string);
		RemoveVehicleComponent(vehicleid, componentid);
		PlayerInfo[playerid][pWarn]++;}
		return 0;
	}
    switch(componentid)
	{
	    case 1008..1010: if(ELC_IsPlayerInInvalidNosVehicle(playerid))
		{
			RemoveVehicleComponent(vehicleid, componentid);
			return 0;
		}
	}
	if(!ELC_IsComponentidCompatible(GetVehicleModel(vehicleid), componentid))
	{
		RemoveVehicleComponent(vehicleid, componentid);
		ELC_SendCheatWarning(playerid,10);
		return 0;
	}
	CallLocalFunction("ELC_AC_OnVehicleMod", "ddd",playerid, vehicleid, componentid);
	return 1;
}
/*----------------------------------------------------------------------------*/
#if defined INCLUDE_BASE_MODE
//ALS_SYSTEME --------------------
#if defined _ALS_OnPlayerSpawn
	#undef OnPlayerSpawn
#else
	#define _ALS_OnPlayerSpawn
#endif
#define OnPlayerSpawn ELC_AC_OnPlayerSpawn
forward ELC_AC_OnPlayerSpawn(playerid);
#endif
//ALS_OFF_SYSTEME ----------------
/*----------------------------------------------------------------------------*/
#if defined INCLUDE_BASE_MODE
//ALS_SYSTEME --------------------
#if defined _ALS_OnVehicleMod
	#undef OnVehicleMod
#else
	#define _ALS_OnVehicleMod
#endif
#define OnVehicleMod ELC_AC_OnVehicleMod
forward ELC_AC_OnVehicleMod(playerid, vehicleid, componentid);
#endif
//ALS_OFF_SYSTEME ----------------
/*----------------------------------------------------------------------------*/
stock ELC_IsPlayerInInvalidNosVehicle(playerid)
{
	new elc_vehicleid = GetPlayerVehicleID(playerid);
	#define MAX_INVALID_NOS_VEHICLES 52
	new ELC_InvalidNosVehicles[MAX_INVALID_NOS_VEHICLES] =
	{
		581,523,462,521,463,522,461,448,468,586,417,425,469,487,512,520,563,593,
		509,481,510,472,473,493,520,595,484,430,453,432,476,497,513,533,577,
		452,446,447,454,590,569,537,538,570,449,519,460,488,511,519,548,592
	};
 	if(IsPlayerInAnyVehicle(playerid))
  	{
   		for(new i = 0; i < MAX_INVALID_NOS_VEHICLES; i++)
     	{
      		if(GetVehicleModel(elc_vehicleid) == ELC_InvalidNosVehicles[i]) return true;
       	}
   	}
   	return false;
}
/*----------------------------------------------------------------------------*/
stock ELC_IsComponentidCompatible(modelid, componentid)
{
    if(componentid == 1025 || componentid == 1073 || componentid == 1074 || componentid == 1075 || componentid == 1076 ||
         componentid == 1077 || componentid == 1078 || componentid == 1079 || componentid == 1080 || componentid == 1081 ||
         componentid == 1082 || componentid == 1083 || componentid == 1084 || componentid == 1085 || componentid == 1096 ||
         componentid == 1097 || componentid == 1098 || componentid == 1087 || componentid == 1086)
         return true;

    switch (modelid)
    {
        case 400: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 401: return (componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 114 || componentid == 1020 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 402: return (componentid == 1009 || componentid == 1009 || componentid == 1010);
        case 404: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
        case 405: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1023 || componentid == 1000);
        case 409: return (componentid == 1009);
        case 410: return (componentid == 1019 || componentid == 1021 || componentid == 1020 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 411: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 412: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 415: return (componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 418: return (componentid == 1020 || componentid == 1021 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016);
        case 419: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 420: return (componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1003);
        case 421: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1016 || componentid == 1000);
        case 422: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007);
        case 426: return (componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003);
        case 429: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 436: return (componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 438: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 439: return (componentid == 1003 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1013);
        case 442: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 445: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 451: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 458: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 466: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 467: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 474: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 475: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 477: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007);
        case 478: return (componentid == 1005 || componentid == 1004 || componentid == 1012 || componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 479: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 480: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 489: return (componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016 || componentid == 1000);
        case 491: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 492: return (componentid == 1005 || componentid == 1004 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1016 || componentid == 1000);
        case 496: return (componentid == 1006 || componentid == 1017 || componentid == 1007 || componentid == 1011 || componentid == 1019 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1003 || componentid == 1002 || componentid == 1142 || componentid == 1143 || componentid == 1020);
        case 500: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 506: return (componentid == 1009);
        case 507: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 516: return (componentid == 1004 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1015 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
        case 517: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 518: return (componentid == 1005 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 526: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 527: return (componentid == 1021 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1015 || componentid == 1017 || componentid == 1007);
        case 529: return (componentid == 1012 || componentid == 1011 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 533: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 534: return (componentid == 1126 || componentid == 1127 || componentid == 1179 || componentid == 1185 || componentid == 1100 || componentid == 1123 || componentid == 1125 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1180 || componentid == 1178 || componentid == 1101 || componentid == 1122 || componentid == 1124 || componentid == 1106);
        case 535: return (componentid == 1109 || componentid == 1110 || componentid == 1113 || componentid == 1114 || componentid == 1115 || componentid == 1116 || componentid == 1117 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1120 || componentid == 1118 || componentid == 1121 || componentid == 1119);
        case 536: return (componentid == 1104 || componentid == 1105 || componentid == 1182 || componentid == 1181 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1184 || componentid == 1183 || componentid == 1128 || componentid == 1103 || componentid == 1107 || componentid == 1108);
        case 540: return (componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
        case 541: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 542: return (componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1015);
        case 545: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 546: return (componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
        case 547: return (componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1016 || componentid == 1003 || componentid == 1000);
        case 549: return (componentid == 1012 || componentid == 1011 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 550: return (componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003);
        case 551: return (componentid == 1005 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003);
        case 555: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 558: return (componentid == 1092 || componentid == 1089 || componentid == 1166 || componentid == 1165 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1168 || componentid == 1167 || componentid == 1088 || componentid == 1091 || componentid == 1164 || componentid == 1163 || componentid == 1094 || componentid == 1090 || componentid == 1095 || componentid == 1093);
        case 559: return (componentid == 1065 || componentid == 1066 || componentid == 1160 || componentid == 1173 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1159 || componentid == 1161 || componentid == 1162 || componentid == 1158 || componentid == 1067 || componentid == 1068 || componentid == 1071 || componentid == 1069 || componentid == 1072 || componentid == 1070 || componentid == 1009);
        case 560: return (componentid == 1028 || componentid == 1029 || componentid == 1169 || componentid == 1170 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1141 || componentid == 1140 || componentid == 1032 || componentid == 1033 || componentid == 1138 || componentid == 1139 || componentid == 1027 || componentid == 1026 || componentid == 1030 || componentid == 1031);
        case 561: return (componentid == 1064 || componentid == 1059 || componentid == 1155 || componentid == 1157 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1154 || componentid == 1156 || componentid == 1055 || componentid == 1061 || componentid == 1058 || componentid == 1060 || componentid == 1062 || componentid == 1056 || componentid == 1063 || componentid == 1057);
        case 562: return (componentid == 1034 || componentid == 1037 || componentid == 1171 || componentid == 1172 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1149 || componentid == 1148 || componentid == 1038 || componentid == 1035 || componentid == 1147 || componentid == 1146 || componentid == 1040 || componentid == 1036 || componentid == 1041 || componentid == 1039);
        case 565: return (componentid == 1046 || componentid == 1045 || componentid == 1153 || componentid == 1152 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1150 || componentid == 1151 || componentid == 1054 || componentid == 1053 || componentid == 1049 || componentid == 1050 || componentid == 1051 || componentid == 1047 || componentid == 1052 || componentid == 1048);
        case 566: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 567: return (componentid == 1129 || componentid == 1132 || componentid == 1189 || componentid == 1188 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1187 || componentid == 1186 || componentid == 1130 || componentid == 1131 || componentid == 1102 || componentid == 1133);
        case 575: return (componentid == 1044 || componentid == 1043 || componentid == 1174 || componentid == 1175 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1176 || componentid == 1177 || componentid == 1099 || componentid == 1042);
        case 576: return (componentid == 1136 || componentid == 1135 || componentid == 1191 || componentid == 1190 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1192 || componentid == 1193 || componentid == 1137 || componentid == 1134);
        case 579: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 580: return (componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
        case 585: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 587: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 589: return (componentid == 1005 || componentid == 1004 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1024 || componentid == 1013 || componentid == 1006 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
        case 600: return (componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1022 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007);
        case 602: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 603: return (componentid == 1144 || componentid == 1145 || componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
    }
    return false;
}
/*----------------------------------------------------------------------------*/
stock ELC_SendCheatWarning(playerid,elc_type,xelc_str[]=" ")
{
	new elc_str[60];
	if(!strlen(xelc_str))format(elc_str,sizeof(elc_str)," ");
	else format(elc_str,sizeof(elc_str),"%s",xelc_str);
	return CallRemoteFunction("OnPlayerCheat", "dds", playerid,elc_type,elc_str);
}
public OnPlayerStateChange(playerid, newstate, oldstate)
{
	/*if(newstate == PLAYER_STATE_DRIVER)
    {
        if(CheatPlayerInfo[playerid][elc_AntiVehicleTelportHack]>=1&&CheatPlayerInfo[playerid][elc_PlayerEnterVeh]!=GetPlayerVehicleID(playerid))
		{
			CheatPlayerInfo[playerid][elc_PlayerEnterTime] = GetTickCount();
			new elc_vehicleid=GetPlayerVehicleID(playerid);
			if(elc_vehicleid!=0)
			{
				CheatPlayerInfo[playerid][elc_PlayerEnterVeh]=elc_vehicleid;
				CheatVehicleInfo[elc_vehicleid][elc_vStatut]=1;
			}
		}
    }*/
    if(oldstate == PLAYER_STATE_ONFOOT && newstate == PLAYER_STATE_PASSENGER && InCopChase[playerid] == true)
    {
    	SetPlayerArmedWeapon(playerid, 0);
    	return 1;
    }
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
		if(IsBeingSpeced[playerid] == 1)
		{
	    	foreach(Player,i)
	    	{
	    		if(spectatorid[i] == playerid)
	    		{
					PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
				}
			}
		}
	}
	if(newstate == PLAYER_STATE_ONFOOT)
	{
		if(IsBeingSpeced[playerid] == 1)
		{
		    foreach(Player,i)
		    {
		    	if(spectatorid[i] == playerid)
		    	{
					PlayerSpectatePlayer(i, playerid);
				}
			}
		}
	}
	CallLocalFunction("ELC_AC_OnPlayerStateChange", "ddd",playerid, newstate, oldstate);
	return 1;
}
/*----------------------------------------------------------------------------*/
#if defined INCLUDE_BASE_MODE
//ALS_SYSTEME --------------------
#if defined _ALS_OnPlayerStateChange
	#undef OnPlayerStateChange
#else
	#define _ALS_OnPlayerStateChange
#endif
#define OnPlayerStateChange ELC_AC_OnPlayerStateChange
forward ELC_AC_OnPlayerStateChange(playerid, newstate, oldstate);
#endif
//ALS_OFF_SYSTEME ----------------
/*----------------------------------------------------------------------------*/
public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	if(IsBeingSpeced[playerid] == 1)
	{
	    foreach(Player,i)
	    {
	    	if(spectatorid[i] == playerid)
	    	{
				SetPlayerInterior(i,GetPlayerInterior(playerid));
				SetPlayerVirtualWorld(i,GetPlayerVirtualWorld(playerid));
			}
		}
	}
	return 1;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z)
{
    if (CheatPlayerInfo[playerid][elc_AntiVehicleTelportHack]==2&&ELC_AC_IsCreatedVehicle(vehicleid))
    {
		new Float:elc_tempposx, Float:elc_tempposy, Float:elc_tempposz;
		GetVehiclePos(vehicleid, elc_tempposx, elc_tempposy, elc_tempposz);
		elc_tempposx = (new_x -elc_tempposx);
		elc_tempposy = (new_y -elc_tempposy);
		elc_tempposz = (new_z -elc_tempposz);
		new Float:XMVDUCM=elc_GetVehicleSpeedXY(vehicleid)+MAX_VEHICLE_DISTANCE_UCM;
		if(CheatVehicleInfo[vehicleid][elc_vStatut]==0&&!((elc_tempposx < XMVDUCM) && (elc_tempposx > -XMVDUCM)) && ((elc_tempposy < XMVDUCM) && (elc_tempposy > -XMVDUCM)) && ((elc_tempposz < XMVDUCM) && (elc_tempposz > -XMVDUCM)))
		{
			SetVehiclePos(vehicleid, elc_tempposx, elc_tempposy, elc_tempposz);
			SetVehicleZAngle(vehicleid,CheatVehicleInfo[vehicleid][elc_vAngle]);
		    if(CheatVehicleInfo[vehicleid][elc_vPossiblePlayerHack]==0)
		    {
	            CheatVehicleInfo[vehicleid][elc_vPossiblePlayerHack]=playerid+1;
	            SaveTime(CheatVehicleInfo[vehicleid][elc_vPossibleHackTime],GetTickCount());
	            CheatPlayerInfo[playerid][elc_PossibleVehicleHack]=vehicleid;
			}
			else
			{
	            CheatVehicleInfo[vehicleid][elc_vPossibleHackTime]=0;
	            if(IsPlayerConnected(CheatVehicleInfo[vehicleid][elc_vPossiblePlayerHack]-1))CheatPlayerInfo[CheatVehicleInfo[vehicleid][elc_vPossiblePlayerHack]-1][elc_PossibleVehicleHack]=0;
	            CheatVehicleInfo[vehicleid][elc_vPossiblePlayerHack]=0;
			}
		    return 0;
		}
		else
		{
		    if(CheatVehicleInfo[vehicleid][elc_vStatut]==1)CheatVehicleInfo[vehicleid][elc_vStatut]=0;
			CheatVehicleInfo[vehicleid][elc_vX]=new_x;
			CheatVehicleInfo[vehicleid][elc_vY]=new_y;
			CheatVehicleInfo[vehicleid][elc_vZ]=new_z;
			GetVehicleZAngle(vehicleid,CheatVehicleInfo[vehicleid][elc_vAngle]);
		}
		if(CheatVehicleInfo[vehicleid][elc_vPossiblePlayerHack]!=0 && playerid!=INVALID_PLAYER_ID && CheatVehicleInfo[vehicleid][elc_vPossiblePlayerHack]!=playerid+1)
		{
			CheatVehicleInfo[vehicleid][elc_vPossibleHackTime]=0;
			if(IsPlayerConnected(CheatVehicleInfo[vehicleid][elc_vPossiblePlayerHack]-1))CheatPlayerInfo[CheatVehicleInfo[vehicleid][elc_vPossiblePlayerHack]-1][elc_PossibleVehicleHack]=0;
			CheatVehicleInfo[vehicleid][elc_vPossiblePlayerHack]=0;
		}
	}
	CallLocalFunction("ELC_AC_OnUnoccupiedVehicle", "dddfff",vehicleid, playerid, passenger_seat, new_x, new_y, new_z);
	return 1;
}
/*----------------------------------------------------------------------------*/
#if defined INCLUDE_BASE_MODE
//ALS_SYSTEME --------------------
#if defined _ALS_OnUnoccupiedVehicleUpdate
	#undef OnUnoccupiedVehicleUpdate
#else
	#define _ALS_OnUnoccupiedVehicleUpdate
#endif
#define OnUnoccupiedVehicleUpdate ELC_AC_OnUnoccupiedVehicle
forward ELC_AC_OnUnoccupiedVehicle(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z);
#endif
//ALS_OFF_SYSTEME ----------------
/*----------------------------------------------------------------------------*/


stock Float:difbetweencoordsxy( Float:x1, Float:y1, Float:x2, Float:y2 ){
    new Float:a = (x2 - x1),Float:b = (y2 - y1),Float:distance;
    distance = floatsqroot( floatpower(a,2) + floatpower(b,2) );
    return distance;}


public OnPlayerDeath(playerid, killerid, reason)
{
	if(InRace[playerid] != -1) 
	{
		LeaveRace(playerid, InRace[playerid]);
	}
	if(!IsPlayerNPC(playerid))
	{
		CheatPlayerInfo[playerid][elc_PlayerEnterTime]=0;
		CheatPlayerInfo[playerid][elc_AntiTeleportHack]=0;
		CheatPlayerInfo[playerid][elc_AntiSpeedHack]=0;
	}	
	if(IsBeingSpeced[playerid] == 1)
	{
		foreach(Player,i)
		{
			if(spectatorid[i] == playerid)
			{
				TogglePlayerSpectating(i,false);
			}
		}
	}
	if(InCopChase[playerid] == true)
	{
		new string[124];
		if(PlayerRole[playerid] == SUSPECT) EndCopChase(COP);
		else if(PlayerRole[playerid] == COP)
		{
			if(ReturnCops() <= 1) EndCopChase(SUSPECT);
			new zone[MAX_ZONE_NAME];
			GetPlayer2DZone(playerid,zone,MAX_ZONE_NAME);
			LeaveCopChase(playerid);
			format(string,sizeof(string), ""EMB_YELLOW"The suspect killed the officer %s, last GPS signal: %s",PlayerName(playerid), zone);
			SendCopChaseMessage(-1,string);
		}
		foreach(new i : Player) { SetPlayerMarkerForPlayer(playerid, i, COLOR_INVISIBLE); }
	}
	CallLocalFunction("ELC_AC_OnPlayerDeath", "ddd", playerid, killerid, reason);
	return 1;
}

/*----------------------------------------------------------------------------*/
#if defined INCLUDE_BASE_MODE
//ALS_SYSTEME --------------------
#if defined _ALS_OnPlayerDeath
	#undef OnPlayerDeath
#else
	#define _ALS_OnPlayerDeath
#endif
#define OnPlayerDeath ELC_AC_OnPlayerDeath
forward ELC_AC_OnPlayerDeath(playerid, killerid, reason);
#endif
//ALS_OFF_SYSTEME ----------------
/*----------------------------------------------------------------------------*/
public OnPlayerEnterCheckpoint(playerid){
	if(trova[playerid]==1){
		DisablePlayerCheckpoint(playerid);
		SendClientMessage(playerid,YELLOW,"You have found the your vehicle.");
		trova[playerid]=0;
		return 1;
	}
	return 1;}
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	illegal_nos_vehicle(playerid);
	if(ispassenger == 1 && InCopChase[playerid] == true)
	{
		SetPlayerArmedWeapon(playerid, 0);
		return 1;
	}
	if(vInfo[vehicleid][vStatusPortiere] == 1)
	{
		new Float:playerposx, Float:playerposy, Float:playerposz;
		GetPlayerPos(playerid, playerposx, playerposy, playerposz);
		/*new engine,lights,doors,alarm,bonnet,boot,objective;
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);*/
		ELC_AC_SetPlayerPos(playerid,playerposx, playerposy, playerposz);
		SendClientMessage(playerid,COLOR_RED,"[INFO:] Door Locked.");
	}
	CheatPlayerInfo[playerid][elc_PlayerEnterVeh]=vehicleid;
	CallLocalFunction("ELC_AC_OnPlayerEnterVehicle", "ddd",playerid, vehicleid, ispassenger);
	return 1;
}
/*----------------------------------------------------------------------------*/
#if defined INCLUDE_BASE_MODE
//ALS_SYSTEME --------------------
#if defined _ALS_OnPlayerEnterVehicle
	#undef OnPlayerEnterVehicle
#else
	#define _ALS_OnPlayerEnterVehicle
#endif
#define OnPlayerEnterVehicle ELC_AC_OnPlayerEnterVehicle
forward ELC_AC_OnPlayerEnterVehicle(playerid, vehicleid, ispassenger);
#endif
//ALS_OFF_SYSTEME ----------------
/*----------------------------------------------------------------------------*/
stock VehicleSpeed(Vehicle){
	new Float:X;
	new Float:Y;
	new Float:Z;
	GetVehicleVelocity(Vehicle,X,Y,Z);
	new Float:Speed;
    Speed = floatsqroot(floatpower(floatabs(X),2.0) + floatpower(floatabs(Y),2.0) + floatpower(floatabs(Z),2.0)) * 204.7;
	return floatround(Speed);}

public OnPlayerDisconnect(playerid, reason)
{
	KillTimer(anticheatv[playerid]);
	trova[playerid]=0;
	PlayerMoney[playerid] = 0;
	PlayerScore[playerid] = 0;
	PlayerCombo[playerid] = 1;
	PlayerPositionX[playerid] = 0.0;
	PlayerPositionY[playerid] = 0.0;
	PlayerPositionZ[playerid] = 0.0;
	KillTimer(PlayerTimerOne[playerid]);
	SavePlayer(playerid);
	for(new vehid=0;vehid<MAX_VEHICLES;vehid++)
	{
		new pname[24];
		GetPlayerName(playerid,pname,sizeof(pname));
		if(strlen(pname)==strlen(vInfo[vehid][vOwner]) && !strcmp(pname,vInfo[vehid][vOwner],false,MAX_PLAYER_NAME) && vInfo[vehid][vComprato] && vInfo[vehid][vvalido])
		{
			vInfo[vehid][vvalido]=0;
			vInfo[vehid][vSpawned]=0;
			SaveVeh(vehid);
			DestroyVehicle(vInfo[vehid][vVSpawnID]);
		}
	}
	if(GetPVarInt(playerid,"inreg") == 1)
	{
		new query[64];
		mysql_format(serverdb, query,sizeof(query),"DELETE FROM users WHERE Username='%e'",PlayerName(playerid));
		mysql_tquery(serverdb, query);
		DeletePVar(playerid,"inreg");
		return 1;
	}
	KillTimer(CheatPlayerInfo[playerid][elc_timer]);
	if(InCopChase[playerid] == true)
	{
		LeaveCopChase(playerid);
		foreach(new i : Player) { SetPlayerMarkerForPlayer(playerid, i, COLOR_INVISIBLE); }
	}
	if(InRace[playerid] != -1) LeaveRace(playerid, InRace[playerid]);
	if(playerid == creatingRace)
	{	
		Loop(r, MAX_RACES)
		{
			if(RaceInfo[r][rCompleted] == 0) startingPos[r] = 0, RaceInfo[r][rActualCheck] = 0;
		}
	}
	switch(reason)
	{
		case 0:
		{
			new string[150];
			format(string,sizeof(string),"%s has left the server. (Timeout/Crash)",PlayerName(playerid));
			SendClientMessageToAll(0xC4C4C4FF, string);		
		}
		case 1:
		{
			new string[150];
			format(string,sizeof(string),"%s has left the server. (Quit)",PlayerName(playerid));
			SendClientMessageToAll(0xC4C4C4FF, string);
		}
		case 2:
		{
			new string[150];
			format(string,sizeof(string),"%s has left the server. (Kick/Ban)",PlayerName(playerid));
			SendClientMessageToAll(0xC4C4C4FF, string);
		}
	}
	if(IsBeingSpeced[playerid] == 1)
	{
		foreach(Player,i)
		{
			if(spectatorid[i] == playerid)
			{
				TogglePlayerSpectating(i,false);
			}
		}
	}
	CallLocalFunction("ELC_AC_OnPlayerDisconnect", "dd", playerid, reason);
	return 1;
}

/*----------------------------------------------------------------------------*/
#if defined INCLUDE_BASE_MODE
//ALS_SYSTEME --------------------
#if defined _ALS_OnPlayerDisconnect
	#undef OnPlayerDisconnect
#else
	#define _ALS_OnPlayerDisconnect
#endif
#define OnPlayerDisconnect ELC_AC_OnPlayerDisconnect
forward ELC_AC_OnPlayerDisconnect(playerid, reason);
#endif
//ALS_OFF_SYSTEME ----------------
/*----------------------------------------------------------------------------*/
stock KickEx(playerid,reason[])
{
	new string[200];
	if(GetPVarInt(playerid, "inban")==1)
	{
		format(string,sizeof(string),"[SVR-BAN:] %s",reason);
		SetPVarInt(playerid, "inban", 0);
	}
	else
	{
		format(string,sizeof(string),"[SVR-KICK:] %s",reason);
	}
	SendClientMessage(playerid,COLOR_RED,string); 
	SetTimerEx("KickTemp",1000,false,"i",playerid);
	return 1;
}

forward KickTemp(playerid);
public KickTemp(playerid){ return Kick(playerid);}

forward DeleteInfo(playerid);
public DeleteInfo(playerid){ return TextDrawHideForPlayer(playerid, InfoBox[playerid]);}

stock IsBike(vehicleid)
{   
	new model = GetVehicleModel(vehicleid);
	if(model == 509 || model == 481 || model == 510)
	{
		return 1;
	}
	return 0;
}

stock BoxInfo(playerid, text[]){
    TextDrawHideForPlayer(playerid, InfoBox[playerid]);
    new string[256];
    format(string, sizeof(string), "%s", text);
    TextDrawSetString(InfoBox[playerid], string);
	TextDrawShowForPlayer(playerid, InfoBox[playerid]);
	SetTimerEx("DeleteInfo", 3000, 0, "d", playerid);
	return 1;}

stock CreaVeicolo(ownerid,vehicleid,pre_plate[],vpricex)
{
	new Float:x, Float:y, Float:z, Float:angle, plate[128],modelid,querystring[150],
	pname[MAX_PLAYER_NAME];
	GetVehiclePos(vehicleid, x, y, z);
	GetVehicleZAngle(vehicleid, angle);
	modelid=GetVehicleModel(vehicleid);
	GetPlayerName(ownerid, pname, sizeof (pname));
	strmid(vInfo[vehicleid][vOwner],pname, 0, strlen(pname), MAX_PLAYER_NAME);
	vInfo[vehicleid][vComprato] = 1;
	vInfo[vehicleid][vvalido] = 1;
	format(plate,sizeof(plate),"%s%d",pre_plate,random(99999-10000));
	strmid(vInfo[vehicleid][vTarga], plate, 0, strlen(plate), 255);
	vInfo[vehicleid][vid] = modelid;
	vInfo[vehicleid][vSpawn][0] = x;
	vInfo[vehicleid][vSpawn][1] = y;
	vInfo[vehicleid][vSpawn][2] = z;
	ChangeVehiclePaintjob(vInfo[vehicleid][vPaintJob], 24);
	vInfo[vehicleid][vCSpawn][0] = x;
	vInfo[vehicleid][vCSpawn][1] = y;
	vInfo[vehicleid][vCSpawn][2] = z;
	vInfo[vehicleid][vCSpawn][3] = angle;
	vInfo[vehicleid][vSpawned] = 1;
	vInfo[vehicleid][vStatusMotore] = ENGINE_STARTED;
	vInfo[vehicleid][vHealth] = 999.0;
	for(new i=0;i<14;i++) { vInfo[vehicleid][vMod][i] = 0; }
	vInfo[vehicleid][vVSpawnID] = vehicleid;
	SetVehicleNumberPlate(vehicleid,vInfo[vehicleid][vTarga]);	
	mysql_format(serverdb, querystring, sizeof(querystring), "INSERT INTO pveicoli (vproprietario,vmodel,vcolor1,vcolor2,vtarga) VALUES ('%e',%d,%d,%d,'%e')",pname,modelid,vInfo[vehicleid][vColor1],vInfo[vehicleid][vColor2],vInfo[vehicleid][vTarga]);
	mysql_tquery(serverdb, querystring, "OnVehicleCreated", "d", vehicleid);
	printf("Owner: %s, ID %d, Plate: %s, Costo: %d",vInfo[vehicleid][vOwner],vInfo[vehicleid][dbid],vInfo[vehicleid][vTarga],vpricex);
	SetVehicleToRespawn(vehicleid);
	SetVehicleHealth(vInfo[vehicleid][vVSpawnID],999.0);
	return 1;
}

stock InNearConc(playerid,Float:r)
{
	for(new i = 0; i < sizeof(cInfo); i++)
	{
        if(IsPlayerInRangeOfPoint(playerid,r,cInfo[i][PosConc][0],cInfo[i][PosConc][1],cInfo[i][PosConc][2])) return i;
    }
    return 0;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if((newkeys & KEY_FIRE) && (oldkeys & KEY_CROUCH) && !((oldkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) || (oldkeys & KEY_FIRE) && (newkeys & KEY_CROUCH) && !((newkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) ) 
	{
		switch(GetPlayerWeapon(playerid))
		{
			case 23..25, 27, 29..34, 41: 
			{
				if(Ammo[playerid][GetPlayerWeapon(playerid)] > GetPlayerAmmo(playerid))
				{
					OnPlayerCBug(playerid);
				}
				return 1;
			}
		}
	}
	if(CheckCrouch[playerid] == 1) 
	{
		switch(WeaponIDD[playerid])
		{
			case 23..25, 27, 29..34, 41:
			{
				if((newkeys & KEY_CROUCH) && !((newkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK ) 
				{
					if(Ammo[playerid][GetPlayerWeapon(playerid)] > GetPlayerAmmo(playerid)) 
					{
						OnPlayerCBug(playerid);
					}
				}
			}
		}
	}
	else if(((newkeys & KEY_FIRE) && (newkeys & KEY_HANDBRAKE) && !((newkeys & KEY_SPRINT) || (newkeys & KEY_JUMP))) ||
		(newkeys & KEY_FIRE) && !((newkeys & KEY_SPRINT) || (newkeys & KEY_JUMP)) ||
		(NotMoving[playerid] && (newkeys & KEY_FIRE) && (newkeys & KEY_HANDBRAKE)) ||
		(NotMoving[playerid] && (newkeys & KEY_FIRE)) ||
		(newkeys & KEY_FIRE) && (oldkeys & KEY_CROUCH) && !((oldkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) ||
		(oldkeys & KEY_FIRE) && (newkeys & KEY_CROUCH) && !((newkeys & KEY_FIRE) || (newkeys & KEY_HANDBRAKE)) )
	{
		SetTimerEx("CrouchCheck", 3000, 0, "d", playerid);
		CheckCrouch[playerid] = 1;
		WeaponIDD[playerid] = GetPlayerWeapon(playerid);
		Ammo[playerid][GetPlayerWeapon(playerid)] = GetPlayerAmmo(playerid);
		return 1;
	}
	if(newkeys & KEY_SUBMISSION && GetPlayerState(playerid)==PLAYER_STATE_DRIVER)
	{
		new vehicleids = GetPlayerVehicleID(playerid);
		new engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(vehicleids, engine, lights, alarm, doors, bonnet, boot, objective);
		if(lights==1){SetVehicleParamsEx(vehicleids, engine, 0, alarm, doors, bonnet, boot, objective);
		}
		else{SetVehicleParamsEx(vehicleids, engine, 1, alarm, doors, bonnet, boot, objective);
		}
		return 1;
	}
	if(RELEASED(KEY_YES) && InCopChase[playerid] == true && PlayerRole[playerid] == COP)
	{
		switch(Blip[playerid])
		{
			case false:
			{
				Blip[playerid] = true;
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have enabled your map blip, be sure you are behind the suspect!");
				PlayerTextDrawSetString(playerid, P_CopChaseTD[playerid][1], "Map Blip: Enabled");
				foreach(new i : Player)
				{
					if(InCopChase[i] == false || PlayerRole[i] == SUSPECT) continue;
					SetPlayerMarkerForPlayer(i, playerid, COLOR_BLUE);
				}
				return 1;
			}
			case true:
			{
				Blip[playerid] = false;
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have disabled your map blip.");
				PlayerTextDrawSetString(playerid, P_CopChaseTD[playerid][1], "Map Blip: Disabled");
				foreach(new i : Player)
				{
					if(InCopChase[i] == false || PlayerRole[i] == SUSPECT) continue;
					SetPlayerMarkerForPlayer(i, playerid, COLOR_INVISIBLE);
				}	
				return 1;			
			}
		}
		return 1;
	}
	if(RELEASED(KEY_SECONDARY_ATTACK))
	{
		if(GetPlayerDealership(playerid) != -1) 
		{
			new did = GetPlayerDealership(playerid);
			new string[450];
			strcpy(string, "Vehicle Name\tPrice\n", 40);
			for(new i; i < MAX_DEALERSHIP_VEHICLES; i++)
			{
				printf("DID: %d, ModelID: %d, Price: %d",did,DealerVehicles[did][i][dModelID],DealerVehicles[did][i][dPrice]);
				if(DealerVehicles[did][i][dPrice] == 0) continue;
				format(string,sizeof(string), ""EMB_WHITE"%s%s\t"EMB_DGREEN"%d$\n",string,GetVehicleModelName(DealerVehicles[did][i][dModelID]),DealerVehicles[did][i][dPrice]);
				printf("%d, %s, %d$",DealerVehicles[did][i][dModelID],GetVehicleModelName(DealerVehicles[did][i][dModelID]),DealerVehicles[did][i][dPrice]);
			}
			new cap[30];
			format(cap,sizeof(cap), "%s [%s]",DealershipInfo[did][dName],DealershipInfo[did][dTag]);
			Dialog_Show(playerid, Dealership, DIALOG_STYLE_TABLIST_HEADERS, cap, string, "Buy", "Exit");
			return 1;
		}
	}
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if(IsPlayerNPC(playerid)) return 1; 
	regchat[playerid] = true; 
	TogglePlayerSpectating(playerid,true);
	InterpolateCameraPos(playerid, 1547.274414, -1613.553710, 46.971912, 1530.361938, -1772.224853, 48.073074, 6000, 1);
	InterpolateCameraLookAt(playerid, 1545.154541, -1616.614868, 45.510635, 1528.174194, -1768.980224, 47.244739, 6000, 1);
	InterpolateCameraPos(playerid, 1530.361938, -1772.224853, 48.073074, 1464.212402, -1743.486816, 37.004329, 6000, 1);
	InterpolateCameraLookAt(playerid, 1528.174194, -1768.980224, 47.244739, 1465.449951, -1739.948120, 35.609279, 6000, 1);
	InterpolateCameraPos(playerid, 1464.212402, -1743.486816, 37.004329, 1468.572143, -1614.406250, 22.447933, 6000, 1);
	InterpolateCameraLookAt(playerid, 1465.449951, -1739.948120, 35.609279, 1469.807739, -1618.174072, 21.921340, 6000, 1);
	new query[90];
	mysql_format(serverdb, query,sizeof(query),"SELECT `Password`,`Salt` FROM users WHERE `Username` = '%e'",PlayerName(playerid));
	mysql_tquery(serverdb, query, "OnPlayerLoad", "d", playerid);
	return 1;
}

forward OnPlayerLoad(playerid);
public OnPlayerLoad(playerid)
{
	new count, string[145];
	cache_get_row_count(count);
	if(count != 0)
	{
		format(string,sizeof(string), ""EMB_WHITE"Welcome back "EMB_ORANGE"%s"EMB_WHITE" to %s",PlayerName(playerid),SERVER_NAME);
		Dialog_Show(playerid, Login, DIALOG_STYLE_PASSWORD, "Login", string, "Login","Quit");
		cache_get_value_index(0, 0, PlayerInfo[playerid][pPsw]);
		cache_get_value_index(0, 1, PlayerInfo[playerid][pSalt]);
		return 1;
	}
	else
	{
		format(string,sizeof(string), ""EMB_WHITE"Welcome "EMB_ORANGE"%s"EMB_WHITE" to %s",PlayerName(playerid),SERVER_NAME);
		Dialog_Show(playerid, Register, DIALOG_STYLE_PASSWORD, "Register", string, "Register","Quit");		
	}
	return 1;
}

stock PlayerName(playerid)
{
	new No[MAX_PLAYER_NAME];
	GetPlayerName(playerid,No,MAX_PLAYER_NAME);
	return No;
}
public OnPlayerText(playerid, text[])
{
	new string[256];
	if(regchat[playerid] == true)
	{
		SendClientMessage(playerid, COLOR_RED,"You have to Login to use the chat.");
		return 0;
	}
	new lunghezzarigo = strlen(text);
	if(lunghezzarigo > 60)
	{
		new frase1[90];
		strmid(frase1, text, 0, 61);
		new frase2[90];
		strmid(frase2, text, 61, lunghezzarigo);
		if(PlayerInfo[playerid][pA]>=1)
		{
			format(string, sizeof(string),"%s"EMB_WHITE" %s [%d] say:{FFFFFF} %s..",RankStaff(playerid),PlayerName(playerid), playerid, frase1);
			SendClientMessageToAll(-1,string);
		}
		else
		{
			format(string, sizeof(string),"%s [%d] say: %s..",PlayerName(playerid), playerid, frase1);
			SendClientMessageToAll(-1,string);
			format(string, sizeof(string), "..%s", frase2);
			SendClientMessageToAll(-1,string);
			printf(string);
			return 0;
		}
	}
	if(PlayerInfo[playerid][pA]>=1)
	{
		format(string, sizeof(string), "%s"EMB_WHITE" %s [%d] say:{FFFFFF} %s",RankStaff(playerid),PlayerName(playerid),playerid,text);
		SendClientMessageToAll(-1,string);
	}
	else
	{
		format(string, sizeof(string), "%s [%d] say: %s",PlayerName(playerid),playerid,text);
		SendClientMessageToAll(-1,string);	
	}
	return 0;
}

public OnGameModeExit()
{
	for(new Player; Player < GetMaxPlayers(); Player++){
	TextDrawDestroy(ServerTextDrawThree[Player]);
	TextDrawDestroy(ServerTextDrawFive[Player]);}
	KillTimer(ServerTimerOne);
	KillTimer(ServerTimerTwo);
	KillTimer(CheatServerInfo[elc_TimerTick]);
	CallLocalFunction("ELC_AC_OnGameModeExit", " ");
	return 1;
}
/*----------------------------------------------------------------------------*/
#if defined INCLUDE_BASE_MODE
//ALS_SYSTEME --------------------
#if defined _ALS_OnGameModeExit
	#undef OnGameModeExit
#else
	#define _ALS_OnGameModeExit
#endif
#define OnGameModeExit ELC_AC_OnGameModeExit
forward ELC_AC_OnGameModeExit();
#endif
//ALS_OFF_SYSTEME ----------------
/*----------------------------------------------------------------------------*/

forward TimeServer();
public TimeServer()
{
	new hour,minute,seconds;
	gettime(hour,minute,seconds);
	SetWorldTime(hour+3);
	if(hour<5 && hour>23 || hour==0) SetWorldTime(hour);
	return 1;
}

stock GetVehicleRotation(vehicleid,&Float:rx,&Float:ry,&Float:rz)
{
	new Float:qw,Float:qx,Float:qy,Float:qz;
	GetVehicleRotationQuat(vehicleid,qw,qx,qy,qz);
	rx = asin(2*qy*qz-2*qx*qw);
	ry = -atan2(qx*qz+qy*qw,0.5-qx*qx-qy*qy);
	rz = -atan2(qx*qy+qz*qw,0.5-qx*qx-qz*qz);
}

public OnGameModeInit()
{
	serverdb = mysql_connect(DBHOST,DBUSER,DBPASS,DBNAME);
	if(serverdb) print("[MySQL] Connection successful"); else print("[MySQL] Connection failed");
	ShowPlayerMarkers(1);
	UsePlayerPedAnims();
	BlockGarages(true, GARAGE_TYPE_ALL, "DISABLED");
    DisableInteriorEnterExits();
	SendRconCommand("hostname Copchase Mode");
	SetGameModeText("CopChase Mode Alpha");
	mysql_tquery(serverdb, "SELECT * FROM dealerships", "LoadDealerships");
	SetTimer("TimeServer",1800000,true);
	new hour,minute,seconds;
	gettime(hour,minute,seconds);
	SetWorldTime(hour+3);
	if(hour<5 && hour>23 || hour==0) SetWorldTime(hour);

	G_CopChaseTD[0] = TextDrawCreate(1.000015, 275.463836, "Suspect:_Tsukiko_Tsutsukakushi");
	TextDrawLetterSize(G_CopChaseTD[0], 0.152000, 1.147852);
	TextDrawTextSize(G_CopChaseTD[0], 85.000000, 0.000000);
	TextDrawAlignment(G_CopChaseTD[0], 1);
	TextDrawColor(G_CopChaseTD[0], -16776961);
	TextDrawUseBox(G_CopChaseTD[0], 1);
	TextDrawBoxColor(G_CopChaseTD[0], 156);
	TextDrawSetShadow(G_CopChaseTD[0], 0);
	TextDrawSetOutline(G_CopChaseTD[0], 1);
	TextDrawBackgroundColor(G_CopChaseTD[0], 255);
	TextDrawFont(G_CopChaseTD[0], 1);
	TextDrawSetProportional(G_CopChaseTD[0], 1);
	TextDrawSetShadow(G_CopChaseTD[0], 0);

	G_CopChaseTD[1] = TextDrawCreate(42.466678, 302.765441, "Cops remaning: 13");
	TextDrawLetterSize(G_CopChaseTD[1], 0.152000, 1.147852);
	TextDrawTextSize(G_CopChaseTD[1], 0.000000, 85.000000);
	TextDrawAlignment(G_CopChaseTD[1], 2);
	TextDrawColor(G_CopChaseTD[1], 16777215);
	TextDrawUseBox(G_CopChaseTD[1], 1);
	TextDrawBoxColor(G_CopChaseTD[1], 156);
	TextDrawSetShadow(G_CopChaseTD[1], 0);
	TextDrawSetOutline(G_CopChaseTD[1], 1);
	TextDrawBackgroundColor(G_CopChaseTD[1], 255);
	TextDrawFont(G_CopChaseTD[1], 1);
	TextDrawSetProportional(G_CopChaseTD[1], 1);
	TextDrawSetShadow(G_CopChaseTD[1], 0);

	G_CopChaseTD[2] = TextDrawCreate(42.466678, 316.466278, "Time remaning: 10 min");
	TextDrawLetterSize(G_CopChaseTD[2], 0.152000, 1.147852);
	TextDrawTextSize(G_CopChaseTD[2], 0.000000, 85.000000);
	TextDrawAlignment(G_CopChaseTD[2], 2);
	TextDrawColor(G_CopChaseTD[2], -1);
	TextDrawUseBox(G_CopChaseTD[2], 1);
	TextDrawBoxColor(G_CopChaseTD[2], 156);
	TextDrawSetShadow(G_CopChaseTD[2], 0);
	TextDrawSetOutline(G_CopChaseTD[2], 1);
	TextDrawBackgroundColor(G_CopChaseTD[2], 255);
	TextDrawFont(G_CopChaseTD[2], 1);
	TextDrawSetProportional(G_CopChaseTD[2], 1);
	TextDrawSetShadow(G_CopChaseTD[2], 0);
	
	new race = CreateRace("SF Drift", 300, 562);
	AddRaceStarting(race, -2781.2053,-487.3249,6.9202,234.6942);
	AddRaceStarting(race, -2786.6694,-483.4444,6.9177,234.4708);
	AddRaceStarting(race, -2784.5552,-490.9979,6.9144,234.5402);
	AddRaceStarting(race, -2789.2356,-487.6652,6.9146,234.5359);
	AddCheckpointToRace(race, -2748.8958,-513.2340,7.2582);
	AddCheckpointToRace(race, -2678.8193,-519.9114,17.0670);
	AddCheckpointToRace(race, -2323.8044,-446.5142,79.3216);
	AddCheckpointToRace(race, -2627.6997,-495.7686,69.8023);
	AddCheckpointToRace(race, -2423.0232,-609.4390,132.1475);
	AddCheckpointToRace(race, -2346.2388,-787.2026,93.7021);
	AddCheckpointToRace(race, -2219.7285,-920.3724,43.4926);
	AddCheckpointToRace(race, -1917.3639,-1370.6191,39.7622);
	race = CreateRace("LS Race", 300, 411);
	AddRaceStarting(race, 1702.9509,-609.1946,38.7189,176.7151);
	AddRaceStarting(race, 1706.0251,-615.1641,39.1484,179.1418);
	AddRaceStarting(race, 1703.3243,-602.4233,38.2382,176.7903);
	AddRaceStarting(race, 1706.1653,-605.8569,38.4702,179.1326);
	AddRaceStarting(race, 1706.2679,-599.0858,38.0377,179.1314);
	AddRaceStarting(race, 1703.6525,-596.8486,37.9123,176.7873);
    AddCheckpointToRace(race, 1692.569946, -723.126037, 48.900508);
    AddCheckpointToRace(race, 1652.880004, -817.668334, 57.524845);
    AddCheckpointToRace(race, 1605.353881, -881.411804, 53.732391);
    AddCheckpointToRace(race, 1539.825439, -922.278015, 43.056083);
    AddCheckpointToRace(race, 1461.724975, -940.698120, 35.791889);
    AddCheckpointToRace(race, 1403.331054, -941.417907, 34.747589);
    AddCheckpointToRace(race, 1392.661621, -882.348999, 39.213245);
    AddCheckpointToRace(race, 1465.932739, -865.940429, 55.070766);
    AddCheckpointToRace(race, 1512.892944, -797.726623, 73.608940);
    AddCheckpointToRace(race, 1476.592773, -764.863769, 91.092216);
    AddCheckpointToRace(race, 1457.034545, -720.671813, 91.886367);
    AddCheckpointToRace(race, 1338.306518, -698.574401, 91.680290);
    AddCheckpointToRace(race, 1155.694335, -762.598022, 107.170852);
    AddCheckpointToRace(race, 1037.425781, -782.354858, 103.803581);
    AddCheckpointToRace(race, 944.082031, -823.647094, 95.165565);
    AddCheckpointToRace(race, 838.899108, -870.125427, 68.854980);
    AddCheckpointToRace(race, 782.362426, -907.054016, 56.233585);
    AddCheckpointToRace(race, 676.304748, -1057.787963, 49.234329);
    AddCheckpointToRace(race, 546.687988, -1158.329833, 54.421894);
    AddCheckpointToRace(race, 442.335571, -1189.781250, 67.419334);
    AddCheckpointToRace(race, 399.630310, -1174.796752, 78.225868);
    AddCheckpointToRace(race, 287.595764, -1227.318481, 74.894096);
    AddCheckpointToRace(race, 230.168182, -1276.778564, 64.179939);
    AddCheckpointToRace(race, 243.446228, -1327.960083, 52.253746);
    AddCheckpointToRace(race, 212.957321, -1365.910888, 49.981910);
    AddCheckpointToRace(race, 156.897445, -1428.196655, 39.155746);
    AddCheckpointToRace(race, 112.251525, -1485.543457, 14.808308);
    AddCheckpointToRace(race, 167.971176, -1530.873657, 11.934063);
    AddCheckpointToRace(race, 230.456497, -1443.309692, 12.917514);
    AddCheckpointToRace(race, 338.681091, -1381.437988, 13.922136);
    AddCheckpointToRace(race, 471.116241, -1298.085449, 15.019657);
    AddCheckpointToRace(race, 539.320739, -1241.989990, 16.362131);
    AddCheckpointToRace(race, 634.960266, -1259.193481, 16.687885);
    AddCheckpointToRace(race, 635.698059, -1334.740722, 13.114221);
    AddCheckpointToRace(race, 633.734802, -1491.675170, 14.342875);
    AddCheckpointToRace(race, 635.601684, -1616.577270, 15.354584);
    AddCheckpointToRace(race, 632.403259, -1718.967895, 13.681066);
    AddCheckpointToRace(race, 759.028747, -1766.696166, 12.587768);
    AddCheckpointToRace(race, 881.049072, -1770.948730, 13.109845);
    AddCheckpointToRace(race, 1008.124572, -1795.744262, 13.775837);
    AddCheckpointToRace(race, 1156.595825, -1852.637329, 13.121710);
    AddCheckpointToRace(race, 1312.552978, -1831.018432, 13.109981);
    AddCheckpointToRace(race, 1311.227416, -1670.582519, 13.109985);
    AddCheckpointToRace(race, 1337.795532, -1493.360961, 13.108355);
    AddCheckpointToRace(race, 1356.297363, -1256.863037, 13.106974);
    AddCheckpointToRace(race, 1363.745239, -1076.934936, 24.951122);
    AddCheckpointToRace(race, 1473.232055, -1031.099243, 23.383405);
    AddCheckpointToRace(race, 1658.844116, -1026.858276, 23.625595);
    AddCheckpointToRace(race, 1894.228637, -1044.847290, 23.408243);
    AddCheckpointToRace(race, 2039.885620, -1074.727416, 24.357799);
    AddCheckpointToRace(race, 2176.282226, -1143.813720, 24.630598);
    AddCheckpointToRace(race, 2168.373535, -1290.851318, 23.547401);
    AddCheckpointToRace(race, 2271.814941, -1299.705200, 23.553785);
    AddCheckpointToRace(race, 2331.828125, -1299.506225, 23.808448);
    AddCheckpointToRace(race, 2371.086181, -1352.059692, 23.562322);
    AddCheckpointToRace(race, 2343.587890, -1409.425415, 23.545507);
    AddCheckpointToRace(race, 2342.461669, -1513.188110, 23.564939);
    AddCheckpointToRace(race, 2300.728759, -1565.118164, 14.730288);
    AddCheckpointToRace(race, 2164.391357, -1532.709472, 2.032401);
    AddCheckpointToRace(race, 2042.412719, -1503.038574, 3.047770);
    AddCheckpointToRace(race, 1948.191284, -1518.647460, 3.063310);
    AddCheckpointToRace(race, 1851.070434, -1551.060546, 12.822020);
    AddCheckpointToRace(race, 1818.930175, -1665.781372, 13.110196);
    AddCheckpointToRace(race, 1907.059204, -1754.055419, 13.109704);
    AddCheckpointToRace(race, 2023.382446, -1753.830566, 13.109979);
    AddCheckpointToRace(race, 2189.188476, -1699.546752, 13.243209);
    AddCheckpointToRace(race, 2245.878662, -1653.323486, 15.011875);
    AddCheckpointToRace(race, 2381.359863, -1660.972656, 13.109755);

    race = CreateRace("LV Round",300);
    AddRaceStarting(race, 2040.4686,1343.8420,10.4191,179.8863);
    AddRaceStarting(race, 2045.2606,1343.8326,10.4191,179.8863);
    AddRaceStarting(race, 2051.0127,1343.8215,10.4191,179.8863);
    AddRaceStarting(race, 2051.0286,1351.9767,10.4191,179.8863);
    AddRaceStarting(race, 2046.1703,1351.9865,10.4191,179.8863);
    AddRaceStarting(race, 2040.6595,1351.9977,10.4191,179.8863);
    AddCheckpointToRace(race, 2056.6104,1192.2096,10.4219);
    AddCheckpointToRace(race, 2058.2214,1644.9957,10.4226);
    AddCheckpointToRace(race, 2047.6213,1343.2190,10.4166);
    AddCheckpointToRace(race, 2048.7297,1342.4623,10.6719);
    AddCheckpointToRace(race, 2056.6104,1192.2096,10.4219);
    AddCheckpointToRace(race, 2058.2214,1644.9957,10.4226);
    AddCheckpointToRace(race, 2047.6213,1343.2190,10.4166);
    AddCheckpointToRace(race, 2048.7297,1342.4623,10.6719);
    AddCheckpointToRace(race, 2056.6104,1192.2096,10.4219);
    AddCheckpointToRace(race, 2058.2214,1644.9957,10.4226);
    AddCheckpointToRace(race, 2047.6213,1343.2190,10.4166);
	CheatServerInfo[elc_TimerTick]=SetTimer("TimeUpdate", TIME_GRANULITY, true);
	CallLocalFunction("ELC_AC_OnGameModeInit", " ");
	return 1;
}
/*----------------------------------------------------------------------------*/
#if defined INCLUDE_BASE_MODE
//ALS_SYSTEME --------------------
#if defined _ALS_OnGameModeInit
	#undef OnGameModeInit
#else
	#define _ALS_OnGameModeInit
#endif
#define OnGameModeInit ELC_AC_OnGameModeInit
forward ELC_AC_OnGameModeInit();
#endif
//ALS_OFF_SYSTEME ----------------
/*----------------------------------------------------------------------------*/
CreateRace(Name[], Timeout, Veh = -1)
{
	strcpy(RaceInfo[createdRace][rName], Name, 32);
	strcpy(RaceInfo[createdRace][rCreator], "Server", MAX_PLAYER_NAME);
	RaceInfo[createdRace][rTimeout] = Timeout;
	RaceInfo[createdRace][rVeh] = Veh;
	RaceInfo[createdRace][rStarted] = false;
	RaceInfo[createdRace][rJoinable] = false;
	RaceInfo[createdRace][rCompleted] = 1;
	return createdRace, createdRace++;
}

AddRaceStarting(raceid, Float:sx, Float:sy, Float:sz, Float:sa)
{
	RaceInfo[raceid][rStartingX][startingPos[raceid]] = sx;
	RaceInfo[raceid][rStartingY][startingPos[raceid]] = sy;
	RaceInfo[raceid][rStartingZ][startingPos[raceid]] = sz;
	RaceInfo[raceid][rStartingA][startingPos[raceid]] = sa;
	return startingPos[raceid], startingPos[raceid]++;
}

AddCheckpointToRace(raceid, Float:ChX, Float:ChY, Float:ChZ)
{
	new freeslot = RaceInfo[raceid][rActualCheck];
	RaceInfo[raceid][rCheckX][freeslot] = ChX;
	RaceInfo[raceid][rCheckY][freeslot] = ChY;
	RaceInfo[raceid][rCheckZ][freeslot] = ChZ;
	return RaceInfo[raceid][rActualCheck], RaceInfo[raceid][rActualCheck]++;
}

OpenRaceLobby(raceid)
{
	new rstr[144];
	switch(RaceInfo[raceid][rVeh])
	{
		case -1:
		{
			format(rstr, sizeof(rstr), ""EMB_GREEN"[INFO:]"EMB_WHITE" The race "EMB_ORANGE"%s"EMB_WHITE" will start in "EMB_YELLOW"%d"EMB_WHITE" seconds!",RaceInfo[raceid][rName],RACE_WAIT);
			SendClientMessageToAll(-1, rstr);
			format(rstr, sizeof(rstr),  ""EMB_GREEN"[INFO:]"EMB_WHITE" Type "EMB_RED"/joinrace %d"EMB_WHITE" to join. (All Vehicles Allowed)",raceid);
			SendClientMessageToAll(-1, rstr);
		}
		case 0:
		{
			format(rstr, sizeof(rstr), ""EMB_GREEN"[INFO:]"EMB_WHITE" The race "EMB_ORANGE"%s"EMB_WHITE" will start in "EMB_YELLOW"%d"EMB_WHITE" seconds!",RaceInfo[raceid][rName],RACE_WAIT);
			SendClientMessageToAll(-1, rstr);
			format(rstr, sizeof(rstr),  ""EMB_GREEN"[INFO:]"EMB_WHITE" Type "EMB_RED"/joinrace %d"EMB_WHITE" to join. (Onfoot race)",raceid);
			SendClientMessageToAll(-1, rstr);
		}
		default:
		{
			format(rstr, sizeof(rstr), ""EMB_GREEN"[INFO:]"EMB_WHITE" The race "EMB_ORANGE"%s"EMB_WHITE" will start in "EMB_YELLOW"%d"EMB_WHITE" seconds!",RaceInfo[raceid][rName],RACE_WAIT);
			SendClientMessageToAll(-1, rstr);
			format(rstr, sizeof(rstr),  ""EMB_GREEN"[INFO:]"EMB_WHITE" Type "EMB_RED"/joinrace %d"EMB_WHITE" to join. ("EMB_ORANGE"%s"EMB_WHITE" only race)",raceid,VehicleNames[RaceInfo[raceid][rVeh]-400]);
			SendClientMessageToAll(-1, rstr);
		}
	}
	CD[raceid] = 20;
	CDTimer[raceid] = SetTimerEx("CountDown",1000,true,"d",raceid);
	RaceInfo[raceid][rJoinable] = true;
	return 1;
}

Dialog:Login(playerid, response, listitem, inputtext[])
{
	if(!response) return KickEx(playerid,"You refused the login and got kicked.");
	new hashpass[65];
	SHA256_PassHash(inputtext, PlayerInfo[playerid][pSalt], hashpass, sizeof(hashpass));
	if(strcmp(hashpass, PlayerInfo[playerid][pPsw]))
	{
		if(PlayerInfo[playerid][pAttempts] >= MAX_LOGIN_ATTEMPTS) KickEx(playerid, "You failed the login too many times");
		PlayerInfo[playerid][pAttempts]++;
		new string[145];
		format(string,sizeof(string), "Wrong Password!\nAttempts %d/%d",PlayerInfo[playerid][pAttempts],MAX_LOGIN_ATTEMPTS);
		Dialog_Show(playerid, Login, DIALOG_STYLE_PASSWORD, "Login", string, "Accept",  "Exit");
		return 1;
	}
	else
	{
		new query[80];
		mysql_format(serverdb, query,sizeof(query), "SELECT * From users WHERE username = '%e'", PlayerName(playerid));
		mysql_tquery(serverdb, query, "LoadPlayer","d",playerid);
		return 1;
	}
}

Dialog:SpawnSelection(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	new cap[24],string[90];
	switch(PlayerInfo[playerid][sS])
	{
		case 0: 
		{
			strcpy(cap, ""EMB_GREEN"Enabled", 24);
			PlayerInfo[playerid][sS] = 1;
		}
		case 1:
		{
			strcpy(cap, ""EMB_RED"Disabled", 24);
			PlayerInfo[playerid][sS] = 0;			
		}
	}
	format(string,sizeof(string), ""EMB_GREEN"[INFO:]"EMB_WHITE" You have %s"EMB_WHITE" the static spawn",cap);
	SendClientMessage(playerid, -1, string);
	return 1;
}

Dialog:Register(playerid, response, listitem, inputtext[])
{
	if(!response) return KickEx(playerid,"You refused the login and got kicked."); 
	new query[300],plrIP[16],Year, Month, Day,lol[15],salt[11],hashpass[65];
	regchat[playerid] = true; 
	GetPlayerIp(playerid, plrIP, sizeof(plrIP));
	getdate(Year, Month, Day);
	format(lol, sizeof(lol),"%02d-%02d-%d", Day, Month, Year);
	for(new i = 0; i < 10; i++)
	{
		salt[i] = random(79) + 47;
	}
	salt[10] = 0;
	SHA256_PassHash(inputtext, salt, hashpass, sizeof(hashpass));
	mysql_format(serverdb, query,sizeof(query), "INSERT INTO users (Username, Salt, Password, Ip, DateReg, DateLog) VALUES('%e','%e','%e','%e','%e','%e')",PlayerName(playerid),salt,hashpass,plrIP,lol,lol);
	mysql_tquery(serverdb, query);
	print(query);
	SetPVarInt(playerid,"inreg",1);
	SetPlayerSkin(playerid, random(300));
	SetTimerEx("SpawnUnity", 3000, 0, "d", playerid);
	return 1;
}

Dialog:RaceDialog(playerid, response, listitem, inputtext[])
		{
			if(!response) return 1;
			if(RaceInfo[listitem][rJoinable] == false && RaceInfo[listitem][rStarted] == false && InRace[playerid] == -1) OpenRaceLobby(listitem);
			JoinRace(playerid, listitem);
			return 1;
		}

Dialog:RaceTimeout(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	if(!IsNumeric(inputtext)) return Dialog_Show(playerid, RaceTimeout, DIALOG_STYLE_INPUT, "Race Vehicle", "Only Numbers!","Confirm","Exit");
	if(strval(inputtext) <= 299) return Dialog_Show(playerid,RaceTimeout, DIALOG_STYLE_INPUT, "Race Timeout", "To avoid AFK people blocking a race, you must insert a timeout value\nPlease insert a timeout value in seconds bigger than 299 seconds.", "Confirm", "Exit");
	RaceInfo[createdRace][rTimeout] = strval(inputtext);
	new rstr[96];
	format(rstr,sizeof(rstr), ""EMB_GREEN"[INFO:]"EMB_WHITE" The Timeout timer is: "EMB_ORANGE"%d"EMB_WHITE" seconds!",RaceInfo[createdRace][rTimeout]);
	SendClientMessage(playerid, -1, rstr);
	Dialog_Show(playerid, RaceVehSel, DIALOG_STYLE_INPUT, "Race Vehicle", "Do you intend to have a specific vehicle to be used in the race?\nIf so please insert the vehicle id in the box below\nIf you don't want any vehicle in particular to be used, please type 0", "Confirm", "Exit");
	return 1;
}

Dialog:RaceVehSel(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	if(!IsNumeric(inputtext)) return Dialog_Show(playerid, RaceVehSel, DIALOG_STYLE_INPUT, "Race Vehicle", "Only Numbers!","Confirm","Exit");
	if(strval(inputtext) <= 0) RaceInfo[createdRace][rVeh] = -1;
	else if(strval(inputtext) < 400 || strval(inputtext) > 611) return Dialog_Show(playerid, RaceVehSel, DIALOG_STYLE_INPUT, "Race Vehicle", "Do you intend to have a specific vehicle to be used in the race?\nIf so please insert the vehicle id in the box below\nIf you don't want any vehicle in particular to be used, please leave it empty or type -1\n"EMB_RED"You inserted an invalid ID!", "Confirm", "Exit");
	else RaceInfo[createdRace][rVeh] = strval(inputtext); 
	new rstr[96];
	if(RaceInfo[createdRace][rVeh] == -1) format(rstr,sizeof(rstr), ""EMB_GREEN"[INFO:]"EMB_WHITE" Any vehicle can be used for this race");
	else format(rstr,sizeof(rstr), ""EMB_GREEN"[INFO:]"EMB_WHITE" A "EMB_ORANGE"%s"EMB_WHITE" is required for this race.",GetVehicleModelName(strval(inputtext)));
	SendClientMessage(playerid, -1, rstr);
	SendClientMessage(playerid, -1, ""EMB_GREEN"[INFO:]"EMB_WHITE" You can now use "EMB_ORANGE"/createrace"EMB_WHITE" To add starting position and checkpoints!");
	SendClientMessage(playerid, -1, ""EMB_RED"[ALERT:] Please be extra careful when adding checkpoints or starting position since you will have to redo EVERYTHING from scratch if you fail!");
	RaceInfo[createdRace][rStarted] = true;
	return 1;
}

Dialog:RaceCreation(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	if(strlen(inputtext) > 16) return SendClientMessage(playerid, -1, ""EMB_RED"[ERROR:]"EMB_WHITE" Max lenght of racename is 16 characters!");
	new rstr[96];
	strcpy(RaceInfo[createdRace][rName], inputtext, 16);
	format(rstr,sizeof(rstr), ""EMB_GREEN"[INFO:]"EMB_WHITE" The name of the race is: "EMB_ORANGE"%s",RaceInfo[createdRace][rName]);
	SendClientMessage(playerid, -1, rstr);
	Dialog_Show(playerid, RaceTimeout, DIALOG_STYLE_INPUT, "Race Timeout", "To avoid AFK people blocking a race, you must insert a timeout value\nPlease insert a timeout value in seconds bigger than 299 seconds.", "Confirm", "Exit");
	RaceInfo[createdRace][rCompleted] = 0;
	creatingRace = playerid; 
	return 1;
}
Dialog:RaceCreation2(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	switch(listitem)
	{
		case 0:
		{
			if(startingPos[createdRace] >= MAX_RACING_PLAYERS) return SendClientMessage(playerid, -1, ""EMB_RED"[ERROR:]"EMB_WHITE" Limit Reached!");
			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, ""EMB_RED"[ERROR:]"EMB_WHITE" You must be in a vehicle!");
			new Float:X, Float:Y, Float:Z, Float:A, vidd = GetPlayerVehicleID(playerid);
			GetVehiclePos(vidd, X,Y,Z);
			GetVehicleZAngle(vidd, A);
			AddRaceStarting(createdRace, X,Y,Z,A);
			new rstr[144];
			format(rstr,sizeof(rstr), ""EMB_GREEN"[INFO:]"EMB_WHITE" You added a starting position in the race "EMB_ORANGE"%s"EMB_WHITE". Total: "EMB_YELLOW"%d",RaceInfo[createdRace][rName],startingPos[createdRace]);
			SendClientMessage(playerid, -1, rstr);
			return 1;
		}
		case 1:
		{
			if(RaceInfo[createdRace][rActualCheck] >= MAX_RACE_CHECK) return SendClientMessage(playerid, -1, ""EMB_RED"[ERROR:]"EMB_WHITE" Limit Reached!");
			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, ""EMB_RED"[ERROR:]"EMB_WHITE" You must be in a vehicle!");
			new Float:X, Float:Y, Float:Z, vidd = GetPlayerVehicleID(playerid);
			GetVehiclePos(vidd, X,Y,Z);
			AddCheckpointToRace(createdRace, X,Y,Z);
			new rstr[144];
			format(rstr,sizeof(rstr), ""EMB_GREEN"[INFO:]"EMB_WHITE" You added a checkpoint in the race "EMB_ORANGE"%s"EMB_WHITE". Total: "EMB_YELLOW"%d",RaceInfo[createdRace][rName],RaceInfo[createdRace][rActualCheck]);
			SendClientMessage(playerid, -1, rstr);	
			return 1;
		}
		case 2:
		{
			new rstr[144];
			format(rstr,sizeof(rstr), ""EMB_GREEN"[INFO:]"EMB_ORANGE" %s"EMB_WHITE" created the race"EMB_ORANGE" %s"EMB_WHITE". Time to try it!",PlayerName(playerid), RaceInfo[createdRace][rName]);
			SendClientMessageToAll(-1, rstr);
			creatingRace = -1;
			RaceInfo[createdRace][rStarted] = false;
			RaceInfo[createdRace][rCompleted] = 1;
			strcpy(RaceInfo[createdRace][rCreator], PlayerName(playerid), MAX_PLAYER_NAME);
			createdRace++;
			return 1;
		}
		case 3:
		{
			RaceInfo[createdRace][rActualCheck] = 0;
			startingPos[createdRace] = 0;
			SendClientMessage(playerid, -1, ""EMB_RED"[INFO:] You cancelled the race creation, next time you have to do everything from scratch!");
			return 1;
		}
	}
	return 1;
}

Dialog:vmenu(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	new text[50],string[128];
	VMenuInfo[playerid][choosenvid]=VMenuInfo[playerid][itemvid][listitem];
	switch(vInfo[VMenuInfo[playerid][choosenvid]][vStatusPortiere])
	{
		case 0: strcpy(text, "{07DB00}Open", 13);
		case 1: strcpy(text, "{FF0000}Closed", 15);
	}
	format(string,sizeof(string),"Search Vehicle\n%s\nPark",text);
	return Dialog_Show(playerid, vMenuOptions, DIALOG_STYLE_LIST, "vMenu",string, "Select", "Cancel");
}

Dialog:vMenuOptions(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	switch(listitem)
	{
		case 0:
		{
			new Float:x, Float:y, Float:z;
			GetVehiclePos(VMenuInfo[playerid][choosenvid],x,y,z);
			DisablePlayerCheckpoint(playerid);
			SendClientMessage(playerid, YELLOW, "The position of your vehicle is visible on a minimap.");
			SetPlayerCheckpoint(playerid,x,y,z,5);
			trova[playerid]=1;
			return 1;
		}
		case 1:
		{
			if(vInfo[VMenuInfo[playerid][choosenvid]][vStatusPortiere] == 0)
			{
				vInfo[VMenuInfo[playerid][choosenvid]][vStatusPortiere] = 1;
				SendClientMessage(playerid, YELLOW,"[INFO:] You have closed the your vehicle.");
			}
			else
			{
				vInfo[VMenuInfo[playerid][choosenvid]][vStatusPortiere] = 0;
				SendClientMessage(playerid, YELLOW,"[INFO:] You have open the your vehicle.");
			}
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(VMenuInfo[playerid][choosenvid], engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(VMenuInfo[playerid][choosenvid], vInfo[VMenuInfo[playerid][choosenvid]][vStatusMotore], lights, alarm, vInfo[VMenuInfo[playerid][choosenvid]][vStatusPortiere], bonnet, boot, objective);
			return 1;
		}
		case 2:
		{
			SendClientMessage(playerid,YELLOW,"You have parked the vehicle in this position.");
			new Float:Spawn[4];
			GetPlayerPos(playerid,Spawn[0],Spawn[1],Spawn[2]);
			GetPlayerFacingAngle(playerid,Spawn[3]);
			vInfo[VMenuInfo[playerid][choosenvid]][vSpawn][0]=Spawn[0];
			vInfo[VMenuInfo[playerid][choosenvid]][vSpawn][1]=Spawn[1];
			vInfo[VMenuInfo[playerid][choosenvid]][vSpawn][2]=Spawn[2];
			vInfo[VMenuInfo[playerid][choosenvid]][vSpawn][3]=Spawn[3];
			return 1;
		}
	}
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	return 1;
}

CreatePayNSpry(playerid,price)
{
	new Float:x,Float:y,Float:z,stroff[64],query[150];
	GetPlayerPos(playerid,x,y,z);
	PrayInfo[createdPay][virtualw] = GetPlayerInterior(playerid);
	PrayInfo[createdPay][PosP][0] = x;
	PrayInfo[createdPay][PosP][1] = y;
	PrayInfo[createdPay][PosP][2] = z;
	PrayInfo[createdPay][pPickup] = CreateDynamicPickup(1239, 1, PrayInfo[createdPay][PosP][0], PrayInfo[createdPay][PosP][1], PrayInfo[createdPay][PosP][2], PrayInfo[createdPay][virtualw], -1, INVALID_PLAYER_ID, 10.0, -1);
	PrayInfo[createdPay][pPrice] = price;
	format(stroff,sizeof(stroff),"{FFE414}*Pay'n'Spry*\n{A1A1A1} Use /repair");
	PrayInfo[createdPay][pLabel] = CreateDynamic3DTextLabel(stroff,-1,PrayInfo[createdPay][PosP][0], PrayInfo[createdPay][PosP][1], PrayInfo[createdPay][PosP][2],10.0,PrayInfo[createdPay][virtualw], 0);
	mysql_format(serverdb, query,sizeof(query),"INSERT INTO paynspry (x,y,z,vw,price) VALUES ('%f','%f','%f',%d,'%d')",PrayInfo[createdPay][PosP][0],PrayInfo[createdPay][PosP][1],PrayInfo[createdPay][PosP][2],PrayInfo[createdPay][virtualw],PrayInfo[createdPay][pPrice]);
	mysql_tquery(serverdb,query);
	return 1;
}

stock LoadPaynSpray()
{
	new count; 
	count = cache_get_row_count(count);
	Loop(idx, count)
	{
		cache_get_value_index_int(idx, 0, PrayInfo[createdPay][dbID]);
		cache_get_value_index_float(idx, 1, PrayInfo[createdPay][PosP][0]);
		cache_get_value_index_float(idx, 2, PrayInfo[createdPay][PosP][1]);
		cache_get_value_index_float(idx, 3, PrayInfo[createdPay][PosP][2]);
		cache_get_value_index_int(idx, 4, PrayInfo[createdPay][virtualw]);
		cache_get_value_index_int(idx, 5, PrayInfo[createdPay][pInt]);
		createdPay++;
	}
	return 1;
}	

forward LoadPlayer(playerid);
public LoadPlayer(playerid)
{

	new date[20],query[145];
	cache_get_value_index_int(0, 0, PlayerInfo[playerid][pID]);
	cache_get_value_index_int(0, 4, PlayerInfo[playerid][pL]);
	cache_get_value_index_int(0, 5, PlayerInfo[playerid][pA]);		
	cache_get_value_index_int(0, 6, PlayerInfo[playerid][pL]);
	cache_get_value_index_int(0, 7, PlayerInfo[playerid][pC]);
	cache_get_value_index_int(0, 8, PlayerInfo[playerid][pPremium]);
	cache_get_value_index_float(0, 9, PlayerInfo[playerid][pSpawn][0]);
	cache_get_value_index_float(0, 10, PlayerInfo[playerid][pSpawn][1]);
	cache_get_value_index_float(0, 11, PlayerInfo[playerid][pSpawn][2]);
	cache_get_value_index_float(0, 12, PlayerInfo[playerid][pSpawn][3]);
	cache_get_value_index_int(0, 13, PlayerInfo[playerid][pInt]);
	cache_get_value_index_int(0, 14, PlayerInfo[playerid][pVWorld]);
	cache_get_value_index(0, 18, date,sizeof(date));
	cache_get_value_index_int(0, 23, PlayerInfo[playerid][sS]);
	new string1[120],plrIP[16];
	format(string1,sizeof(string1),"Welcome back ~g~%s. ~w~Your last login was ~y~%s.",PlayerName(playerid),date);
	BoxInfo(playerid,string1);
	new Year, Month, Day,lol[30],string[100];
	GetPlayerIp(playerid, plrIP, sizeof(plrIP));
	getdate(Year, Month, Day);
	format(date, sizeof(date),"%02d-%02d-%d", Day, Month, Year);
	mysql_format(serverdb, query,sizeof(query),"UPDATE users SET datelog='%e',ip='%e',serial='%e' WHERE username='%e'",lol,plrIP,ReturnGPCI(playerid),PlayerName(playerid)); 

	SetPlayerSkin(playerid,PlayerInfo[playerid][pS]);
	SetPlayerScore(playerid,PlayerInfo[playerid][pL]);
	SetPlayerCash(playerid,PlayerInfo[playerid][pC]);
	TogglePlayerClock(playerid,false);
	regchat[playerid] = false; 
	TogglePlayerSpectating(playerid, false);
	anticheatv[playerid]=SetTimerEx("AntiCheatVeh", 1500,true,"i",playerid);
	SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pS],PlayerInfo[playerid][pSpawn][0],PlayerInfo[playerid][pSpawn][1],PlayerInfo[playerid][pSpawn][2],PlayerInfo[playerid][pSpawn][3], 0, 0, 0, 0, 0, 0);
	ELC_AC_SetPlayerPos(playerid,PlayerInfo[playerid][pSpawn][0],PlayerInfo[playerid][pSpawn][1],PlayerInfo[playerid][pSpawn][2]);
	SetPlayerSkin(playerid,PlayerInfo[playerid][pS]);
	mysql_format(serverdb, query, sizeof(query), "SELECT * FROM pvehicles WHERE vOwner = '%e'", PlayerName(playerid));
	mysql_tquery(serverdb, query, "LoadPlayerVehicles", "d", playerid);
	format(string,sizeof string,""EMB_GREEN"[INFO:]"EMB_ORANGE" %s "EMB_WHITE"has joined the server.",PlayerName(playerid));
	SendClientMessageToAll(0xFFFFFFAA,string);
	return 1;
}

ReturnGPCI(playerid)
{
	new serial[41];
	gpci(playerid, serial, sizeof(serial));
	return serial;
}

/*SendRaceMessage(raceid, const string[]){
	Loop(i, MAX_PLAYERS){
		if(InRace[i] != raceid) continue;
		SendClientMessage(i, -1, string);}
	return 1;}*/
stock LoadPlayerVehicles(playerid)
{
	new v = CreateVehicle(560, 0.0, 0.0, 0.0, 0.0, 0, 0, -1, 0);
	DestroyVehicle(v);
	new count = cache_get_row_count(count);
	Loop(idx, count)
	{
		cache_get_value_index_int(idx, 0, vInfo[v][dbid]);
		cache_get_value_index(idx, 1, vInfo[v][vOwner]);
		cache_get_value_index_int(idx, 2, vInfo[v][vid]);
		cache_get_value_index_int(idx, 3, vInfo[v][vColor1]);
		cache_get_value_index_int(idx, 4, vInfo[v][vColor2]);
		cache_get_value_index(idx, 5, vInfo[v][vTarga]);
		cache_get_value_index_float(idx, 6, vInfo[v][vSpawn][0]);
		cache_get_value_index_float(idx, 7, vInfo[v][vSpawn][1]);
		cache_get_value_index_float(idx, 8, vInfo[v][vSpawn][2]);
		cache_get_value_index_float(idx, 9, vInfo[v][vSpawn][3]);
		cache_get_value_index_float(idx, 10, vInfo[v][vCSpawn][0]);
		cache_get_value_index_float(idx, 11, vInfo[v][vCSpawn][1]);
		cache_get_value_index_float(idx, 12, vInfo[v][vCSpawn][2]);
		cache_get_value_index_float(idx, 13, vInfo[v][vCSpawn][3]);
		cache_get_value_index_int(idx, 14, vInfo[v][vStatusPortiere]);
		cache_get_value_index_int(idx, 15, vInfo[v][vSpawnType]);
		cache_get_value_index_float(idx, 16, vInfo[v][vHealth]);
		cache_get_value_index_int(idx, 17, vInfo[v][vMod][0]);
		cache_get_value_index_int(idx, 18, vInfo[v][vMod][1]);
		cache_get_value_index_int(idx, 19, vInfo[v][vMod][2]);
		cache_get_value_index_int(idx, 20, vInfo[v][vMod][3]);
		cache_get_value_index_int(idx, 21, vInfo[v][vMod][4]);
		cache_get_value_index_int(idx, 22, vInfo[v][vMod][5]);
		cache_get_value_index_int(idx, 23, vInfo[v][vMod][6]);
		cache_get_value_index_int(idx, 24, vInfo[v][vMod][7]);
		cache_get_value_index_int(idx, 25, vInfo[v][vMod][8]);
		cache_get_value_index_int(idx, 26, vInfo[v][vMod][9]);
		cache_get_value_index_int(idx, 27, vInfo[v][vMod][10]);
		cache_get_value_index_int(idx, 28, vInfo[v][vMod][11]);
		cache_get_value_index_int(idx, 29, vInfo[v][vMod][12]);
		cache_get_value_index_int(idx, 30, vInfo[v][vMod][13]);
		cache_get_value_index_int(idx, 31, vInfo[v][vPaintJob]);
		cache_get_value_index_int(idx, 32, vInfo[v][vPanelsDmg]);
		cache_get_value_index_int(idx, 33, vInfo[v][vDoorsDmg]);
		cache_get_value_index_int(idx, 34, vInfo[v][vLightsDmg]);
		cache_get_value_index_int(idx, 35, vInfo[v][vTiresDmg]);
		cache_get_value_index_int(idx, 36, vInfo[v][vKm]);
	}
	if(vInfo[v][vSpawnType] == 0)
	{
		vInfo[v][vVSpawnID] = CreateVehicle(vInfo[v][vid],vInfo[v][vSpawn][0],vInfo[v][vSpawn][1],vInfo[v][vSpawn][2],vInfo[v][vSpawn][3],vInfo[v][vColor1],vInfo[v][vColor2], 60000, 0);
		SetVehicleZAngle(vInfo[v][vVSpawnID], vInfo[v][vSpawn][3]);
		vInfo[v][vSpawned]=1;
	}
	else
	{
		vInfo[v][vVSpawnID] = CreateVehicle(vInfo[v][vid],vInfo[v][vCSpawn][0],vInfo[v][vCSpawn][1],vInfo[v][vCSpawn][2],vInfo[v][vCSpawn][3],vInfo[v][vColor1],vInfo[v][vColor2], 60000, 0);
		vInfo[v][vSpawned]=1;
		SetVehicleZAngle(vInfo[v][vVSpawnID], vInfo[v][vCSpawn][3]);
	}
	ChangeVehicleColor(vInfo[v][vVSpawnID],vInfo[v][vColor1],vInfo[v][vColor2]);
	SetVehicleHealth(vInfo[v][vVSpawnID],vInfo[v][vHealth]);
	ChangeVehiclePaintjob(vInfo[v][vVSpawnID],vInfo[v][vPaintJob]);
	UpdateVehicleDamageStatus(vInfo[v][vVSpawnID],vInfo[v][vPanelsDmg],vInfo[v][vDoorsDmg],vInfo[v][vLightsDmg],vInfo[v][vTiresDmg]);
	SetVehicleNumberPlate(vInfo[v][vVSpawnID], vInfo[v][vTarga]);
	SetVehicleToRespawn(vInfo[v][vVSpawnID]);
	vInfo[v][vStatusMotore] = ENGINE_OFF;
	new engine, lights, alarm, doors, bonnet, boot, objective;
	if(vInfo[v][vStatusMotore]==ENGINE_STARTED)
	{
		for(new m = 0; m < MAX_MODS; m++)
		{
			if (vInfo[v][vMod][m] > 0)
			{
				AddVehicleComponent(v,vInfo[v][vMod][m]);
			}
		}
		GetVehicleParamsEx(v, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(v, true, lights, alarm, doors, bonnet, boot, objective);
	}
	else
	{
		for(new m = 0; m < MAX_MODS; m++)
		{
			if (vInfo[v][vMod][m] > 0)
			{
				AddVehicleComponent(v,vInfo[v][vMod][m]);
			}
		}
		GetVehicleParamsEx(v, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(v, false, lights, alarm, doors, bonnet, boot, objective);
	}
	vInfo[v][vComprato] = 1;
	vInfo[v][vvalido] = 1; 
	printf("[VP:] Model ID: %d - Plate: %s - Owner: %s",vInfo[v][vid],vInfo[v][vTarga],vInfo[v][vOwner]);
	return 1;
}


stock GetPlayerOwnedVehiclesNumber(playerid){
	new n=0;
	for(new vehid=0;vehid<MAX_VEHICLES;vehid++){
	if(strlen(PlayerName(playerid))==strlen(vInfo[vehid][vOwner]) && !strcmp(PlayerName(playerid),vInfo[vehid][vOwner],false,MAX_PLAYER_NAME) && vInfo[vehid][vOwner] && vInfo[vehid][vvalido]){
	n++;}}
	return n;}

stock GivePlayerCash(playerid, money){
    PlayerInfo[playerid][pC] += money;
    ResetMoneyBar(playerid);
    UpdateMoneyBar(playerid,PlayerInfo[playerid][pC]);
    return PlayerInfo[playerid][pC];}

stock SetPlayerCash(playerid, money){
    PlayerInfo[playerid][pC] = money;
    ResetMoneyBar(playerid);
    UpdateMoneyBar(playerid,PlayerInfo[playerid][pC]);
    return PlayerInfo[playerid][pC];}

stock ResetPlayerCash(playerid){
    PlayerInfonfo[playerid][pSoldi] = 0;
    ResetMoneyBar(playerid);
    UpdateMoneyBar(playerid,PlayerInfo[playerid][pC]);
    return PlayerInfonfo[playerid][pC];}

SendRaceMessage(raceid, const string[]){
	Loop(i, MAX_PLAYERS){
		if(InRace[i] != raceid) continue;
		SendClientMessage(i, -1, string);}
	return 1;}

IsNumeric(const string[]){
	for (new i = 0, j = strlen(string); i < j; i++){
		if (string[i] > '9' || string[i] < '0') return 0;}
    return 1;}

StartRace(raceid){
	RaceInfo[raceid][rJoinable] = false;
	if(RaceInfo[raceid][rRacers] == 0) return 1;
	Loop(i, MAX_PLAYERS){
		if(!IsPlayerConnected(i)) continue;
		if(InRace[i] == -1) continue;
		if(GetPlayerState(i) == PLAYER_STATE_DRIVER && InRace[i] == raceid){
			CurrentCheck[i] = 1;
			GameTextForPlayer(i,"~g~GOOOOOOOO!!!!!",3000, 3);
			TogglePlayerControllable(i, true);}
		else if(GetPlayerState(i) != PLAYER_STATE_DRIVER){
			InRace[i] = -1;
			CurrentCheck[i] = -1;
			DisablePlayerRaceCheckpoint(i);
			LeaveRace(i, raceid);
			if(IsPlayerInAnyVehicle(i)){
				new vidd = GetPlayerVehicleID(i);
				SetVehicleVirtualWorld(vidd, 0);
				SetPlayerVirtualWorld(i, 0);
				PutPlayerInVehicle(i, vidd, 0);
				TogglePlayerControllable(i, true);}
			else SetPlayerVirtualWorld(i, 0);}}
	RaceInfo[raceid][rTimer] = SetTimerEx("RaceTime",100, true, "d", raceid);
	RaceInfo[raceid][rStarted] = true;
	return 1;}

public OnPlayerEnterRaceCheckpoint(playerid){
	if(InRace[playerid] != -1){
		if(CurrentCheck[playerid] > 0){
			new raceid = InRace[playerid], checkid = CurrentCheck[playerid];
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return LeaveRace(playerid, raceid), SendClientMessage(playerid, -1, ""EMB_RED"[ERROR:]"EMB_WHITE" Not driving mate, It won't work");
			if(checkid == RaceInfo[raceid][rActualCheck]){
				new str[200];
				format(str,sizeof(str), ""EMB_GREEN"[INFO:]"EMB_ORANGE" %s"EMB_WHITE" finished the race in "EMB_YELLOW"%d"EMB_WHITE" place out of the "EMB_YELLOW"%d"EMB_WHITE" racers in: %s!",PlayerName(playerid), RaceInfo[raceid][rTotalRacers] - RaceInfo[raceid][rRacers] +1, RaceInfo[raceid][rTotalRacers],FormatTime(RaceInfo[raceid][rTime]));
				SendRaceMessage(raceid, str);
				LeaveRace(playerid, raceid);
				return 1;}
			CurrentCheck[playerid] ++;
			new Float:X, Float:Y, Float:Z;
			if(checkid != RaceInfo[raceid][rActualCheck]){
				SetPlayerRaceCheckpoint(playerid, 0, RaceInfo[raceid][rCheckX][checkid],  RaceInfo[raceid][rCheckY][checkid],  RaceInfo[raceid][rCheckZ][checkid], RaceInfo[raceid][rCheckX][checkid+1],  RaceInfo[raceid][rCheckY][checkid+1],  RaceInfo[raceid][rCheckZ][checkid+1], 6);
				GetPlayerPos(playerid, X, Y, Z);
				PlayerPlaySound(playerid, 5201, 0,0,0);}	
			if(checkid+1 == RaceInfo[raceid][rActualCheck]){
				SetPlayerRaceCheckpoint(playerid, 1, RaceInfo[raceid][rCheckX][checkid],  RaceInfo[raceid][rCheckY][checkid],  RaceInfo[raceid][rCheckZ][checkid], 0.0,0.0,0.0, 6);
				PlayerPlaySound(playerid, 5201, 0,0,0);}}
		return 1;}
	return 1;}

forward CountDown(raceid);
public CountDown(raceid){
	new td[32];
	if(CD[raceid] == 0 && RaceInfo[raceid][rStarted] == false) StartRace(raceid), KillTimer(CDTimer[raceid]);
	Loop(i, MAX_PLAYERS){
		if(!IsPlayerConnected(i)) continue;
		if(InRace[i] != raceid) continue;
		if(CD[raceid] > 0 && RaceInfo[raceid][rStarted] == false){
			printf("RaceID: %d, Count: %d",raceid, CD[raceid]);
			format(td,sizeof(td), "~r~Countdown: ~g~%d",CD[raceid]);
			PlayerTextDrawSetString(i, pRaceTD[i][1], td);}}
	printf("CD(%d) %d",raceid, CD[raceid]);
	CD[raceid]--;
	return 1;}

forward UpdateRaceTD(playerid);
public UpdateRaceTD(playerid){
	new td[32];
	new raceid = InRace[playerid];
	format(td, sizeof(td), "~b~%s_~w~(~r~%d~w~)",RaceInfo[raceid][rName],raceid);
	PlayerTextDrawSetString(playerid, pRaceTD[playerid][0], td);
	format(td, sizeof(td), "Checkpoint:_~g~%d~w~/~r~%d",CurrentCheck[playerid],RaceInfo[raceid][rActualCheck]);
	PlayerTextDrawSetString(playerid, pRaceTD[playerid][2], td);
	if(RaceInfo[raceid][rStarted] == true){
		format(td, sizeof(td), "~g~Race_Time:_~y~%s",FormatTime(RaceInfo[raceid][rTime]));
		PlayerTextDrawSetString(playerid, pRaceTD[playerid][1], td);}
	return 1;}

FormatTime(timevariable){
	new milliseconds = timevariable, seconds, minutes, string[20];
	while(milliseconds > 9){
	    seconds ++;
	    milliseconds = milliseconds - 10;}
	while(seconds > 59){
		minutes ++;
		seconds = seconds - 60;}
    format(string, sizeof(string), "%d:%02d.%03d", minutes, seconds, milliseconds);
	return string;}

CreateRaceTD(playerid)
{
	pRaceTD[playerid][0] = CreatePlayerTextDraw(playerid, 591.666198, 202.444412, "RACENAME_(100)");
	PlayerTextDrawLetterSize(playerid, pRaceTD[playerid][0], 0.212001, 1.190000);
	PlayerTextDrawTextSize(playerid, pRaceTD[playerid][0], 0.000000, 95.000000);
	PlayerTextDrawAlignment(playerid, pRaceTD[playerid][0], 2);
	PlayerTextDrawColor(playerid, pRaceTD[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, pRaceTD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, pRaceTD[playerid][0], 41079);
	PlayerTextDrawSetShadow(playerid, pRaceTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, pRaceTD[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, pRaceTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, pRaceTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, pRaceTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, pRaceTD[playerid][0], 0);
	pRaceTD[playerid][1] = CreatePlayerTextDraw(playerid, 591.666198, 216.445266, "Race_Time:_00.000:000");
	PlayerTextDrawLetterSize(playerid, pRaceTD[playerid][1], 0.212001, 1.190000);
	PlayerTextDrawTextSize(playerid, pRaceTD[playerid][1], 0.000000, 95.000000);
	PlayerTextDrawAlignment(playerid, pRaceTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, pRaceTD[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, pRaceTD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, pRaceTD[playerid][1], 119);
	PlayerTextDrawSetShadow(playerid, pRaceTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, pRaceTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, pRaceTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, pRaceTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, pRaceTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, pRaceTD[playerid][1], 0);
	pRaceTD[playerid][2] = CreatePlayerTextDraw(playerid, 591.666198, 230.246109, "Checkpoint:_X/X");
	PlayerTextDrawLetterSize(playerid, pRaceTD[playerid][2], 0.212001, 1.190000);
	PlayerTextDrawTextSize(playerid, pRaceTD[playerid][2], 0.000000, 95.000000);
	PlayerTextDrawAlignment(playerid, pRaceTD[playerid][2], 2);
	PlayerTextDrawColor(playerid, pRaceTD[playerid][2], -1);
	PlayerTextDrawUseBox(playerid, pRaceTD[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, pRaceTD[playerid][2], 119);
	PlayerTextDrawSetShadow(playerid, pRaceTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, pRaceTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, pRaceTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, pRaceTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, pRaceTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, pRaceTD[playerid][2], 0);
	return 1;
}

CreatePlayerCopTD(playerid)
{
	P_CopChaseTD[playerid][0] = CreatePlayerTextDraw(playerid, 1.000015, 261.763000, "Officer: Tsukiko Tsutsukakushi");
	PlayerTextDrawLetterSize(playerid, P_CopChaseTD[playerid][0], 0.152000, 1.147852);
	PlayerTextDrawTextSize(playerid, P_CopChaseTD[playerid][0], 85.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, P_CopChaseTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, P_CopChaseTD[playerid][0], 65535);
	PlayerTextDrawUseBox(playerid, P_CopChaseTD[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, P_CopChaseTD[playerid][0], 156);
	PlayerTextDrawSetShadow(playerid, P_CopChaseTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, P_CopChaseTD[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, P_CopChaseTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, P_CopChaseTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, P_CopChaseTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, P_CopChaseTD[playerid][0], 0);

	P_CopChaseTD[playerid][1] = CreatePlayerTextDraw(playerid, 42.466678, 289.164611, "Map Blip: Disabled");
	PlayerTextDrawLetterSize(playerid, P_CopChaseTD[playerid][1], 0.152000, 1.147852);
	PlayerTextDrawTextSize(playerid, P_CopChaseTD[playerid][1], 0.000000, 85.000000);
	PlayerTextDrawAlignment(playerid, P_CopChaseTD[playerid][1], 2);
	PlayerTextDrawColor(playerid, P_CopChaseTD[playerid][1], -1378294017);
	PlayerTextDrawUseBox(playerid, P_CopChaseTD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, P_CopChaseTD[playerid][1], 156);
	PlayerTextDrawSetShadow(playerid, P_CopChaseTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, P_CopChaseTD[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, P_CopChaseTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, P_CopChaseTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, P_CopChaseTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, P_CopChaseTD[playerid][1], 0);
	return 1;
}

forward RaceTime(raceid);
public RaceTime(raceid){
	RaceInfo[raceid][rTime]++;
	if(floatround((RaceInfo[raceid][rTime] / 10), floatround_floor) >= RaceInfo[raceid][rTimeout]) StopRace(raceid);
	return 1;}

StopRace(raceid){
	RaceInfo[raceid][rStarted] = false;
	KillTimer(RaceInfo[raceid][rTimer]);
	RaceInfo[raceid][rTime] = 0;
	if(RaceInfo[raceid][rRacers] != 0){
		Loop(i, MAX_PLAYERS){
			if(InRace[i] != -1) continue;
			SendClientMessage(i, -1, ""EMB_RED"[ERRORE:] "EMB_WHITE"The race ended.");
			LeaveRace(i,raceid);}}
	Loop(i, startingPos[raceid]) { FreeStart[i] = 0; }
	RaceInfo[raceid][rRacers] = 0;
	RaceInfo[raceid][rTotalRacers] = 0;
	return 1;}

LeaveRace(playerid, raceid)
{
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0), SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	CurrentCheck[playerid] = -1;
	InRace[playerid] = -1;
	DisablePlayerRaceCheckpoint(playerid);
	SetPlayerVirtualWorld(playerid, 0);
	if(PlayerInfo[playerid][pLoaned] != 0) DestroyVehicle(PlayerInfo[playerid][pLoaned]), PlayerInfo[playerid][pLoaned] = 0;
	RaceInfo[raceid][rRacers]--;
	RaceInfo[raceid][rTotalRacers]--;
	KillTimer(PlayerInfo[playerid][pTDTimer]);
	Loop(td, 3) { PlayerTextDrawHide(playerid, pRaceTD[playerid][td]); }
	if(RaceInfo[raceid][rRacers] == 0) StopRace(raceid);
	TogglePlayerControllable(playerid, true);
	ELC_AC_SetPlayerPos(playerid,PlayerInfo[playerid][pSpawn][0],PlayerInfo[playerid][pSpawn][1],PlayerInfo[playerid][pSpawn][2]);
	return 1;
}

GetRaceFreeStartingSlot(raceid){
	Loop(i, startingPos[raceid]){
		if(FreeStart[i] == 1) continue;
		else if(FreeStart[i] == 0) return i;}
	return -1;}

JoinRace(playerid, raceid)
{
	if(RaceInfo[raceid][rJoinable] == false) return SendClientMessage(playerid, -1, ""EMB_RED"[ERROR:]"EMB_WHITE" The race is not open yet!");
	if(InRace[playerid] != -1) return SendClientMessage(playerid, -1, ""EMB_RED"[ERROR:]" EMB_WHITE"You are already in a race, use /quitrace first");
	new start = GetRaceFreeStartingSlot(raceid);
	if(start == -1) return SendClientMessage(playerid, -1, ""EMB_RED"[ERROR:]"EMB_WHITE" The race is full!");
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != RaceInfo[raceid][rVeh] && RaceInfo[raceid][rVeh] != -1 && GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
		if(RaceInfo[raceid][rVeh] == 0) return SendClientMessage(playerid, -1, ""EMB_RED"[ERROR:]" EMB_WHITE"The race is only onfoot!");
		new rstr[126];
		format(rstr,sizeof(rstr), ""EMB_GREEN"[INFO:]"EMB_WHITE" You need a(n) "EMB_ORANGE"%s"EMB_WHITE" to join in this race",VehicleNames[RaceInfo[raceid][rVeh]-400]);
		SendClientMessage(playerid, -1, rstr);
		SendClientMessage(playerid, -1, ""EMB_GREEN"[INFO:]"EMB_WHITE" We are lending you one vehicle for this race, if you buy the right car you can race with it and have it tuned!");
		new Float:X, Float:Y, Float:Z, id;
		GetPlayerPos(playerid, X,Y,Z);
		id = CreateVehicle(RaceInfo[raceid][rVeh], X, Y, Z, 0, random(125), random(125), -1);
		PlayerInfo[playerid][pLoaned] = id;
		PutPlayerInVehicle(playerid, id, 0);
	}
	if(RaceInfo[raceid][rVeh] == 0 && IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, ""EMB_RED"[ERROR:]" EMB_WHITE"The race is only onfoot!");
	if(RaceInfo[raceid][rVeh] == -1 && GetPlayerState(playerid) != PLAYER_STATE_ONFOOT && GetPlayerState(playerid) != PLAYER_STATE_PASSENGER)
	{
		new vehid = GetPlayerVehicleID(playerid);
		SetPlayerVirtualWorld(playerid, raceid+1);
		SetVehicleVirtualWorld(vehid, raceid+1);
		SetVehiclePos(vehid, RaceInfo[raceid][rStartingX][start],RaceInfo[raceid][rStartingY][start],RaceInfo[raceid][rStartingZ][start]);
		SetVehicleZAngle(vehid, RaceInfo[raceid][rStartingA][start]);
		PutPlayerInVehicle(playerid, vehid, 0);
	}
	else if(RaceInfo[raceid][rVeh] != 0 && RaceInfo[raceid][rVeh] == GetVehicleModel(GetPlayerVehicleID(playerid)))
	{
		new vehid = GetPlayerVehicleID(playerid);
		SetPlayerVirtualWorld(playerid, raceid+1);
		SetVehicleVirtualWorld(vehid, raceid+1);
		SetVehiclePos(vehid, RaceInfo[raceid][rStartingX][start],RaceInfo[raceid][rStartingY][start],RaceInfo[raceid][rStartingZ][start]);
		SetVehicleZAngle(vehid, RaceInfo[raceid][rStartingA][start]);
		PutPlayerInVehicle(playerid, vehid, 0);
	}
	else if(RaceInfo[raceid][rVeh] == 0)
	{
		ELC_AC_SetPlayerPos(playerid, RaceInfo[raceid][rStartingX][start],RaceInfo[raceid][rStartingY][start],RaceInfo[raceid][rStartingZ][start]);
		SetPlayerVirtualWorld(playerid, raceid+1);
		SetPlayerFacingAngle(playerid, RaceInfo[raceid][rStartingA][start]);
	}
	else return SendClientMessage(playerid, -1, ""EMB_RED"[ERROR:]"EMB_WHITE" It was impossibile to let you join the race!");
	CurrentCheck[playerid] = 0;
	InRace[playerid] = raceid;
	FreeStart[start] = 1;
	new rstr[126];
	RaceInfo[raceid][rRacers] += 1;
	RaceInfo[raceid][rTotalRacers] +=1;
	format(rstr, sizeof(rstr), ""EMB_GREEN"[INFO:]"EMB_ORANGE" %s"EMB_WHITE" joined the race, wait for the race to start!", PlayerName(playerid));
	SendRaceMessage(raceid, rstr);	
	UpdateRaceTD(playerid);
	Loop(td, 3) { PlayerTextDrawShow(playerid, pRaceTD[playerid][td]); }
	PlayerInfo[playerid][pTDTimer] = SetTimerEx("UpdateRaceTD", 1000, true, "d", playerid);
	TogglePlayerControllable(playerid, false);
	SetPlayerRaceCheckpoint(playerid, 0, RaceInfo[raceid][rCheckX][0], RaceInfo[raceid][rCheckY][0], RaceInfo[raceid][rCheckZ][0], RaceInfo[raceid][rCheckX][1], RaceInfo[raceid][rCheckY][1],RaceInfo[raceid][rCheckZ][1], 10);
	SetCameraBehindPlayer(playerid);
	return 1;
}

GetVehicleModelName(modelid) 
{ 
    new tmp_vname[sizeof VehicleNames[]]; 
    if (400 <= modelid <= 611) strcat(tmp_vname, VehicleNames[modelid - 400], sizeof tmp_vname); 
    return tmp_vname; 
}

stock RankStaff(playerid)
{
	new ranks[80];
	if(PlayerInfo[playerid][pA] == 1) format(ranks,sizeof(ranks),""EMB_GREEN"[Mod:]");
	if(PlayerInfo[playerid][pA] == 2) format(ranks,sizeof(ranks),""EMB_GREEN"[Mod:]");
	if(PlayerInfo[playerid][pA] == 3) format(ranks,sizeof(ranks),""EMB_GREEN"[Mod:]");
	if(PlayerInfo[playerid][pA] == 4) format(ranks,sizeof(ranks),""EMB_GREEN"[Mod:]");
	if(PlayerInfo[playerid][pA] == 5) format(ranks,sizeof(ranks),""EMB_ORANGE"[Admin:]");
	if(PlayerInfo[playerid][pA] == 6) format(ranks,sizeof(ranks),""EMB_ORANGE"[Admin:]");
	if(PlayerInfo[playerid][pA] == 7) format(ranks,sizeof(ranks),""EMB_RED"[Management:]");
	if(PlayerInfo[playerid][pA] == 10) format(ranks,sizeof(ranks),""EMB_BLUE"[Developer:]");
	return ranks;
}

stock split(const strsrc[], strdest[][], delimiter){
        new i, li;
        new aNum;
        new len;
        while(i <= strlen(strsrc)){
        if(strsrc[i]==delimiter || i==strlen(strsrc)){
        len = strmid(strdest[aNum], strsrc, li, i, 128);
        strdest[aNum][len] = 0;
        li = i+1;
        aNum++;}
        i++;}
        return 1;}

stock GetPlayerDistanceToPointEx(playerid,Float:x,Float:y,Float:z){
	new Float:x1,Float:y1,Float:z1;
	new Float:tmpdis;
	GetPlayerPos(playerid,x1,y1,z1);
	tmpdis = floatsqroot(floatpower(floatabs(floatsub(x,x1)),2)+floatpower(floatabs(floatsub(y,y1)),2)+floatpower(floatabs(floatsub(z,z1)),2));
	return floatround(tmpdis);}

CreateServerVehicle(modelid, Flaot:X, Float:Y, Float:Z, Float:A, color = -1, color2 = -1, respawn = -1, siren = -1, faction = -1)
{
	new id = CreateVehicle(modelid, X, Y, Z, A, color, color2, respawn,siren);	

	ServerVehicles[id][vSpawnID] = id;
	ServerVehicles[id][vSpawnX] = X, ServerVehicles[id][vSpawnY] = Y, ServerVehicles[id][vSpawnZ] = Z,ServerVehicles[id][vSpawnA] = A;
	ServerVehicles[id][vCurrentX] = X, ServerVehicles[id][vCurrentY] = Y, ServerVehicles[id][vCurrentZ] = Z,ServerVehicles[id][vCurrentA] = A;
	ServerVehicles[id][vSpawnType] = STATIC_SPAWN_ON;
	ServerVehicles[id][vColor1] = color;
	ServerVehicle[id][vColor2] = color2;
	ServerVehicle[id][vRespawn] = respawn;
	ServerVehicle[id][vFaction] = faction;
	ServerVehicle[id][vSiren] = siren;
	ServerVehicle[id][vLocked] = VEHICLE_PARAMS_OFF;
	createdVehicles++;
	return id;
}

CreatePlayerVehicle(playerid,modelid,  Flaot:X, Float:Y, Float:Z, Float:A, color = -1, color2 = -1)
{
	new Freeslot = GetPlayerFreeVehSlot(playerid);
	new id = CreateServerVehicle(modelid, X,Y,Z,A, color, color2);

	PlayerVehicles[playerid][Freeslot][pvOwnerID] = PlayerInfo[playerid][pID];
	strcpy(PlayerVehicles[playerid][Freeslot][pvOwnerName], PlayerName(playerid), MAX_PLAYER_NAME);
	PlayerVehicles[playerid][Freeslot][pvID] = id;
	createdPVehs++;
	return id;
}

CreateDealership(name[],tag[],Float:X, Float:Y, Float:Z)
{
	new string[32];
	DealershipInfo[createdDealer][dPosX] = X, DealershipInfo[createdDealer][dPosY] = Y, DealershipInfo[createdDealer][dPosZ] = Z;
	format(string,sizeof(string), "%s [%s]",name,tag);
	strcpy(DealershipInfo[createdDealer][dName], name, 20);
	strcpy(DealershipInfo[createdDealer][dTag], tag, 6);
	DealershipInfo[createdDealer][dLabel] = CreateDynamic3DTextLabel(string, COLOR_LIGHTBLUE, X, Y, Z+0.7, 10.0);
	DealershipInfo[createdDealer][dPickup] = CreateDynamicPickup(1318, 1, X, Y, Z);
	new query[160];
	mysql_format(serverdb, query, sizeof(query), "INSERT INTO dealerships (PosX, PosY, PosZ, Name, Tag) VALUES('%f','%f','%f','%e','%e')",X,Y,Z,name,tag);
	mysql_tquery(serverdb, query, "OnDealerShipInsert","d",createdDealer);
	return createdDealer, createdDealer++;
}

AddVehicleToDealership(dealerid, modelid, price)
{
	DealerVehicles[dealerid][dVehicles[dealerid]][dModelID] = modelid;
	DealerVehicles[dealerid][dVehicles[dealerid]][dPrice] = price;
	new query[90];
	mysql_format(serverdb, query, sizeof(query), "INSERT INTO dealervehicles (ModelID, Price, DealerID) VALUES('%d','%d','%d')", modelid, price, DealershipInfo[dealerid][dID]);
	mysql_tquery(serverdb, query, "OnDealerVehicleInsert", "dd", dealerid, dVehicles[dealerid]);
	return dVehicles[dealerid], dVehicles[dealerid]++;
}

forward LoadDealerships();
public LoadDealerships()
{
	new count, string[32],query[60];
	cache_get_row_count(count);
	for(new i; i < count; i++)
	{
		cache_get_value_index_int(i, 0, DealershipInfo[createdDealer][dID]);
		cache_get_value_index_float(i, 1, DealershipInfo[createdDealer][dPosX]);	
		cache_get_value_index_float(i, 2, DealershipInfo[createdDealer][dPosY]);
		cache_get_value_index_float(i, 3, DealershipInfo[createdDealer][dPosZ]);
		cache_get_value_index(i, 4, DealershipInfo[createdDealer][dName]);
		cache_get_value_index(i, 5, DealershipInfo[createdDealer][dTag]);
		format(string,sizeof(string), "%s [%s]",DealershipInfo[createdDealer][dName],DealershipInfo[createdDealer][dTag]);
		DealershipInfo[createdDealer][dLabel] = CreateDynamic3DTextLabel(string, COLOR_LIGHTBLUE, DealershipInfo[createdDealer][dPosX], DealershipInfo[createdDealer][dPosY], DealershipInfo[createdDealer][dPosZ]+0.7, 10.0);
		DealershipInfo[createdDealer][dPickup] = CreateDynamicPickup(1318, 1,  DealershipInfo[createdDealer][dPosX], DealershipInfo[createdDealer][dPosY], DealershipInfo[createdDealer][dPosZ]);
		printf("Loaded Dealership id :%d, DBID: %d, loading now DVehicles",createdDealer, DealershipInfo[createdDealer][dID]);	
		mysql_format(serverdb, query,sizeof(query), "SELECT * FROM dealervehicles WHERE DealerID = '%d'",DealershipInfo[createdDealer][dID]);
		mysql_tquery(serverdb, query, "LoadDealerVehicles", "d", createdDealer);
		createdDealer++;
	}
	return 1;
}

forward LoadDealerVehicles(did);
public LoadDealerVehicles(did)
{
	new count;
	cache_get_row_count(count);
	for(new i; i < count; i++)
	{
		cache_get_value_index_int(i, 0, DealerVehicles[did][dVehicles[did]][dID]);
		cache_get_value_index_int(i, 1, DealerVehicles[did][dVehicles[did]][dModelID]);
		cache_get_value_index_int(i, 2, DealerVehicles[did][dVehicles[did]][dPrice]);
		printf("Loaded ID: %d, dModel: %d, dPrice: %d, DVeh: %d", DealerVehicles[did][dVehicles[did]][dID],DealerVehicles[did][dVehicles[did]][dModelID],DealerVehicles[did][dVehicles[did]][dPrice],dVehicles[did]);
		dVehicles[did]++;
	}
	return 1;
}

CMD:createdealership(cmdid, playerid, params[])
{
	if(PlayerInfo[playerid][pA] < 7) return 1;
	new name[17],tag[7];
	if(sscanf(params, "s[16]s[6]",name,tag)) return SendClientMessage(playerid, COLOR_WHITE, "USE: /createdealership <name> <tag>");
	if(strlen(name) > 16 || strlen(tag) > 6) return SendClientMessage(playerid, COLOR_RED, "Max 16 charaters for the name and 6 characters for the TAG");
	new Float:X,Float:Y,Float:Z,zone[MAX_ZONE_NAME],string[124];
	GetPlayer2DZone(playerid, zone, MAX_ZONE_NAME);
	GetPlayerPos(playerid, X, Y, Z);
	new dealerid = CreateDealership(name, tag, X,Y,Z);
	format(string,sizeof(string), "[AINFO] %s created the dealership %s [%s] (ID: %d) in/at %s",PlayerName(playerid),name,tag,dealerid,zone);
	AdministratorMessage(COLOR_YELLOW, string);		
	return 1;
}

CMD:addvehicletodealer(cmdid, playerid, params[])
{
	if(PlayerInfo[playerid][pA] < 7) return 1;
	new dealerid, modelid, price;
	if(sscanf(params, "ddd",dealerid, modelid, price))	return SendClientMessage(playerid, COLOR_WHITE, "USE: /addvehicletodealer <dealerid> <modelid> <price>");
	if(modelid < 400 || modelid > 611) return SendClientMessage(playerid, COLOR_RED, "Model ID bethween 400 and 611");
	if(dealerid < 0 || dealerid > createdDealer) return SendClientMessage(playerid, COLOR_RED, "Invalid Dealer ID");
	new string[145];
	AddVehicleToDealership(dealerid, modelid, price);
	format(string,sizeof(string), "[AINFO] %s added the vehicle %s (ID: %d) to the dealership ID: %d",PlayerName(playerid), VehicleNames[modelid-400], modelid, dealerid);
	AdministratorMessage(COLOR_YELLOW, string);
	return 1;
}

CMD:c(cmdid, playerid, params)
{
	new str[60];
	format(str,sizeof(str), "PORCODIO: %d", GetPlayerDealership(playerid));
	SendClientMessage(playerid, -1, str);
	return 1;
}

GetPlayerDealership(playerid)
{
	for(new i = 0; i < createdDealer; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, DealershipInfo[i][dPosX], DealershipInfo[i][dPosY], DealershipInfo[i][dPosZ]))
		{
			printf("PORCODIO: %d",i);
			return i;
		}
	}
	return -1;
}

forward OnDealerVehicleInsert(dealerid, vehid);
public OnDealerVehicleInsert(dealerid, vehid)
{
	DealerVehicles[dealerid][vehid][dID] = cache_insert_id();
	return 1;
}

forward OnDealerShipInsert(dealerid);
public OnDealerShipInsert(dealerid)
{
	DealershipInfo[dealerid][dID] = cache_insert_id();
	return 1;
}

stock SavePlayer(playerid)
{
	if(!IsPlayerNPC(playerid))
	{
		if(regchat[playerid]==false)
		{
			new string[256];
			if(PlayerInfo[playerid][sS]==1)
			{
				new Float:Pos[5];
				GetPlayerPos(playerid,Pos[0],Pos[1],Pos[2]);
				GetPlayerFacingAngle(playerid,Pos[3]);
				PlayerInfo[playerid][pSpawn][0] = Pos[0];
				PlayerInfo[playerid][pSpawn][1] = Pos[1];
				PlayerInfo[playerid][pSpawn][2] = Pos[2];
				PlayerInfo[playerid][pSpawn][3] = Pos[3];
				PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
				PlayerInfo[playerid][pVWorld] = GetPlayerVirtualWorld(playerid);
				mysql_format(serverdb, string,sizeof(string),"UPDATE users SET SpawnX = %f, SpawnY = %f, SpawnZ = %f, SpawnA = %f, Inter = %d, vWorld = %d WHERE Username= '%e'",PlayerInfo[playerid][pSpawn][0],PlayerInfo[playerid][pSpawn][1],PlayerInfo[playerid][pSpawn][2],PlayerInfo[playerid][pSpawn][3],PlayerInfo[playerid][pVWorld],PlayerInfo[playerid][pInt],PlayerName(playerid));
				mysql_tquery(serverdb, string);
			}
			if(InCopChase[playerid] == false){PlayerInfo[playerid][pS] = GetPlayerSkin(playerid);
			}
			else{PlayerInfo[playerid][pS] = PlayerInfo[playerid][pSP];
			}
			PlayerInfo[playerid][pL] = GetPlayerScore(playerid);
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
			mysql_format(serverdb, string,sizeof(string),"UPDATE users SET Admin = %d, Level = %d, Cash = %d, Skin = %d, SpawnType = %d WHERE Username = '%e'",PlayerInfo[playerid][pA],PlayerInfo[playerid][pL],PlayerInfo[playerid][pC],PlayerInfo[playerid][pS],PlayerInfo[playerid][sS],PlayerName(playerid));
			mysql_tquery(serverdb, string);
		}
	}
	return 1;
}

forward AntiCheatVeh(playerid);
public AntiCheatVeh(playerid)
{
	new Float:vH,Float:x,Float:y,Float:z, Float:a,panels,doors,lights,tires;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	/*for(new vehid=0;vehid<MAX_VEHICLES;vehid++){
	new pname[24];
	GetPlayerName(playerid,pname,sizeof(pname));
	if(strlen(pname)==strlen(vInfo[vehid][vOwner]) && !strcmp(pname,vInfo[vehid][vOwner],false,MAX_PLAYER_NAME) && vInfo[vehid][vComprato] && vInfo[vehid][vvalido]){*/
	new vehid = GetPlayerVehicleID(playerid);
	GetVehicleDamageStatus(vehid, panels, doors, lights, tires);
	GetVehicleHealth(vehid, vH);
	GetVehiclePos(vehid, x, y, z);
	GetVehicleZAngle(vehid, a);
	vInfo[vehid][vHealth] = vH;
	vInfo[vehid][vCSpawn][0] = x; 
	vInfo[vehid][vCSpawn][1] = y; 
	vInfo[vehid][vCSpawn][2] = z; 
	vInfo[vehid][vCSpawn][3] = a;
	vInfo[vehid][vPanelsDmg] = panels; 
	vInfo[vehid][vDoorsDmg] = doors; 
	vInfo[vehid][vLightsDmg] = lights;  
	vInfo[vehid][vTiresDmg] = tires;
	}
	return 1;
}

public EngineOn(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	new engine, lights, alarm, doors, bonnet, boot, objective;
	TogglePlayerControllable(playerid, 1);
	TryEngine[playerid] = 0;
    vInfo[vehicleid][vStatusMotore]=ENGINE_STARTED;
    PlayerPlaySound(playerid, 1085, 0, 0, 0);
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vehicleid, true, lights, alarm, doors, bonnet, boot, objective);
	return 1;
}

stock SaveVeh(vehid)
{
	new string[256];
	new viid = vInfo[vehid][vVSpawnID];
	new idbid = vInfo[viid][dbid];
	GetVehicleDamageStatus(vehid, vInfo[viid][vPanelsDmg],vInfo[viid][vDoorsDmg], vInfo[viid][vLightsDmg], vInfo[viid][vTiresDmg]);
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	mysql_format(serverdb, string,sizeof(string),"UPDATE pvehicles SET Color1 = '%d', Color2 = '%d', Plate = '%s', Locked = '%d', SpawnType = '%d', Health = '%f' WHERE vID = '%d'",
												vInfo[viid][vColor1],
												vInfo[viid][vColor2],
												vInfo[viid][vTarga],
												vInfo[viid][vStatusPortiere],
												vInfo[viid][vSpawnType],
												vInfo[viid][vHealth] ,idbid);
	mysql_tquery(serverdb, string);
    //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	if(vInfo[viid][vSpawnType] == 1)
	{
		mysql_format(serverdb, string,sizeof(string),"UPDATE pvehicles SET CurrentX = '%f', CurrentY = '%f', CurrentZ = '%f', CurrentA = '%f', SpawnX = '%f', SpawnY = '%f', SpawnZ = '%f', SpawnA = '%f' WHERE vID= '%d'",
									vInfo[viid][vCSpawn][0],
									vInfo[viid][vCSpawn][1],
									vInfo[viid][vCSpawn][2],
									vInfo[viid][vCSpawn][3],
									vInfo[viid][vCSpawn][0],
									vInfo[viid][vCSpawn][1],
									vInfo[viid][vCSpawn][2],
									vInfo[viid][vCSpawn][3], idbid);
		mysql_query(serverdb, string);
	}
	else
	{
		mysql_format(serverdb, string,sizeof(string),"UPDATE pvehicles SET SpawnX = '%f', SpawnY = '%f', SpawnZ = '%f', SpawnA = '%f' WHERE vID = '%d'",
									vInfo[viid][vSpawn][0],
									vInfo[viid][vSpawn][1],
									vInfo[viid][vSpawn][2],
									vInfo[viid][vSpawn][3],idbid);
		mysql_tquery(serverdb, string);
	}
    //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	mysql_format(serverdb, string,sizeof(string),"UPDATE pvehicles SET Paintjob = '%d', Panelsdmg = '%d', Doorsdmg = '%d', Lightsdmg = '%d', Tiresdmg = '%d', vKm = '%d' WHERE vID = '%d'",
								vInfo[viid][vPaintJob],
								vInfo[viid][vPanelsDmg],
								vInfo[viid][vDoorsDmg],
								vInfo[viid][vLightsDmg],
								vInfo[viid][vTiresDmg],
								vInfo[viid][vKm],idbid);
	mysql_tquery(serverdb, string);
	return 1; 
}

stock AdministratorMessage(color,const string[])
{
	foreach(new i : Player)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][pA] >= 1)
			{
				SendClientMessage(i, color, string);
			}
		}
	}
	return 1;
}	

stock GetPlayerCash(playerid){
    return PlayerInfo[playerid][pC];}

public OnPlayerCheat(playerid, cheatid, source[])
{
	if(IsPlayerConnected(playerid))
	{
		new elc_str[120],elc_reason[60],elc_name[MAX_PLAYER_NAME];
		GetPlayerName(playerid, elc_name, sizeof(elc_name));
		format(elc_str,sizeof(elc_str),"( ! ) %s probably used: ",elc_name);
		switch(cheatid)
		{
			case 1: format(elc_reason,sizeof(elc_reason),"Money Cheat ( %s $ )",source);
			case 2: format(elc_reason,sizeof(elc_reason),"Weapon Cheat ( %s )",source);
			case 3: format(elc_reason,sizeof(elc_reason),"Ammo Cheat ( %s Bullets )",source);
			case 4: format(elc_reason,sizeof(elc_reason),"Ammo Block Cheat");
			case 5: format(elc_reason,sizeof(elc_reason),"Speed Cheat");
			case 6: format(elc_reason,sizeof(elc_reason),"Airbreak/Teleport Cheat");
			case 7: format(elc_reason,sizeof(elc_reason),"Health Cheat");
			case 8: format(elc_reason,sizeof(elc_reason),"Armour Cheat");
			case 9: format(elc_reason,sizeof(elc_reason),"Vehicle Spawn Cheat");
			case 10: format(elc_reason,sizeof(elc_reason),"Vehicle Crasher");
		}
		strcat(elc_str,elc_reason);
		AdministratorMessage(COLOR_RED,elc_str);
		PlayerInfo[playerid][pWarn]++;
		if(PlayerInfo[playerid][pWarn]>=10 && PlayerInfo[playerid][pA]==0)
		{
			new query[150],string[150],ip[16];
			format(string,sizeof(string),"[WARNING:] %s as suspected cheat and it was banned from this server!",PlayerName(playerid));
			AdministratorMessage(COLOR_RED, string);
			format(string,sizeof(string),"[WARNING:] You have been banned from this server: %s",elc_reason);
			SendClientMessage(playerid,COLOR_RED, string);
			GetPlayerIp(playerid,ip,sizeof(ip));
			mysql_format(serverdb, query,sizeof(query),"UPDATE users SET Ban = 1, BanRason = '%s', BanFrom='Anticheat', Ip = '%s' WHERE Username='%s'",elc_reason,ip,PlayerName(playerid));
			mysql_tquery(serverdb, query);
			printf(string);
			ELC_AC_ResetPlayerWeapons(playerid);
			SetTimerEx("KickPlayer", 1000, false, "i", playerid);
		}
		else KillTimer(CheatPlayerInfo[playerid][elc_timer]);
	}
	return 1;
}

forward SpawnUnity(playerid);
public SpawnUnity(playerid)
{
	TogglePlayerSpectating(playerid, false);
	regchat[playerid]=false;
	SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pS],1743.4130, -1860.5731, 13.5786, 355.6280, 0, 0, 0, 0, 0, 0 );
	ELC_AC_SetPlayerPos(playerid,1743.4130, -1860.5731, 13.5786);
	SetPlayerSkin(playerid,PlayerInfo[playerid][pS]);
	PlayerInfo[playerid][pSpawn][0] = 1743.4130;
	PlayerInfo[playerid][pSpawn][1] = -1860.5731;
	PlayerInfo[playerid][pSpawn][2] = 13.5786;
	SetPVarInt(playerid,"inreg",0);
	new query[160];
	mysql_format(serverdb, query,sizeof(query),"UPDATE users SET fLogin = 1, SpawnX = '%f', SpawnY = '%f', SpawnZ = '%f', SpawnA = '%f' WHERE Username = '%e'",PlayerInfo[playerid][pSpawn][0],
								PlayerInfo[playerid][pSpawn][1],
								PlayerInfo[playerid][pSpawn][2],
								PlayerInfo[playerid][pSpawn][3], PlayerName(playerid));
	mysql_tquery(serverdb, query);
	GivePlayerCash(playerid,10000);
	PlayerInfo[playerid][fL] = 1;
	return 1;
}

CMD:spawn(cmdid, playerid, params[])
{
	new string[80],strings[100];
	if(PlayerInfo[playerid][sS] == 0) strcpy(string,"{46B800}ON", sizeof(string));
	if(PlayerInfo[playerid][sS] == 1) strcpy(string,"{FF0000}OFF {FFFFFF}(Other)", sizeof(string));
	format(strings,sizeof(strings),"Static Spawn: %s\nSave your position",string);
	Dialog_Show(playerid,SpawnSelection,DIALOG_STYLE_LIST,"Spawn Settings",strings,"Select","Exit");
	return 1;
}



CMD:vehrot(cmdid,playerid,params[])
{
	if(PlayerInfo[playerid][pA]<9) return SendClientMessage(playerid,-1,"SERVER: Unknown command.");
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER){
		new Float:rx,Float:ry,Float:rz;
		GetVehicleRotation(GetPlayerVehicleID(playerid),rx,ry,rz);
		printf("CORD MACCHINA: - %f - %f - %f",rx,ry,rz);
	}
	return 1;}

/*CMD:copdebug(cmdid, playerid, params[]){
	CopChaseCar[0] = CreateVehicle(542, 2461.49, -1661.01, 13.30, 90.0, 0, 0, 0);
    vInfo[CopChaseCar[0]][vid] = 542;
    vInfo[CopChaseCar[0]][vVSpawnID] = CopChaseCar[0];
    PutPlayerInVehicle(playerid, CopChaseCar[0], 0);
    return 1;
}*/

CMD:kickall(cmdid, playerid, params[]){
	if(PlayerInfo[playerid][pA]<9) return SendClientMessage(playerid,-1,"SERVER: Unknown command.");
	foreach(Player,i){
		KickEx(i,"RESTART");
	}
	SendRconCommand("password stocazzo");
	return 1;}

CMD:a(cmdid, playerid, params[]){
	if(PlayerInfo[playerid][pA]<1) return SendClientMessage(playerid,-1,"SERVER: Unknown command.");
	new message[200],string[200];
	if(sscanf(params, "s[200]", message)) return SendClientMessage(playerid,-1, "Use: /a [message]");
	new lunghezzarigo = strlen(message);
    if(lunghezzarigo > 60){
	new frase1[90];
	strmid(frase1, message, 0, 61);
	new frase2[90];
	strmid(frase2, message, 61, lunghezzarigo);
	format(string, sizeof(string),""EMB_ORANGE"[STAFF CHAT:] "EMB_YELLOW"%s [%d] [%d] say: %s..",PlayerName(playerid), playerid, PlayerInfo[playerid][pA], frase1);
	AdministratorMessage(0xFFC800FF, string);
	format(string, sizeof(string), "..%s", frase2);
	AdministratorMessage(0xFFC800FF, string);
	printf(string);
	return 1;}
    format(string, sizeof(string), ""EMB_ORANGE"[STAFF CHAT:] "EMB_YELLOW"%s [%d] [%d] say: %s",PlayerName(playerid),playerid,PlayerInfo[playerid][pA],message);
	AdministratorMessage(0xFFC800FF, string);
	printf(string);
	return 1;}

CMD:kick(cmdid, playerid, params[]){
	if(PlayerInfo[playerid][pA]<2) return SendClientMessage(playerid,-1,"SERVER: Unknown command.");
	new reason[200],string[200],id;
	if(sscanf(params, "ds[200]",id, reason)) return SendClientMessage(playerid,-1, "Use: /kick ID [reason]");
	format(string, sizeof(string),"[KICK:] The Admin %s has kicked the Player %s - Reason: %s",PlayerName(playerid),PlayerName(id),reason);
	AdministratorMessage(COLOR_RED, string);
	format(string,sizeof(string),"You has been kicked from this server from %s. Reason: %s",PlayerName(playerid),reason);
	KickEx(id, string);
	return 1;}

CMD:ban(cmdid, playerid, params[])
{
	if(PlayerInfo[playerid][pA]<4) return SendClientMessage(playerid,-1,"SERVER: Unknown command.");
	new reason[200],string[200],id,query[180],ip[16];
	if(sscanf(params, "ds[200]",id, reason)) return SendClientMessage(playerid,-1, "Use: /ban ID [reason]");
	format(string, sizeof(string),"[BAN:] The Admin %s has banned the Player %s - Reason: %s",PlayerName(playerid),PlayerName(id),reason);
	AdministratorMessage(COLOR_RED, string);
	printf(string);
	format(string,sizeof(string),"You has been banned from this server from %s. Reason: %s",PlayerName(playerid),reason);
	SetPVarInt(id, "inban", 1);
	GetPlayerIp(id,ip,sizeof(ip));
	mysql_format(serverdb, query,sizeof(query),"UPDATE users SET Ban = '1', BanReason= '%e', BanFrom = '%e', Ip = '%e', Serial = '%e' WHERE username = '%e'",reason,PlayerName(playerid),ip,ReturnGPCI(id),PlayerName(id));
	mysql_tquery(serverdb, query);
	KickEx(id, string);
	return 1;
}

CMD:unban(cmdid, playerid, params[])
{
	if(PlayerInfo[playerid][pA]<4) return SendClientMessage(playerid,-1,"SERVER: Unknown command.");
	new name[MAX_PLAYER_NAME],query[90];
	if(sscanf(params, "s[MAX_PLAYER_NAME]",name)) return SendClientMessage(playerid,-1, "Use: /unban [name]");
	mysql_format(serverdb, query, sizeof(query), "SELECT Ban,BanReason,BanFrom FROM Users WHERE username = '%e'", name);
	mysql_tquery(serverdb, query, "UnbanPlayer", "ds", playerid, name);
	return 1;
}

stock UnbanPlayer(playerid, const name[])
{
	new count = cache_get_row_count(count);
	if(count == 0) return SendClientMessage(playerid, COLOR_RED, "The user is not banned");
	new query[90];
	mysql_format(serverdb, query, sizeof(query), "UPDATE users SET Ban = '0' WHERE username = '%e'", name);
	mysql_tquery(serverdb, query);
	format(string,sizeof(string), "[UNBAN:] The administrator %s has unbanned %s", PlayerName(playerid), name);
	AdministratorMessage(COLOR_RED, string);
	return 1;
}


CMD:slap(cmdid, playerid, params[])
{
	if(PlayerInfo[playerid][pA]<6) return SendClientMessage(playerid,-1,"SERVER: Unknown command.");
	new string[200],id,Float:pPos[3];
	if(sscanf(params, "d",id)) return SendClientMessage(playerid,-1, "Use: /slap [id]");
    GetPlayerPos(id,pPos[0],pPos[1],pPos[2]);
    ELC_AC_SetPlayerPos(id,pPos[0],pPos[1],pPos[2]+20.0);
    format(string, sizeof(string),"[SLAP:] The Admin %s has slapped the Player %s",PlayerName(playerid),PlayerName(id));
	AdministratorMessage(COLOR_RED, string);
	return 1;
}

CMD:slaplus(cmdid, playerid, params[])
{
	if(PlayerInfo[playerid][pA]<9) return SendClientMessage(playerid,-1,"SERVER: Unknown command.");
	new string[200],id,Float:pPos[3];
	if(sscanf(params, "d",id)) return SendClientMessage(playerid,-1, "Use: /slaplus [id]");
    GetPlayerPos(id,pPos[0],pPos[1],pPos[2]);
    ELC_AC_SetPlayerPos(id,pPos[0],pPos[1],pPos[2]+200.0);
    format(string, sizeof(string),"[SLAP-PLUS:] The Admin %s has slapped the Player %s",PlayerName(playerid),PlayerName(id));
	AdministratorMessage(COLOR_RED, string);
	return 1;
}

CMD:n(cmdid, playerid, params[])
{
	if(PlayerInfo[playerid][pA]<5) return SendClientMessage(playerid,-1,"SERVER: Unknown command.");
	new message[200],string[200];
	if(sscanf(params, "s[200]", message)) return SendClientMessage(playerid,-1, "Use: /n [message]");
	new lunghezzarigo = strlen(message);
    if(lunghezzarigo > 60)
    {
		new frase1[90];
		strmid(frase1, message, 0, 61);
		new frase2[90];
		strmid(frase2, message, 61, lunghezzarigo);
		format(string, sizeof(string), "{0D76FF}%s: %s say: %s..",RankStaff(playerid),PlayerName(playerid) ,frase1);
		SendClientMessageToAll(0x409FFF, string);
		format(string, sizeof(string), "{0D76FF}..%s", frase2);
		SendClientMessageToAll(0x409FFF, string);
		printf(string);
		return 1;
	}
	format(string,sizeof(string),"{0D76FF}%s %s say: %s",RankStaff(playerid),PlayerName(playerid), message);
	SendClientMessageToAll(0x409FFF, string);
	printf(string);
	return 1;
}

CMD:vmenu(cmdid, playerid, params[])
{
	new string[256],z=0,vvid=-1,pname[MAX_PLAYER_NAME];
	if(IsPlayerInAnyVehicle(playerid))vvid=GetPlayerVehicleID(playerid);
	for(new vehid=0;vehid<MAX_VEHICLES;vehid++)
	{
		GetPlayerName(playerid,pname,sizeof(pname));
		if(strlen(pname)==strlen(vInfo[vehid][vOwner]) && !strcmp(pname,vInfo[vehid][vOwner],false,MAX_PLAYER_NAME) && vInfo[vehid][vComprato] && vInfo[vehid][vvalido])
		{
			if(vehid==0)format(string,sizeof(string),"%s - [%d]",GetVehicleModelName(vInfo[vehid][vid]),vehid);
			else format(string,sizeof(string),"%s\n%s - [%d]",string,GetVehicleModelName(vInfo[vehid][vid]),vehid);
			if(vehid==vvid) format(string,sizeof(string),"%s (Current)",string);
			VMenuInfo[playerid][itemvid][z]=vehid;
			z++;
		}
		else VMenuInfo[playerid][itemvid][vehid]=-1;
	}
	if(z==0) return SendClientMessage(playerid,COLOR_RED,"You don't have any vehicles.");
	Dialog_Show(playerid, vMenu, DIALOG_STYLE_LIST, "VMenu - Your vehicles", string, "Select", "Cancel");
	return 1;
}

CMD:goto(cmdid, playerid, params[])
{
	if(PlayerInfo[playerid][pA]<1) return SendClientMessage(playerid,-1,"SERVER: Unknown command.");
	new id,string[200],Float:plocx,Float:plocy,Float:plocz;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid,-1, "Use: /goto [id]");
	if(IsPlayerNPC(id)) return SendClientMessage(playerid, COLOR_RED, "[ERROR:] You can't use the goto with the bot.");
	if(IsPlayerConnected(id))
	{
		if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_RED,"[ERROR:] The player is not online.");
		new vehicleid = GetPlayerVehicleID(playerid);
		GetPlayerPos(id, plocx, plocy, plocz);
		ELC_AC_SetPlayerPos(playerid,plocx,plocy+2, plocz);
		SetPlayerInterior(playerid, GetPlayerInterior(id));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(id));
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			format(string,sizeof(string),"[GOTO:] You have been teleport to %s.",PlayerName(id));
			SendClientMessage(playerid,COLOR_RED,string);
			format(string,sizeof(string),"[GOTO:] The admin %s it is transported by you.",PlayerName(playerid));
			SendClientMessage(id,COLOR_RED,string);
		}
		else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			format(string,sizeof(string),"[GOTO:] You have been teleport to %s with your vehicle.",PlayerName(id));
			SendClientMessage(playerid,COLOR_RED,string);
			format(string,sizeof(string),"[GOTO:] The admin %s it is transported by you with the vehicle.",PlayerName(playerid));
			SendClientMessage(id,COLOR_RED,string);
			ELC_AC_SetVehiclePos(vehicleid,plocx,plocy,plocz);
			ELC_AC_PutPlayerInVehicle(playerid, vehicleid, 0);
		}
	}
	else SendClientMessage(playerid, COLOR_RED,"[GOTO:] This user is not connected.");
	return 1;
}

CMD:fixveh(cmdid, playerid, params[])
{
	if(PlayerInfo[playerid][pA]<1) return SendClientMessage(playerid,-1,"SERVER: Unknown command."); 
	new string[150];
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid;
		if (sscanf(params, "d", vehicleid))return SendClientMessage(playerid, COLOR_RED, "Use: /fixveh [vehicleid]");
		format(string,sizeof(string),"[INFO:] The admin %s has fixed the vehicle ID:%d.",PlayerName(playerid),vehicleid); 
		AdministratorMessage(COLOR_RED,string); 
		new panels,doors,lights,tires;
		UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
		SetVehicleHealth(vehicleid, 999.0);
	}
	else
	{
		format(string,sizeof(string),"[INFO:] The admin %s has fixed the current vehicle ID:%d.",PlayerName(playerid),GetPlayerVehicleID(playerid)); 
		AdministratorMessage(COLOR_RED,string); 
		new panels,doors,lights,tires;
		UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, tires);
		SetVehicleHealth(GetPlayerVehicleID(playerid), 999.0);
	}	
	return 1;
}

CMD:setskin(cmdid, playerid, params[]){
	if(PlayerInfo[playerid][pA]<1) return SendClientMessage(playerid,-1,"SERVER: Unknown command."); 
	new skin, id, string[150];
	if(sscanf(params,"ud",id,skin)) return SendClientMessage(playerid, -1, "Usa: /setskin [PartOfName/ID] [Skin]");
	if(skin<1 || skin>299) return SendClientMessage(playerid, COLOR_RED,"[ERROR:] 1-299!"); 
	PlayerInfo[id][pS] = skin; 
	SetPlayerSkin(id, skin);
	format(string,sizeof(string),""RED"%s "RED"%s has set to %s(%d) the Skin ID: %d",RankStaff(playerid),PlayerName(playerid),PlayerName(id),id,skin);
	AdministratorMessage(COLOR_RED, string);
	printf(string);
	return 1;}

CMD:givemoney(cmdid, playerid, params[]){
	if(PlayerInfo[playerid][pA]<9) return SendClientMessage(playerid,-1,"SERVER: Unknown command."); 
	new id,money,string[200];
	if (sscanf(params, "dd", id,money))return SendClientMessage(playerid, COLOR_RED, "Use: /givemoney [id] [money]");
	format(string,sizeof(string),""RED"%s "RED"%s gived to %s %d$.",RankStaff(playerid),PlayerName(playerid),PlayerName(id),money); 
	AdministratorMessage(COLOR_RED,string); 
	printf(string);
	GivePlayerCash(id,money);
	return 1;}

CMD:givewep(cmdid, playerid, params[]){
	if(PlayerInfo[playerid][pA]<1) return SendClientMessage(playerid,-1,"SERVER: Unknown command."); 
	if(PlayerInfo[playerid][pA]<8){
	new id,weapon,ammo,string[150],gunname[32];
	if(sscanf(params,"ddd",id,weapon,ammo)) return SendClientMessage(playerid, -1, "Use: /givewep [ID] [Weapon] [Ammo]");
	if(weapon == 38) return SendClientMessage(playerid,-1,"SERVER: Unknown command."); 
	ELC_AC_GivePlayerWeapon(id, weapon, ammo);
	GetWeaponName(weapon,gunname,sizeof(gunname));
	SetTimerEx("SaveWep",500,false,"i",id);
	format(string,sizeof(string),""RED"%s "RED"%s set to %s(%d) Wep %s ID: %d - Ammo: %d",RankStaff(playerid),PlayerName(playerid),PlayerName(id),id,gunname,weapon,ammo);
	AdministratorMessage(COLOR_RED, string);}
	else if(PlayerInfo[playerid][pA]>8){
	new id,weapon,ammo,string[150],gunname[32];
	if(sscanf(params,"ddd",id,weapon,ammo)) return SendClientMessage(playerid, -1, "Use: /givewep [ID] [Weapon] [Ammo]");
	ELC_AC_GivePlayerWeapon(id, weapon, ammo);
	GetWeaponName(weapon,gunname,sizeof(gunname));
	SetTimerEx("SaveWep",500,false,"i",id);
	format(string,sizeof(string),""RED"%s "RED"%s set to %s(%d) Wep %s ID: %d - Ammo: %d",RankStaff(playerid),PlayerName(playerid),PlayerName(id),id,gunname,weapon,ammo);
	AdministratorMessage(COLOR_RED, string);}
	return 1;}

CMD:j(cmdid, playerid, params[]){
	if(PlayerInfo[playerid][pA]<1) return SendClientMessage(playerid,-1,"SERVER: Unknown command."); 
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USEJETPACK);
	usejet[playerid] = true;
	return 1;}

CMD:givej(cmdid, playerid, params[])
{
	if(PlayerInfo[playerid][pA]<1) return SendClientMessage(playerid,-1,"SERVER: Unknown command."); 
	new id;
	if(sscanf(params,"d",id)) return SendClientMessage(playerid, -1, "Use: /givej [ID]");
	SetPlayerSpecialAction(id,SPECIAL_ACTION_USEJETPACK);
	usejet[id] = true;
	return 1;
}

CMD:gethere(cmdid, playerid, params[])
{
	if(PlayerInfo[playerid][pA]<1) return SendClientMessage(playerid,-1,"SERVER: Unknown command.");
	new id,Float:plocx,Float:plocy,Float:plocz;
	if(sscanf(params, "d", id)) return SendClientMessage(playerid,-1, "Use: /gethere [id]");
	if(IsPlayerNPC(id)) return SendClientMessage(playerid, COLOR_RED, "[ERROR:] You can't use the gethere with the bot.");
	if(IsPlayerConnected(playerid))
	{
		if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_RED,"[ERROR:] The player is not online.");
		GetPlayerPos(playerid, plocx, plocy, plocz);
		ELC_AC_SetPlayerPos(id,plocx,plocy+2, plocz);
		SetPlayerInterior(id, GetPlayerInterior(id));
		SetPlayerVirtualWorld(id, GetPlayerVirtualWorld(playerid));
	}
	return 1;
}

CMD:getherev(cmdid, playerid, params[])
{
	new id, Float:x, Float:y, Float:z;
	if(PlayerInfo[playerid][pA]<1) return SendClientMessage(playerid,-1,"SERVER: Unknown command.");
	if (sscanf(params, "d", id)) SendClientMessage(playerid, COLOR_RED, "[USE:] /getherev [vehicle]");
	GetPlayerPos(playerid,x,y,z);
	SetVehiclePos(id,x+4,y,z);
	return 1;
}

CMD:copchase(cmdid, playerid, params[])
{
	if(CopChase[Started] == true) return SendClientMessage(playerid, COLOR_RED, "The copchase already started.");
	if(InCopChase[playerid] == true) return SendClientMessage(playerid, COLOR_RED, "You are already in copchase.");
	if(CopChase[Lobby] == false && CopChase[Started] == false) OpenCopChase(playerid);
	else JoinCopChase(playerid);
	return 1;
}

ALT:cc = CMD:copchase;

OpenCopChase(playerid)
{
	CopChase[Lobby] = true;
	new string[145];
	format(string,sizeof(string), ""EMB_ORANGE"[INFO:] %s started the copchase, use /copchase to join",PlayerName(playerid));
	SendClientMessageToAll(-1, string);
	JoinCopChase(playerid);
	CopChase[Timer] = SetTimer("StartCopChase", 1000, true);
	return 1;
}

forward StartCopChase();
public StartCopChase()
{
	new string[145];
	if(copcount > 0)
	{	
		switch(copcount)
		{
			case 0..10: format(string,sizeof(string), "~r~%d",copcount);
			case 11..20: format(string,sizeof(string), "~y~%d",copcount);
			case 21..30: format(string,sizeof(string), "~g~%d",copcount);
		}
		foreach(new i : Player)
		{
			if(InCopChase[i] == true) GameTextForPlayer(i, string, 1000, 3);
			else continue;
		}
		copcount--;
	}
	else if(copcount <= 0)
	{
		KillTimer(CopChase[Timer]);
		if(CopChase[Players] <= 1) return EndCopChase(3);
		new suspect = SelectSuspect();
		PlayerRole[suspect] = SUSPECT;
		new Cops = ReturnCops();
		foreach(new i : Player)
		{
			if(InCopChase[i] == false) continue;
			if(PlayerRole[i] == SUSPECT)
			{
				CopChase[ChaseCar][0] = CreateVehicle(542, CopChaseCars[0][0], CopChaseCars[0][1], CopChaseCars[0][2], CopChaseCars[0][3], -1, -1, -1);
				ELC_AC_PutPlayerInVehicle(i, CopChase[ChaseCar][0], 0);
				TogglePlayerControllable(i, 0);
				ELC_AC_GivePlayerWeapon(i, 24, 150);
				SpawnedChaseCars++;
				printf("SpawnedCC: %d, CarID: %d",SpawnedChaseCars, CopChase[ChaseCar][0]);
				format(string,sizeof(string), "Suspect:_%s",PlayerName(i));
				TextDrawSetString(G_CopChaseTD[0], string);
				if(Cops > 4)
				{
					ELC_AC_GivePlayerWeapon(i, 30, 300);
					SendClientMessage(i, COLOR_YELLOW, "Since there are so many cops you will be given an extra AK47 with 300 rounds");
				}
			}
			else if(PlayerRole[i] == COP)
			{
				CopChase[ChaseCar][SpawnedChaseCars] = CreateVehicle(596,  CopChaseCars[SpawnedChaseCars][0], CopChaseCars[SpawnedChaseCars][1], CopChaseCars[SpawnedChaseCars][2], CopChaseCars[SpawnedChaseCars][3], -1, -1, -1);
				ELC_AC_PutPlayerInVehicle(i, CopChase[ChaseCar][SpawnedChaseCars], 0);
				TogglePlayerControllable(i, 0);
				ELC_AC_GivePlayerWeapon(i, 24, 150);
				SpawnedChaseCars++;
				printf("SpawnedCC: %d, CarID: %d",SpawnedChaseCars, CopChase[ChaseCar][SpawnedChaseCars]);
				format(string,sizeof(string), "Officer:_%s",PlayerName(i));
				PlayerTextDrawSetString(i, P_CopChaseTD[i][0], string);
			}
			Loop(t, 3)
			{
				
				if(t == 0 && PlayerRole[i] == SUSPECT) continue;
				TextDrawShowForPlayer(i, G_CopChaseTD[t]);
			}
			Loop(t, 2)
			{	
				if(PlayerRole[i] == SUSPECT) continue;
				PlayerTextDrawShow(i, P_CopChaseTD[i][t]);
			}
		}
		SetTimer("Unfreeze",3000,false);
		format(string,sizeof(string), "[INFO:] Copchase will start in 3 seconds, the suspect is: %s, Total Cops: %d", PlayerName(suspect), Cops);
		SendCopChaseMessage(COLOR_LIGHTYELLOW, string);
		CopChase[Started] = true;
		CopChase[Lobby] = false;
		CopChase[Timer2] = SetTimer("CopChaseTimer", 1000, true);
	}
	return 1;
}

forward CopChaseTimer();
public CopChaseTimer()
{
	CopCTimer--;
	new time[25];
	switch(CopCTimer)
	{
		case 300..600: format(time,sizeof(time), "Time_Remaning:_%d", floatround(CopCTimer/60));
		case 100..299: format(time,sizeof(time), "Time_Remaning:_~y~%d",floatround(CopCTimer/60));
		case 0..99: format(time,sizeof(time), "Time_Remaning:_~r~%d",floatround(CopCTimer/60));
	}
	TextDrawSetString(G_CopChaseTD[2], time);
	format(time, sizeof(time), "Cops_Remaning:_%d",ReturnCops());
	TextDrawSetString(G_CopChaseTD[1], time);
	if(CopCTimer <= 0) EndCopChase(SUSPECT);
	return 1;
}

EndCopChase(winner)
{
	KillTimer(CopChase[Timer2]);
	switch(winner)
	{
		case COP:
		{
			SendCopChaseMessage(COLOR_LIGHTYELLOW, "The cops killed the suspect and won the copchase!");
			foreach(new p : Player)
			{
				if(InCopChase[p] == true)
				{
					if(PlayerRole[p] == SUSPECT) LeaveCopChase(p);
					else 
					{
						ELC_AC_GivePlayerMoney(p, 2000);
						PlayerInfo[p][pL]++;
						SendClientMessage(p, COLOR_LIGHTYELLOW, "You earned 2000$ and 1 level for winning the copchase");
						LeaveCopChase(p);
					}

				}
			}
		}
		case SUSPECT:
		{
			new Cops = ReturnCops();
			new string[145];
			format(string, sizeof(string), "The suspect managed to escape %d cops and won %d$ and %d levels!",Cops, (1250*Cops), (1*Cops));
			SendCopChaseMessage(COLOR_LIGHTYELLOW, string);
			foreach(new p : Player)
			{
				if(InCopChase[p] == false) continue;
				if(PlayerRole[p] == SUSPECT)
				{
					ELC_AC_GivePlayerMoney(p, (1250*Cops-1));
					PlayerInfo[p][pL] += (1250*Cops-1);
					LeaveCopChase(p);
				}
				else LeaveCopChase(p);
			}
		}
		default:
		{
			foreach(new p : Player)
			{
				if(InCopChase[p] == true) InCopChase[p] = false;
			}
			CopChase[Lobby] = false, CopChase[Started] = false;
		}
	}
	Loop(i, SpawnedChaseCars)
	{
		DestroyVehicle(CopChase[ChaseCar][i]);
		printf("Destoryed: %d",CopChase[ChaseCar][i]);
	}
	SpawnedChaseCars = 0;
	CopChase[Players] = 0;
	copcount = 30;
	CopCTimer = 600;
	CopChase[Started] = false;
	return 1;
}

LeaveCopChase(playerid)
{
	ELC_AC_ResetPlayerWeapons(playerid);
	RestorePlayerWeapons(playerid);
	SetPlayerVirtualWorld(playerid, 0);
	SpawnPlayer(playerid);
	Loop(t, 3) { TextDrawHideForPlayer(playerid, G_CopChaseTD[t]); }
	Loop(t, 2) { PlayerTextDrawHide(playerid, P_CopChaseTD[playerid][t]); }
	SetTimerEx("GivePWep", 1500, false, "d", playerid);
	if(PlayerRole[playerid] == SUSPECT)
	{
		InCopChase[playerid] = false;	
		PlayerRole[playerid] = COP;	
	}
	if(PlayerRole[playerid] == COP)
	{
		InCopChase[playerid] = false;
	}
	return 1;
}

forward Unfreeze();
public Unfreeze()
{
	foreach(new i : Player)
	{
		if(InCopChase[i] == false) continue;
		TogglePlayerControllable(i, 1);
		GameTextForPlayer(i, "~g~GO!", 1500, 3);
	}
	return 1;
}

ReturnCops()
{
	new cop;
	foreach(new i : Player)
	{
		if(InCopChase[i] == false) continue;
		if(PlayerRole[i] == COP) cop++;
	}
	return cop;
}

SelectSuspect()
{
	new RandomPlayer[MAX_PLAYERS+1];
	foreach(new i : Player)
	{
		if (IsPlayerConnected(i)) 
		{
			if(InCopChase[i] == false) continue;
			RandomPlayer[0] ++;
			RandomPlayer[RandomPlayer[0]] = i;
		}
	}
	if (RandomPlayer[0] == 0) return -1;
	return RandomPlayer[random(RandomPlayer[0])+1];
}

JoinCopChase(playerid)
{
	if(CopChase[Players] == 14) return SendClientMessage(playerid, COLOR_RED, "The copchase is full");
	CopChase[Players]++;
	SaveWep(playerid);
	ELC_AC_ResetPlayerWeapons(playerid);
	InCopChase[playerid] = true;
	new string[145];
	format(string,sizeof(string), ""EMB_ORANGE"[INFO:] %s joined the copchase, Players: %d/14",PlayerName(playerid), CopChase[Players]);
	SendCopChaseMessage(COLOR_ORANGE, string);
	return 1;
}

SendCopChaseMessage(color, const string[])
{
	foreach(new i : Player)
	{
		if(InCopChase[i] == false) continue;
		SendClientMessage(i, color, string);
	}
	return 1;
}

CMD:gotocoord(cmdid, playerid, params[]){
	if(PlayerInfo[playerid][pA]<1) return SendClientMessage(playerid,-1,"SERVER: Unknown command.");
	new string[150];
	new tmp[3][128];
	if (sscanf(params, "s[150]", string)) return SendClientMessage(playerid, COLOR_RED, "use: /gotocoord [x,y,z]");
	split(params, tmp, ',');
	new Float:x,Float:y,Float:z;
	x = strval(tmp[0]),y = strval(tmp[1]),z = strval(tmp[2]);
	ELC_AC_SetPlayerPos(playerid, x, y, z);
	return 1;}

CMD:sethp(cmdid, playerid, params[]){
	if(PlayerInfo[playerid][pA]<1) return SendClientMessage(playerid,-1,"SERVER: Unknown command.");
	new id,Float:health,string[150]; 
	if(sscanf(params,"df",id,health)) return SendClientMessage(playerid,COLOR_RED,"Use: /sethp [id] [amount]");
	ELC_AC_SetPlayerHealth(id,health);
	format(string,sizeof(string),"[INFO:] The admin %s has set to %s %0.1f Health.",PlayerName(playerid),PlayerName(id),health); 
	AdministratorMessage(COLOR_RED,string); 
	return 1;}

CMD:joinrace(cmdid, playerid, params[]){
	new rid;
	if(sscanf(params, "d",rid)) return SendClientMessage(playerid, -1, ""EMB_RED"[ERROR:]"EMB_WHITE" USE: /joinrace <raceid>"), SendClientMessage(playerid, -1, ""EMB_GREEN"[INFO:]"EMB_WHITE" If you don't know the Race ID you can use /races!");
	if(rid > createdRace-1) return SendClientMessage(playerid, -1, ""EMB_RED"[ERROR:]"EMB_WHITE" Invalid race ID!");
	if(RaceInfo[rid][rJoinable] == false && RaceInfo[rid][rStarted] == false && InRace[playerid] == -1) OpenRaceLobby(rid);
	JoinRace(playerid, rid);
	return 1;}

CMD:quitrace(cmdid, playerid, params[]){
	if(InRace[playerid] == -1) return SendClientMessage(playerid, -1, ""EMB_RED"[ERROR:]"EMB_WHITE" You are not in a race!");
	new rstr[156];
	format(rstr,sizeof(rstr), ""EMB_GREEN"[INFO:]"EMB_ORANGE" %s"EMB_WHITE" left the race, %d racers remaning!",PlayerName(playerid), RaceInfo[InRace[playerid]][rRacers]-1);
	SendRaceMessage(InRace[playerid],rstr);
	LeaveRace(playerid, InRace[playerid]);
	return 1;}

CMD:races(cmdid, playerid, params[])
{
	new rstr[1024],requiredveh[24];
	Loop(i, createdRace)
	{
		switch (RaceInfo[i][rVeh])
		{
			case 0: strcpy(requiredveh, "Onfoot",24);
			case -1: strcpy(requiredveh, "Personal Vehicle",24);
			default: format(requiredveh,sizeof(requiredveh), "%s",VehicleNames[RaceInfo[i][rVeh]-400]);
		}
		if(i == 0) format(rstr,sizeof(rstr), "Status\tName (ID)\tVehicle Required\tPlayers\n");
		if(RaceInfo[i][rJoinable] == true) format(rstr,sizeof(rstr), "%s"EMB_YELLOW"[JOINABLE]\t"EMB_WHITE" %s (ID: %d)\t%s\t %d/%d\n",rstr,RaceInfo[i][rName],i,requiredveh,RaceInfo[i][rRacers],startingPos[i]);
		else if(RaceInfo[i][rStarted] == true) format(rstr,sizeof(rstr), "%s"EMB_RED"[RUNNING]\t"EMB_WHITE" %s (ID: %d)\t%s\t %d/%d\n",rstr,RaceInfo[i][rName],i,requiredveh,RaceInfo[i][rRacers],startingPos[i]);
		else format(rstr,sizeof(rstr), "%s"EMB_GREEN"[OPEN]\t"EMB_WHITE" %s (ID: %d)\t%s\n",rstr,RaceInfo[i][rName],i,requiredveh);
	}
	Dialog_Show(playerid, ListRaces, DIALOG_STYLE_TABLIST_HEADERS, "Races", rstr, "Join Race", "Exit");
	return 1;
}

CMD:createrace(cmdid, playerid, params[])
{
	if(PlayerInfo[playerid][pA]<1) return SendClientMessage(playerid,-1,"SERVER: Unknown command.");
	if(creatingRace == playerid) Dialog_Show(playerid, RaceCreation2, DIALOG_STYLE_LIST, "Creating Race", "Add Starting position here (Must be in a vehicle)\nAdd Checkpoint here\nComplete the race\n"EMB_RED"Abort!", "Confirm", "Exit");
	else if(creatingRace == -1) Dialog_Show(playerid, RaceCreation, DIALOG_STYLE_INPUT, "Create Race", "The race must have a name\nPlease insert a name not longer than 16 character here!", "Confirm", "Exit");
	else if(creatingRace != -1) return SendClientMessage(playerid, -1, ""EMB_RED"[ERROR:]"EMB_WHITE" Someone is creating a race, wait for him/her to finish!");
	creatingRace = playerid;
	return 1;
}

CMD:resetweapons(cmdid,playerid,params[]){
	if(PlayerInfo[playerid][pA]<5) return SendClientMessage(playerid,-1,"SERVER: Unknown command.");
	new id,string[150];
	if(sscanf(params,"d",id)) return SendClientMessage(playerid,COLOR_RED,"Use: /resetweapons [id]");
	format(string,sizeof(string),"[INFO:] Admin %s weapons reset to %s.",PlayerName(playerid),PlayerName(id)); 
	AdministratorMessage(COLOR_RED,string); 
	ELC_AC_ResetPlayerWeapons(id);
	ResetPWep(id);
	return 1;}

CMD:resetwarns(cmdid,playerid,params[]){
	if(PlayerInfo[playerid][pA]<5) return SendClientMessage(playerid,-1,"SERVER: Unknown command.");
	new id,string[150];
	if(sscanf(params,"d",id)) return SendClientMessage(playerid,COLOR_RED,"Use: /resetwarns [id]");
	format(string,sizeof(string),"[INFO:] Admin %s warns reset to %s.",PlayerName(playerid),PlayerName(id)); 
	AdministratorMessage(COLOR_RED,string); 
	PlayerInfo[id][pWarn]=0;
	return 1;}

CMD:repair(cmdid,playerid,params[]){
	for(new i=0;i<MAX_PAYNSPRY;i++)
	if(IsPlayerInRangeOfPoint(playerid,5.0,PrayInfo[i][PosP][0],PrayInfo[i][PosP][1],PrayInfo[i][PosP][2]) && GetPlayerVirtualWorld(playerid) == PrayInfo[i][virtualw]){
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsPlayerInVehicle(playerid, GetPlayerVehicleID(playerid))){
		new Float:cont, Float:molt, Float:hp = 999.0, ss[50],test,Float:vvh,string[150];
		GetVehicleHealth(GetPlayerVehicleID(playerid), vvh);
		cont = hp - vvh; 
		molt = cont*PrayInfo[i][pPrice]; 
		format(ss,sizeof(ss),"%1.f",molt);
		test = strval(ss);
		if(vvh == 999.0){
			return SendClientMessage(playerid,COLOR_RED,"[ERROR:] Your vehicle is not damaged.");}
		else if (vvh != 999.0){
		format(string,sizeof(string),"[ERROR:] You don't have %d$ to repair the vehicle.",test);
		if(GetPlayerCash(playerid)<test) return SendClientMessage(playerid,COLOR_RED,string);
		new panels,doors,lights,tires;
		UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, tires);
		SetVehicleHealth(GetPlayerVehicleID(playerid), 999.0);
		GivePlayerCash(playerid,-test);
		format(string,sizeof(string),"[INFO:] "EMB_ORANGE"You have repair the vehicle for %d$.",test);
		SendClientMessage(playerid,-1,string);}}}
	return 1;}

CMD:deletepaynspry(cmdid,playerid,params[])
{
	if(PlayerInfo[playerid][pA]<9) return SendClientMessage(playerid,-1,"SERVER: Unknown command.");
	new Float:x,Float:y,Float:z,string[150],query[150];
	GetPlayerPos(playerid,x,y,z);
	for(new i=0;i<MAX_PAYNSPRY;i++)
	{
		if(IsPlayerInRangeOfPoint(playerid,5.0,PrayInfo[i][PosP][0],PrayInfo[i][PosP][1],PrayInfo[i][PosP][2]))
		{
			format(string,sizeof(string),"[PAYNSPRY:] The Paynspry %d has been deleted by %s "RED"%s.",PrayInfo[i][dbID],RankStaff(playerid),PlayerName(playerid));
			AdministratorMessage(COLOR_RED,string);
			mysql_format(serverdb, query,sizeof(query),"DELETE FROM paynspry WHERE id = '%d' ",PrayInfo[i][dbID]);
			mysql_tquery(serverdb, query);
			printf(query);
			PrayInfo[i][PosP][0]=-1;
			PrayInfo[i][PosP][1]=-1;
			PrayInfo[i][PosP][2]=-1;
			DestroyPickup(PrayInfo[i][pPickup]);
			Delete3DTextLabel(PrayInfo[i][pLabel]);
			return 1;
		}
	}
	SendClientMessage(playerid, COLOR_RED,"[ERROR:] You need to be near a Pay'n'spray.");
	return 1;
}

CMD:createpray(cmdid,playerid,params[])
{
	if(PlayerInfo[playerid][pA]<9) return SendClientMessage(playerid,-1,"SERVER: Unknown command.");
	new price;
	if(sscanf(params,"d",price)) return SendClientMessage(playerid,COLOR_RED,"Use: /createpray [price]");
	CreatePayNSpry(playerid,price);
	return 1;
}

CMD:gotounity(cmdid,playerid,params[])
{
	if(PlayerInfo[playerid][pA]<1) return SendClientMessage(playerid,-1,"SERVER: Unknown command.");
	ELC_AC_SetPlayerPos(playerid,1743.4130, -1860.5731, 13.5786);
	SetPlayerVirtualWorld(playerid, 0);
	return 1;
}

CMD:setvw(cmdid,playerid,params[])
{
	if(PlayerInfo[playerid][pA]<9) return SendClientMessage(playerid,-1,"SERVER: Unknown command.");
	new id,vw;
	if(sscanf(params,"dd",id,vw)) return SendClientMessage(playerid,COLOR_RED,"Use: /setvw [id] [vw]");
	SetPlayerVirtualWorld(id,vw);
	return 1;
}

CMD:spec(cmdid,playerid,params[]){
	if(PlayerInfo[playerid][pA]<3) return SendClientMessage(playerid,-1,"SERVER: Unknown command.");
	new id;
	if(sscanf(params,"u",id))return SendClientMessage(playerid, Grey, "Usage: /spec [id]");
	if(id == playerid) return SendClientMessage(playerid,Grey,"You cannot spec yourself.");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, Grey, "Player not found!");
	if(IsSpecing[playerid] == 1) return SendClientMessage(playerid,Grey,"You are already specing someone.");
	GetPlayerPos(playerid,SpecX[playerid],SpecY[playerid],SpecZ[playerid]);
	Inter[playerid] = GetPlayerInterior(playerid);
	vWorld[playerid] = GetPlayerVirtualWorld(playerid);
	TogglePlayerSpectating(playerid, true);
	if(IsPlayerInAnyVehicle(id)){
	    if(GetPlayerInterior(id) > 0){
			SetPlayerInterior(playerid,GetPlayerInterior(id));}
		if(GetPlayerVirtualWorld(id) > 0){
		    SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(id));}
	    PlayerSpectateVehicle(playerid,GetPlayerVehicleID(id));}
	else{
	    if(GetPlayerInterior(id) > 0){
			SetPlayerInterior(playerid,GetPlayerInterior(id));}
		if(GetPlayerVirtualWorld(id) > 0){
		    SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(id));}
	    PlayerSpectatePlayer(playerid,id);}
	new String[130];
	format(String, sizeof(String),"You have started to spectate %s.",PlayerName(id));
	SendClientMessage(playerid,0x0080C0FF,String);
	format(String,sizeof(String),""RED"%s "RED"%s started to spectate %s.",RankStaff(playerid),PlayerName(playerid),PlayerName(id)); 
	AdministratorMessage(COLOR_RED,String); 
	IsSpecing[playerid] = 1;
	IsBeingSpeced[id] = 1;
	spectatorid[playerid] = id;
 	return 1;}

 CMD:specoff(cmdid,playerid, params[]){
	if(PlayerInfo[playerid][pA]<3) return SendClientMessage(playerid,-1,"SERVER: Unknown command.");
	if(IsSpecing[playerid] == 0) return SendClientMessage(playerid,Grey,"You are not spectating anyone.");
	TogglePlayerSpectating(playerid, 0);
	new String[130];
	format(String,sizeof(String),""RED"%s "RED"%s stopped to spectate %s.",RankStaff(playerid),PlayerName(playerid),PlayerName(spectatorid[playerid])); 
	AdministratorMessage(COLOR_RED,String); 
	return 1;}

CMD:freeze(cmdid,playerid,params[]){
	if(PlayerInfo[playerid][pA]<1) return SendClientMessage(playerid,-1,"SERVER: Unknown command.");
	new id;
	if(sscanf(params,"u",id)) return SendClientMessage(playerid, Grey, "Usage: /freeze [id]");
	TogglePlayerControllable(id, false);
	new String[130];
	format(String,sizeof(String),""RED"%s "RED"%s freeze %s.",RankStaff(playerid),PlayerName(playerid),PlayerName(id)); 
	AdministratorMessage(COLOR_RED,String); 
	return 1;}

CMD:unfreeze(cmdid,playerid,params[]){
	if(PlayerInfo[playerid][pA]<1) return SendClientMessage(playerid,-1,"SERVER: Unknown command.");
	new id;
	if(sscanf(params,"u",id)) return SendClientMessage(playerid, Grey, "Usage: /unfreeze [id]");
	TogglePlayerControllable(id, true);
	new String[130];
	format(String,sizeof(String),""RED"%s "RED"%s freeze %s.",RankStaff(playerid),PlayerName(playerid),PlayerName(id)); 
	AdministratorMessage(COLOR_RED,String); 
	return 1;}

CMD:crash(cmdid,playerid,params[])
{
	if(PlayerInfo[playerid][pA]<8) return SendClientMessage(playerid,-1,"SERVER: Unknown command.");
	new id;
	if(sscanf(params,"u",id)) return SendClientMessage(playerid, Grey, "Usage: /crash [id]");
	new String[130];
	format(String,sizeof(String),""RED"%s "RED"%s has set the crash to %s.",RankStaff(playerid),PlayerName(playerid),PlayerName(id)); 
	AdministratorMessage(COLOR_RED,String); 
	GameTextForPlayer(id, "????!$$%&'()*+,-./01~!@#   $^&*()_-+={[}]:;'<,>.?/", 10000, 6);
	return 1;
}